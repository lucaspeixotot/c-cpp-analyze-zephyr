
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20001ad0 	.word	0x20001ad0

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, u32_t *, data, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   4:	00001dbd 	.word	0x00001dbd
   8:	00001e15 	.word	0x00001e15
		if (fdtable[fd].obj == NULL) {
   c:	00001c49 	.word	0x00001c49
  10:	00001c49 	.word	0x00001c49
  14:	00001c49 	.word	0x00001c49
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	00001c49 	.word	0x00001c49

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE0(K_SYSCALL_Z_ERRNO, z_errno, int *)
  1c:	00001c49 	.word	0x00001c49
	errno = ENFILE;
  20:	00001c49 	.word	0x00001c49
	return -1;
  24:	00001c49 	.word	0x00001c49

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
  28:	00001c49 	.word	0x00001c49
  2c:	00001885 	.word	0x00001885
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	00001c49 	.word	0x00001c49
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	00001c49 	.word	0x00001c49
  38:	00001841 	.word	0x00001841
  3c:	00001c49 	.word	0x00001c49

00000040 <_irq_vector_table>:
  40:	00001d7d 00005b07 00001d7d 00001d7d     }....[..}...}...
	u16_t crc = initial_value;
	size_t padding = pad ? sizeof(crc) : 0;
	size_t i, b;

	/* src length + padding (if required) */
	for (i = 0; i < len + padding; i++) {
  50:	00001d7d 00001d7d 00001d7d 00001d7d     }...}...}...}...

static struct rbnode *get_child(struct rbnode *n, int side)
{
	CHECK(n);
	if (side != 0) {
		return n->children[1];
  60:	00001d7d 00001d7d 00001d7d 00001d7d     }...}...}...}...
		 * upper node.  Remember to swap the color bits of the
		 * two nodes also.  And of course we don't have parent
		 * pointers, so the stack tracking this structure
		 * needs to be swapped too!
		 */
		if (hiparent != NULL) {
  70:	00001d7d 00001d7d 00001d7d 00001d7d     }...}...}...}...
			set_child(hiparent, get_side(hiparent, node), node2);
  80:	00001d7d 00001d7d 00001d7d 00001d7d     }...}...}...}...
		n->children[0] = (void *) (new | (old & 1UL));
  90:	00001d7d 00001d7d 00001d7d 00001d7d     }...}...}...}...
  a0:	00001d7d 00001d7d 00001d7d 00001d7d     }...}...}...}...

		set_child(node2, 1, get_child(node, 1));
		set_child(node, 1, NULL);

		tmp = stack[stacksz0 - 1];
		stack[stacksz0 - 1] = stack[stacksz - 1];
  b0:	00001d7d 00001d7d 00001d7d 00001d7d     }...}...}...}...
		stack[stacksz - 1] = tmp;
  c0:	00001d7d 00001d7d 00001d7d 00001d7d     }...}...}...}...
	*p = (*p & ~1UL) | color;
  d0:	00001d7d 00001d7d 00001d7d              }...}...}...

Disassembly of section _TEXT_SECTION_NAME_2:

000000e0 <__aeabi_ldivmod>:

	CHECK(!get_child(node, 0) || !get_child(node, 1));

	struct rbnode *child = get_child(node, 0);

	if (child == NULL) {
      e0:	b97b      	cbnz	r3, 102 <CONFIG_PRIVILEGED_STACK_SIZE+0x2>
      e2:	b972      	cbnz	r2, 102 <CONFIG_PRIVILEGED_STACK_SIZE+0x2>
      e4:	2900      	cmp	r1, #0
		child = get_child(node, 1);
	}

	/* Removing the root */
	if (stacksz < 2) {
      e6:	bfbe      	ittt	lt
		return n->children[1];
      e8:	2000      	movlt	r0, #0
	if (stacksz < 2) {
      ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
		tree->root = child;
      ee:	e006      	blt.n	fe <__aeabi_ldivmod+0x1e>
		if (child != NULL) {
      f0:	bf08      	it	eq
	*p = (*p & ~1UL) | color;
      f2:	2800      	cmpeq	r0, #0
      f4:	bf1c      	itt	ne
      f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
      fa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
		}
	}

	/* We may have rotated up into the root! */
	tree->root = stack[0];
}
      fe:	f000 b9c5 	b.w	48c <__aeabi_idiv0>
     102:	f1ad 0c08 	sub.w	ip, sp, #8
			stack[stacksz++] = node2;
     106:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     10a:	2900      	cmp	r1, #0
     10c:	db09      	blt.n	122 <CONFIG_PRIVILEGED_STACK_SIZE+0x22>
     10e:	2b00      	cmp	r3, #0
			tree->root = node2;
     110:	db1a      	blt.n	148 <CONFIG_IDLE_STACK_SIZE+0x8>
     112:	f000 f84d 	bl	1b0 <__udivmoddi4>
	return get_child(parent, 1) == child ? 1 : 0;
     116:	f8dd e004 	ldr.w	lr, [sp, #4]
			set_child(loparent, get_side(loparent, node2), node);
     11a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     11e:	b004      	add	sp, #16
     120:	4770      	bx	lr
     122:	4240      	negs	r0, r0
     124:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
	uintptr_t l = (uintptr_t) n->children[0];
     128:	2b00      	cmp	r3, #0
		n->children[0] = (void *) (new | (old & 1UL));
     12a:	db1b      	blt.n	164 <CONFIG_IDLE_STACK_SIZE+0x24>
     12c:	f000 f840 	bl	1b0 <__udivmoddi4>
	l &= ~1UL;
     130:	f8dd e004 	ldr.w	lr, [sp, #4]
		n->children[0] = (void *) (new | (old & 1UL));
     134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	l &= ~1UL;
     138:	b004      	add	sp, #16
     13a:	4240      	negs	r0, r0
		n->children[0] = (void *) (new | (old & 1UL));
     13c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     140:	4252      	negs	r2, r2
     142:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
			tree->max_depth = 0;
     146:	4770      	bx	lr
     148:	4252      	negs	r2, r2
     14a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
	struct rbnode *parent = stack[stacksz - 2];
     14e:	f000 f82f 	bl	1b0 <__udivmoddi4>
	if (!child) {
     152:	f8dd e004 	ldr.w	lr, [sp, #4]
		if (is_black(node)) {
     156:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			fix_missing_black(stack, stacksz, NULL);
     15a:	b004      	add	sp, #16
     15c:	4240      	negs	r0, r0
     15e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     162:	4770      	bx	lr
	return get_child(parent, 1) == child ? 1 : 0;
     164:	4252      	negs	r2, r2
			set_child(parent, get_side(parent, node), NULL);
     166:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     16a:	f000 f821 	bl	1b0 <__udivmoddi4>
     16e:	f8dd e004 	ldr.w	lr, [sp, #4]
	tree->root = stack[0];
     172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     176:	b004      	add	sp, #16
     178:	4252      	negs	r2, r2
     17a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
		set_child(parent, get_side(parent, node), child);
     17e:	4770      	bx	lr

00000180 <__aeabi_uldivmod>:
     180:	b953      	cbnz	r3, 198 <__aeabi_uldivmod+0x18>
     182:	b94a      	cbnz	r2, 198 <__aeabi_uldivmod+0x18>
     184:	2900      	cmp	r1, #0
     186:	bf08      	it	eq
     188:	2800      	cmpeq	r0, #0
     18a:	bf1c      	itt	ne
     18c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
	return ((uintptr_t)n->children[0]) & 1UL;
     190:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
		if (is_red(node) || is_red(child)) {
     194:	f000 b97a 	b.w	48c <__aeabi_idiv0>
     198:	f1ad 0c08 	sub.w	ip, sp, #8
	*p = (*p & ~1UL) | color;
     19c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     1a0:	f000 f806 	bl	1b0 <__udivmoddi4>
     1a4:	f8dd e004 	ldr.w	lr, [sp, #4]
			stack[stacksz - 1] = child;
     1a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			fix_missing_black(stack, stacksz, NULL);
     1ac:	b004      	add	sp, #16
	if (stacksz < 2) {
     1ae:	4770      	bx	lr

000001b0 <__udivmoddi4>:
     1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		tree->root = child;
     1b4:	468c      	mov	ip, r1
     1b6:	460d      	mov	r5, r1
			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt) {
					prefix = 2;
     1b8:	4604      	mov	r4, r0
	return len + (buf - buf0);
     1ba:	9e08      	ldr	r6, [sp, #32]
     1bc:	2b00      	cmp	r3, #0
     1be:	d151      	bne.n	264 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xa4>
					prefix = 2;
     1c0:	428a      	cmp	r2, r1
     1c2:	4617      	mov	r7, r2
     1c4:	d96d      	bls.n	2a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x22>
     1c6:	fab2 fe82 	clz	lr, r2
     1ca:	f1be 0f00 	cmp.w	lr, #0
			switch (c) {
     1ce:	d00b      	beq.n	1e8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x28>
     1d0:	f1ce 0c20 	rsb	ip, lr, #32
     1d4:	fa01 f50e 	lsl.w	r5, r1, lr
     1d8:	fa20 fc0c 	lsr.w	ip, r0, ip
     1dc:	fa02 f70e 	lsl.w	r7, r2, lr
     1e0:	ea4c 0c05 	orr.w	ip, ip, r5
				int32_temp = (int32_t) va_arg(vargs, int32_t);
     1e4:	fa00 f40e 	lsl.w	r4, r0, lr
     1e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
		*buf++ = '-';
     1ec:	0c25      	lsrs	r5, r4, #16
		if (value != 0x80000000) {
     1ee:	fbbc f8fa 	udiv	r8, ip, sl
		*buf++ = '-';
     1f2:	fa1f f987 	uxth.w	r9, r7
		if (value != 0x80000000) {
     1f6:	fb0a cc18 	mls	ip, sl, r8, ip
		*buf++ = ' ';
     1fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
	return _to_x(buf, value, 10, precision);
     1fe:	fb08 f309 	mul.w	r3, r8, r9
     202:	42ab      	cmp	r3, r5
     204:	d90a      	bls.n	21c <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x5c>
     206:	19ed      	adds	r5, r5, r7
				if (fplus || fspace || (int32_temp < 0)) {
     208:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
     20c:	f080 8123 	bcs.w	456 <CONFIG_BT_RX_STACK_SIZE+0x56>
     210:	42ab      	cmp	r3, r5
				if (fplus || fspace || (int32_temp < 0)) {
     212:	f240 8120 	bls.w	456 <CONFIG_BT_RX_STACK_SIZE+0x56>
     216:	f1a8 0802 	sub.w	r8, r8, #2
     21a:	443d      	add	r5, r7
     21c:	1aed      	subs	r5, r5, r3
     21e:	b2a4      	uxth	r4, r4
				}
				need_justifying = true;
				if (precision != -1) {
					pad = ' ';
     220:	fbb5 f0fa 	udiv	r0, r5, sl
			switch (c) {
     224:	fb0a 5510 	mls	r5, sl, r0, r5
     228:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     22c:	fb00 f909 	mul.w	r9, r0, r9
     230:	45a1      	cmp	r9, r4
				cptr_temp = (char *) va_arg(vargs, char *);
     232:	d909      	bls.n	248 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x88>
     234:	19e4      	adds	r4, r4, r7
     236:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
					if (cptr_temp[c] == '\0') {
     23a:	f080 810a 	bcs.w	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     23e:	45a1      	cmp	r9, r4
     240:	f240 8107 	bls.w	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
				if ((precision >= 0) && (precision < c)) {
     244:	3802      	subs	r0, #2
     246:	443c      	add	r4, r7
				if (c > 0) {
     248:	eba4 0409 	sub.w	r4, r4, r9
     24c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
					memcpy(buf, cptr_temp, (size_t) c);
     250:	2100      	movs	r1, #0
     252:	2e00      	cmp	r6, #0
     254:	d061      	beq.n	31a <CONFIG_BT_HCI_TX_STACK_SIZE+0x9a>
     256:	fa24 f40e 	lsr.w	r4, r4, lr
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
     25a:	2300      	movs	r3, #0
     25c:	6034      	str	r4, [r6, #0]
     25e:	6073      	str	r3, [r6, #4]
     260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				buf[1] = '\0';
     264:	428b      	cmp	r3, r1
     266:	d907      	bls.n	278 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xb8>
				c = 1;
     268:	2e00      	cmp	r6, #0
					prefix = 2;
     26a:	d054      	beq.n	316 <CONFIG_BT_HCI_TX_STACK_SIZE+0x96>
     26c:	2100      	movs	r1, #0
     26e:	e886 0021 	stmia.w	r6, {r0, r5}
	} else if (fplus) {
     272:	4608      	mov	r0, r1
		*buf++ = '+';
     274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		*buf++ = ' ';
     278:	fab3 f183 	clz	r1, r3
     27c:	2900      	cmp	r1, #0
	} else if (fspace) {
     27e:	f040 808e 	bne.w	39e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     282:	42ab      	cmp	r3, r5
		*buf++ = ' ';
     284:	d302      	bcc.n	28c <CONFIG_BT_HCI_TX_STACK_SIZE+0xc>
     286:	4282      	cmp	r2, r0
	} else if (fspace) {
     288:	f200 80fa 	bhi.w	480 <CONFIG_BT_RX_STACK_SIZE+0x80>
     28c:	1a84      	subs	r4, r0, r2
     28e:	eb65 0503 	sbc.w	r5, r5, r3
					prefix = 1;
     292:	2001      	movs	r0, #1
     294:	46ac      	mov	ip, r5
     296:	2e00      	cmp	r6, #0
     298:	d03f      	beq.n	31a <CONFIG_BT_HCI_TX_STACK_SIZE+0x9a>
     29a:	e886 1010 	stmia.w	r6, {r4, ip}
     29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				u.d = (double) va_arg(vargs, double);
     2a2:	b912      	cbnz	r2, 2aa <CONFIG_BT_HCI_TX_STACK_SIZE+0x2a>
     2a4:	2701      	movs	r7, #1
				double_temp = u.i;
     2a6:	fbb7 f7f2 	udiv	r7, r7, r2
				u.d = (double) va_arg(vargs, double);
     2aa:	fab7 fe87 	clz	lr, r7
     2ae:	f1be 0f00 	cmp.w	lr, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
     2b2:	d134      	bne.n	31e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     2b4:	1beb      	subs	r3, r5, r7
     2b6:	0c3a      	lsrs	r2, r7, #16
     2b8:	fa1f fc87 	uxth.w	ip, r7
     2bc:	2101      	movs	r1, #1
     2be:	fbb3 f8f2 	udiv	r8, r3, r2
	exp = double_temp >> 52 & 0x7ff;
     2c2:	0c25      	lsrs	r5, r4, #16
	sign = !!(double_temp & HIGHBIT64);
     2c4:	fb02 3318 	mls	r3, r2, r8, r3
	if (exp == 0x7ff) {
     2c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
	fract = (double_temp << 11) & ~HIGHBIT64;
     2cc:	fb0c f308 	mul.w	r3, ip, r8
     2d0:	42ab      	cmp	r3, r5
     2d2:	d907      	bls.n	2e4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x64>
	sign = !!(double_temp & HIGHBIT64);
     2d4:	19ed      	adds	r5, r5, r7
	if (exp == 0x7ff) {
     2d6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
		if (sign) {
     2da:	d202      	bcs.n	2e2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x62>
     2dc:	42ab      	cmp	r3, r5
     2de:	f200 80d1 	bhi.w	484 <CONFIG_BT_RX_STACK_SIZE+0x84>
			*buf++ = '-';
     2e2:	4680      	mov	r8, r0
     2e4:	1aed      	subs	r5, r5, r3
     2e6:	b2a3      	uxth	r3, r4
		if (sign) {
     2e8:	fbb5 f0f2 	udiv	r0, r5, r2
			*buf++ = '-';
     2ec:	fb02 5510 	mls	r5, r2, r0, r5
		if (!fract) {
     2f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     2f4:	fb0c fc00 	mul.w	ip, ip, r0
			if (isupper(c)) {
     2f8:	45a4      	cmp	ip, r4
				*buf++ = 'I';
     2fa:	d907      	bls.n	30c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>
     2fc:	19e4      	adds	r4, r4, r7
				*buf++ = 'N';
     2fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
				*buf++ = 'F';
     302:	d202      	bcs.n	30a <CONFIG_BT_HCI_TX_STACK_SIZE+0x8a>
     304:	45a4      	cmp	ip, r4
     306:	f200 80b8 	bhi.w	47a <CONFIG_BT_RX_STACK_SIZE+0x7a>
	*buf = 0;
     30a:	4618      	mov	r0, r3
     30c:	eba4 040c 	sub.w	r4, r4, ip
				if (fplus || fspace || (buf[0] == '-')) {
     310:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
	return buf - start;
     314:	e79d      	b.n	252 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x92>
     316:	4631      	mov	r1, r6
				if (fplus || fspace || (buf[0] == '-')) {
     318:	4630      	mov	r0, r6
     31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     31e:	f1ce 0420 	rsb	r4, lr, #32
     322:	fa05 f30e 	lsl.w	r3, r5, lr
     326:	fa07 f70e 	lsl.w	r7, r7, lr
     32a:	fa20 f804 	lsr.w	r8, r0, r4
     32e:	0c3a      	lsrs	r2, r7, #16
     330:	fa25 f404 	lsr.w	r4, r5, r4

			case 0:
				return count;
			}

			if (c >= MAXFLD + 1) {
     334:	ea48 0803 	orr.w	r8, r8, r3
     338:	fbb4 f1f2 	udiv	r1, r4, r2
     33c:	ea4f 4518 	mov.w	r5, r8, lsr #16
				*buf++ = 'i';
     340:	fb02 4411 	mls	r4, r2, r1, r4
				*buf++ = 'n';
     344:	fa1f fc87 	uxth.w	ip, r7
				*buf++ = 'f';
     348:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     34c:	fb01 f30c 	mul.w	r3, r1, ip
				*buf++ = 'N';
     350:	42ab      	cmp	r3, r5
     352:	fa00 f40e 	lsl.w	r4, r0, lr
				*buf++ = 'n';
     356:	d909      	bls.n	36c <CONFIG_BT_HCI_TX_STACK_SIZE+0xec>
				*buf++ = 'a';
     358:	19ed      	adds	r5, r5, r7
				*buf++ = 'N';
     35a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
				*buf++ = 'n';
     35e:	f080 808a 	bcs.w	476 <CONFIG_BT_RX_STACK_SIZE+0x76>
				*buf++ = 'n';
     362:	42ab      	cmp	r3, r5
     364:	f240 8087 	bls.w	476 <CONFIG_BT_RX_STACK_SIZE+0x76>
		c = 'f';
     368:	3902      	subs	r1, #2
	if ((exp | fract) != 0) {
     36a:	443d      	add	r5, r7
     36c:	1aeb      	subs	r3, r5, r3
     36e:	fa1f f588 	uxth.w	r5, r8
		c = 'f';
     372:	fbb3 f0f2 	udiv	r0, r3, r2
	if ((exp | fract) != 0) {
     376:	fb02 3310 	mls	r3, r2, r0, r3
		fract |= HIGHBIT64;
     37a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     37e:	fb00 f30c 	mul.w	r3, r0, ip
	if (decexp && sign) {
     382:	42ab      	cmp	r3, r5
     384:	d907      	bls.n	396 <CONFIG_BT_HCI_TX_STACK_SIZE+0x116>
     386:	19ed      	adds	r5, r5, r7
     388:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
     38c:	d26f      	bcs.n	46e <CONFIG_BT_RX_STACK_SIZE+0x6e>
     38e:	42ab      	cmp	r3, r5
	if (decexp && sign) {
     390:	d96d      	bls.n	46e <CONFIG_BT_RX_STACK_SIZE+0x6e>
		*buf++ = '-';
     392:	3802      	subs	r0, #2
		*buf++ = ' ';
     394:	443d      	add	r5, r7
     396:	1aeb      	subs	r3, r5, r3
     398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
	} else if (fspace) {
     39c:	e78f      	b.n	2be <CONFIG_BT_HCI_TX_STACK_SIZE+0x3e>
	decexp = 0;
     39e:	f1c1 0720 	rsb	r7, r1, #32
	while (exp <= -3) {
     3a2:	fa22 f807 	lsr.w	r8, r2, r7
	while (exp > 0) {
     3a6:	408b      	lsls	r3, r1
     3a8:	fa05 f401 	lsl.w	r4, r5, r1
		_rlrshift(&fract);
     3ac:	ea48 0303 	orr.w	r3, r8, r3
		exp++;
     3b0:	fa20 fe07 	lsr.w	lr, r0, r7
		_rlrshift(&fract);
     3b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
	while (exp < (0 + 4)) {
     3b8:	40fd      	lsrs	r5, r7
     3ba:	ea4e 0e04 	orr.w	lr, lr, r4
	if ((c == 'g') || (c == 'G')) {
     3be:	fbb5 f9fc 	udiv	r9, r5, ip
		precision = 6;		/* Default precision if none given */
     3c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
	if ((c == 'g') || (c == 'G')) {
     3c6:	fb0c 5519 	mls	r5, ip, r9, r5
		if (!falt && (precision > 0)) {
     3ca:	fa1f f883 	uxth.w	r8, r3
     3ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     3d2:	fb09 f408 	mul.w	r4, r9, r8
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
     3d6:	42ac      	cmp	r4, r5
     3d8:	fa02 f201 	lsl.w	r2, r2, r1
     3dc:	fa00 fa01 	lsl.w	sl, r0, r1
				c = 'E';
     3e0:	d908      	bls.n	3f4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x174>
     3e2:	18ed      	adds	r5, r5, r3
     3e4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
		exp = precision + 1;
     3e8:	d243      	bcs.n	472 <CONFIG_BT_RX_STACK_SIZE+0x72>
     3ea:	42ac      	cmp	r4, r5
     3ec:	d941      	bls.n	472 <CONFIG_BT_RX_STACK_SIZE+0x72>
	if ((exp | fract) != 0) {
     3ee:	f1a9 0902 	sub.w	r9, r9, #2
	} else if (fplus) {
     3f2:	441d      	add	r5, r3
     3f4:	1b2d      	subs	r5, r5, r4
		*buf++ = '+';
     3f6:	fa1f fe8e 	uxth.w	lr, lr
	} else if (fspace) {
     3fa:	fbb5 f0fc 	udiv	r0, r5, ip
     3fe:	fb0c 5510 	mls	r5, ip, r0, r5
		*buf++ = ' ';
     402:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
	} else if (fspace) {
     406:	fb00 f808 	mul.w	r8, r0, r8
			_rlrshift(&fract);
     40a:	45a0      	cmp	r8, r4
     40c:	d907      	bls.n	41e <CONFIG_BT_RX_STACK_SIZE+0x1e>
			exp++;
     40e:	18e4      	adds	r4, r4, r3
     410:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
		while ((fract >> 32) >= (MAXFP1 / 5)) {
     414:	d229      	bcs.n	46a <CONFIG_BT_RX_STACK_SIZE+0x6a>
     416:	45a0      	cmp	r8, r4
     418:	d927      	bls.n	46a <CONFIG_BT_RX_STACK_SIZE+0x6a>
     41a:	3802      	subs	r0, #2
     41c:	441c      	add	r4, r3
     41e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     422:	eba4 0408 	sub.w	r4, r4, r8
     426:	fba0 8902 	umull	r8, r9, r0, r2
     42a:	454c      	cmp	r4, r9
		fract *= 5;
     42c:	46c6      	mov	lr, r8
     42e:	464d      	mov	r5, r9
     430:	d315      	bcc.n	45e <CONFIG_BT_RX_STACK_SIZE+0x5e>
     432:	d012      	beq.n	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     434:	b156      	cbz	r6, 44c <CONFIG_BT_RX_STACK_SIZE+0x4c>
     436:	ebba 030e 	subs.w	r3, sl, lr
		exp++;
     43a:	eb64 0405 	sbc.w	r4, r4, r5
		decexp--;
     43e:	fa04 f707 	lsl.w	r7, r4, r7
     442:	40cb      	lsrs	r3, r1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
     444:	431f      	orrs	r7, r3
     446:	40cc      	lsrs	r4, r1
     448:	6037      	str	r7, [r6, #0]
     44a:	6074      	str	r4, [r6, #4]
     44c:	2100      	movs	r1, #0
     44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     452:	4618      	mov	r0, r3
     454:	e6f8      	b.n	248 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x88>
     456:	4690      	mov	r8, r2
     458:	e6e0      	b.n	21c <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x5c>
     45a:	45c2      	cmp	sl, r8
     45c:	d2ea      	bcs.n	434 <CONFIG_BT_RX_STACK_SIZE+0x34>
     45e:	ebb8 0e02 	subs.w	lr, r8, r2
     462:	eb69 0503 	sbc.w	r5, r9, r3
     466:	3801      	subs	r0, #1
     468:	e7e4      	b.n	434 <CONFIG_BT_RX_STACK_SIZE+0x34>
			fract <<= 1;
     46a:	4628      	mov	r0, r5
     46c:	e7d7      	b.n	41e <CONFIG_BT_RX_STACK_SIZE+0x1e>
			exp--;
     46e:	4640      	mov	r0, r8
     470:	e791      	b.n	396 <CONFIG_BT_HCI_TX_STACK_SIZE+0x116>
     472:	4681      	mov	r9, r0
     474:	e7be      	b.n	3f4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x174>
     476:	4601      	mov	r1, r0
		_ldiv5(&fract);
     478:	e778      	b.n	36c <CONFIG_BT_HCI_TX_STACK_SIZE+0xec>
     47a:	3802      	subs	r0, #2
     47c:	443c      	add	r4, r7
     47e:	e745      	b.n	30c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>
     480:	4608      	mov	r0, r1
		exp--;
     482:	e708      	b.n	296 <CONFIG_BT_HCI_TX_STACK_SIZE+0x16>
     484:	f1a8 0802 	sub.w	r8, r8, #2
		decexp++;
     488:	443d      	add	r5, r7
     48a:	e72b      	b.n	2e4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x64>

0000048c <__aeabi_idiv0>:
		while ((fract >> 32) <= (MAXFP1 / 2)) {
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <version_get_major>:
}

u8_t version_get_major()
{
    return __version.major;
}
     490:	2000      	movs	r0, #0
     492:	4770      	bx	lr

00000494 <version_get_minor>:

u8_t version_get_minor()
{
    return __version.minor;
}
     494:	2001      	movs	r0, #1
     496:	4770      	bx	lr

00000498 <version_get_build>:
u16_t version_get_build()
{
    return __version.build;
}
     498:	202d      	movs	r0, #45	; 0x2d
     49a:	4770      	bx	lr

0000049c <pwm_pin_set_usec>:
 * @retval 0 If successful.
 * @retval Negative errno code if failure.
 */
static inline int pwm_pin_set_usec(struct device *dev, u32_t pwm,
				   u32_t period, u32_t pulse)
{
     49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4a0:	469b      	mov	fp, r3
	return api->get_cycles_per_sec(dev, pwm, cycles);
     4a2:	6843      	ldr	r3, [r0, #4]
{
     4a4:	b085      	sub	sp, #20
     4a6:	4616      	mov	r6, r2
	return api->get_cycles_per_sec(dev, pwm, cycles);
     4a8:	685b      	ldr	r3, [r3, #4]
{
     4aa:	9101      	str	r1, [sp, #4]
	return api->get_cycles_per_sec(dev, pwm, cycles);
     4ac:	aa02      	add	r2, sp, #8
{
     4ae:	4605      	mov	r5, r0
	return api->get_cycles_per_sec(dev, pwm, cycles);
     4b0:	4798      	blx	r3
	u64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
     4b2:	bb48      	cbnz	r0, 508 <pwm_pin_set_usec+0x6c>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     4b4:	9c02      	ldr	r4, [sp, #8]
     4b6:	f8dd a00c 	ldr.w	sl, [sp, #12]
     4ba:	4a16      	ldr	r2, [pc, #88]	; (514 <pwm_pin_set_usec+0x78>)
     4bc:	fba6 0104 	umull	r0, r1, r6, r4
     4c0:	fb06 110a 	mla	r1, r6, sl, r1
     4c4:	2300      	movs	r3, #0
     4c6:	f7ff fe5b 	bl	180 <__aeabi_uldivmod>
	if (period_cycles >= ((u64_t)1 << 32)) {
     4ca:	f04f 0900 	mov.w	r9, #0
     4ce:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     4d2:	4589      	cmp	r9, r1
     4d4:	bf08      	it	eq
     4d6:	4580      	cmpeq	r8, r0
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     4d8:	4606      	mov	r6, r0
	if (period_cycles >= ((u64_t)1 << 32)) {
     4da:	d318      	bcc.n	50e <pwm_pin_set_usec+0x72>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     4dc:	fbab 0104 	umull	r0, r1, fp, r4
     4e0:	fb0b 110a 	mla	r1, fp, sl, r1
     4e4:	4a0b      	ldr	r2, [pc, #44]	; (514 <pwm_pin_set_usec+0x78>)
     4e6:	2300      	movs	r3, #0
     4e8:	f7ff fe4a 	bl	180 <__aeabi_uldivmod>
	if (pulse_cycles >= ((u64_t)1 << 32)) {
     4ec:	4589      	cmp	r9, r1
     4ee:	bf08      	it	eq
     4f0:	4580      	cmpeq	r8, r0
     4f2:	d30c      	bcc.n	50e <pwm_pin_set_usec+0x72>
	return api->pin_set(dev, pwm, period, pulse);
     4f4:	686b      	ldr	r3, [r5, #4]
     4f6:	9901      	ldr	r1, [sp, #4]
     4f8:	681c      	ldr	r4, [r3, #0]
     4fa:	4632      	mov	r2, r6
     4fc:	4603      	mov	r3, r0
     4fe:	4628      	mov	r0, r5
     500:	47a0      	blx	r4
		return -ENOTSUP;
	}

	return pwm_pin_set_cycles(dev, pwm, (u32_t)period_cycles,
				  (u32_t)pulse_cycles);
}
     502:	b005      	add	sp, #20
     504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EIO;
     508:	f06f 0004 	mvn.w	r0, #4
     50c:	e7f9      	b.n	502 <pwm_pin_set_usec+0x66>
		return -ENOTSUP;
     50e:	f06f 0022 	mvn.w	r0, #34	; 0x22
     512:	e7f6      	b.n	502 <pwm_pin_set_usec+0x66>
     514:	000f4240 	.word	0x000f4240

00000518 <leds_pwm_init_device>:
#include "leds_pwm.h"


int leds_pwm_init_device(leds_pwm_device_t *leds_pwm_device, char *pwm_driver, u8_t pin,
                         u16_t period)
{
     518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (leds_pwm_device->initiated) {
     51c:	7ac4      	ldrb	r4, [r0, #11]
{
     51e:	4605      	mov	r5, r0
     520:	460e      	mov	r6, r1
     522:	4617      	mov	r7, r2
     524:	4698      	mov	r8, r3
    if (leds_pwm_device->initiated) {
     526:	b9d4      	cbnz	r4, 55e <leds_pwm_init_device+0x46>
    return 0;
}

int leds_pwm_valid_pin_mask(u8_t pin)
{
    if (pin != PWM_CHANNEL0 && pin != PWM_CHANNEL1 && pin != PWM_CHANNEL2 && pin != PWM_CHANNEL3) {
     528:	f1a2 0311 	sub.w	r3, r2, #17
     52c:	2b03      	cmp	r3, #3
     52e:	d807      	bhi.n	540 <leds_pwm_init_device+0x28>

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
     530:	4608      	mov	r0, r1
     532:	f007 fa1f 	bl	7974 <_impl_device_get_binding>
    if (!led_pwm_dev) {
     536:	b938      	cbnz	r0, 548 <leds_pwm_init_device+0x30>
        printk("Cannot find %s!\n", pwm_driver);
     538:	4631      	mov	r1, r6
     53a:	480b      	ldr	r0, [pc, #44]	; (568 <leds_pwm_init_device+0x50>)
     53c:	f000 fd28 	bl	f90 <printk>
        return -EINVAL;
     540:	f06f 0015 	mvn.w	r0, #21
     544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    leds_pwm_device->initiated   = 1;
     548:	2301      	movs	r3, #1
    leds_pwm_device->pin         = pin;
     54a:	712f      	strb	r7, [r5, #4]
    leds_pwm_device->initiated   = 1;
     54c:	72eb      	strb	r3, [r5, #11]
    leds_pwm_device->state       = 1;
     54e:	72ab      	strb	r3, [r5, #10]
    leds_pwm_device->device      = led_pwm_dev;
     550:	6028      	str	r0, [r5, #0]
    leds_pwm_device->period      = period;
     552:	f8a5 8008 	strh.w	r8, [r5, #8]
    leds_pwm_device->pulse_width = 0;
     556:	80ec      	strh	r4, [r5, #6]
    return 0;
     558:	4620      	mov	r0, r4
     55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -EBUSY;
     55e:	f06f 000f 	mvn.w	r0, #15
     562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     566:	bf00      	nop
     568:	00008cca 	.word	0x00008cca

0000056c <leds_pwm_change_pulse>:
}


int leds_pwm_change_pulse(leds_pwm_device_t *leds_pwm_device, u16_t pulse_width)
{
    if (!leds_pwm_device->initiated) {
     56c:	7ac3      	ldrb	r3, [r0, #11]
     56e:	b12b      	cbz	r3, 57c <leds_pwm_change_pulse+0x10>
        return -ENODEV;
    }

    if (pulse_width > leds_pwm_device->period || pulse_width < 0) {
     570:	8903      	ldrh	r3, [r0, #8]
     572:	428b      	cmp	r3, r1
     574:	d305      	bcc.n	582 <leds_pwm_change_pulse+0x16>
        return -EINVAL;
    }

    leds_pwm_device->pulse_width = pulse_width;
     576:	80c1      	strh	r1, [r0, #6]

    return 0;
     578:	2000      	movs	r0, #0
     57a:	4770      	bx	lr
        return -ENODEV;
     57c:	f06f 0012 	mvn.w	r0, #18
     580:	4770      	bx	lr
        return -EINVAL;
     582:	f06f 0015 	mvn.w	r0, #21
}
     586:	4770      	bx	lr

00000588 <leds_pwm_set_pulse>:

int leds_pwm_set_pulse(leds_pwm_device_t *leds_pwm_device)
{
     588:	b510      	push	{r4, lr}
    if (!leds_pwm_device->initiated) {
     58a:	7ac3      	ldrb	r3, [r0, #11]
     58c:	b183      	cbz	r3, 5b0 <leds_pwm_set_pulse+0x28>
        return -ENODEV;
    }

    if (leds_pwm_device->state) {
     58e:	7a83      	ldrb	r3, [r0, #10]
     590:	8902      	ldrh	r2, [r0, #8]
     592:	7901      	ldrb	r1, [r0, #4]
     594:	b153      	cbz	r3, 5ac <leds_pwm_set_pulse+0x24>
        int err = pwm_pin_set_usec(leds_pwm_device->device, leds_pwm_device->pin,
     596:	88c3      	ldrh	r3, [r0, #6]
        if (err) {
            printk("PWM pin set fails\n");
            return err;
        }
    } else {
        int err = pwm_pin_set_usec(leds_pwm_device->device, leds_pwm_device->pin,
     598:	6800      	ldr	r0, [r0, #0]
     59a:	f7ff ff7f 	bl	49c <pwm_pin_set_usec>
                                   leds_pwm_device->period, leds_pwm_device->period);
        if (err) {
     59e:	4604      	mov	r4, r0
     5a0:	b110      	cbz	r0, 5a8 <leds_pwm_set_pulse+0x20>
            printk("PWM pin set fails\n");
     5a2:	4805      	ldr	r0, [pc, #20]	; (5b8 <leds_pwm_set_pulse+0x30>)
     5a4:	f000 fcf4 	bl	f90 <printk>
            return err;
        }
    }
    return 0;
}
     5a8:	4620      	mov	r0, r4
     5aa:	bd10      	pop	{r4, pc}
        int err = pwm_pin_set_usec(leds_pwm_device->device, leds_pwm_device->pin,
     5ac:	4613      	mov	r3, r2
     5ae:	e7f3      	b.n	598 <leds_pwm_set_pulse+0x10>
        return -ENODEV;
     5b0:	f06f 0412 	mvn.w	r4, #18
     5b4:	e7f8      	b.n	5a8 <leds_pwm_set_pulse+0x20>
     5b6:	bf00      	nop
     5b8:	00008cdb 	.word	0x00008cdb

000005bc <leds_init_device>:
 */
#include "leds.h"


int leds_init_device(leds_device_t *leds_device)
{
     5bc:	b538      	push	{r3, r4, r5, lr}
    if (leds_device->initiated != 0) {
     5be:	7904      	ldrb	r4, [r0, #4]
{
     5c0:	4605      	mov	r5, r0
    if (leds_device->initiated != 0) {
     5c2:	b93c      	cbnz	r4, 5d4 <leds_init_device+0x18>
     5c4:	4805      	ldr	r0, [pc, #20]	; (5dc <CONFIG_BT_CTLR_XTAL_THRESHOLD>)
     5c6:	f007 f9d5 	bl	7974 <_impl_device_get_binding>
        return -EBUSY;
    }
    struct device *led_dev;
    led_dev                = device_get_binding(LED_PORT);
    leds_device->device    = led_dev;
    leds_device->initiated = 1;
     5ca:	2301      	movs	r3, #1
     5cc:	712b      	strb	r3, [r5, #4]
    leds_device->device    = led_dev;
     5ce:	6028      	str	r0, [r5, #0]
    return 0;
     5d0:	4620      	mov	r0, r4
     5d2:	bd38      	pop	{r3, r4, r5, pc}
        return -EBUSY;
     5d4:	f06f 000f 	mvn.w	r0, #15
}
     5d8:	bd38      	pop	{r3, r4, r5, pc}
     5da:	bf00      	nop
     5dc:	00008cee 	.word	0x00008cee

000005e0 <leds_configure>:

int leds_configure(leds_device_t *leds_device, u32_t led_pin)
{
     5e0:	b570      	push	{r4, r5, r6, lr}
    if (leds_device->initiated != 1) {
     5e2:	7903      	ldrb	r3, [r0, #4]
     5e4:	2b01      	cmp	r3, #1
{
     5e6:	4604      	mov	r4, r0
     5e8:	460d      	mov	r5, r1
    if (leds_device->initiated != 1) {
     5ea:	d10b      	bne.n	604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>
        return -ENODEV;
    }

    gpio_pin_configure(leds_device->device, led_pin,
     5ec:	6800      	ldr	r0, [r0, #0]
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
     5ee:	6843      	ldr	r3, [r0, #4]
     5f0:	460a      	mov	r2, r1
     5f2:	681e      	ldr	r6, [r3, #0]
     5f4:	2100      	movs	r1, #0
     5f6:	f240 1305 	movw	r3, #261	; 0x105
     5fa:	47b0      	blx	r6
                       GPIO_DIR_OUT | GPIO_PUD_PULL_UP | GPIO_INT_ACTIVE_HIGH);
    leds_device->state   = HIGH;
     5fc:	2000      	movs	r0, #0
     5fe:	7160      	strb	r0, [r4, #5]
    leds_device->led_pin = led_pin;
     600:	60a5      	str	r5, [r4, #8]

    return 0;
     602:	bd70      	pop	{r4, r5, r6, pc}
        return -ENODEV;
     604:	f06f 0012 	mvn.w	r0, #18
}
     608:	bd70      	pop	{r4, r5, r6, pc}

0000060a <leds_turn_on_led>:
    }
    return 0;
}

int leds_turn_on_led(leds_device_t *leds_device)
{
     60a:	b538      	push	{r3, r4, r5, lr}
    if (leds_device->initiated != 1) {
     60c:	7903      	ldrb	r3, [r0, #4]
     60e:	2b01      	cmp	r3, #1
{
     610:	4602      	mov	r2, r0
    if (leds_device->initiated != 1) {
     612:	d10a      	bne.n	62a <leds_turn_on_led+0x20>
        return -ENODEV;
    }

    leds_device->state = HIGH;
     614:	2400      	movs	r4, #0
     616:	7144      	strb	r4, [r0, #5]
    gpio_pin_write(leds_device->device, leds_device->led_pin, HIGH);
     618:	6800      	ldr	r0, [r0, #0]
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
     61a:	6892      	ldr	r2, [r2, #8]
     61c:	6843      	ldr	r3, [r0, #4]
     61e:	4621      	mov	r1, r4
     620:	685d      	ldr	r5, [r3, #4]
     622:	4623      	mov	r3, r4
     624:	47a8      	blx	r5
    return 0;
     626:	4620      	mov	r0, r4
     628:	bd38      	pop	{r3, r4, r5, pc}
        return -ENODEV;
     62a:	f06f 0012 	mvn.w	r0, #18
}
     62e:	bd38      	pop	{r3, r4, r5, pc}

00000630 <leds_turn_off_led>:

int leds_turn_off_led(leds_device_t *leds_device)
{
     630:	b510      	push	{r4, lr}
    if (leds_device->initiated != 1) {
     632:	7903      	ldrb	r3, [r0, #4]
     634:	2b01      	cmp	r3, #1
{
     636:	4602      	mov	r2, r0
    if (leds_device->initiated != 1) {
     638:	d108      	bne.n	64c <leds_turn_off_led+0x1c>
        return -ENODEV;
    }

    leds_device->state = LOW;
     63a:	7143      	strb	r3, [r0, #5]
    gpio_pin_write(leds_device->device, leds_device->led_pin, LOW);
     63c:	6800      	ldr	r0, [r0, #0]
     63e:	6892      	ldr	r2, [r2, #8]
     640:	6841      	ldr	r1, [r0, #4]
     642:	684c      	ldr	r4, [r1, #4]
     644:	2100      	movs	r1, #0
     646:	47a0      	blx	r4
    return 0;
     648:	2000      	movs	r0, #0
     64a:	bd10      	pop	{r4, pc}
        return -ENODEV;
     64c:	f06f 0012 	mvn.w	r0, #18
}
     650:	bd10      	pop	{r4, pc}
	...

00000654 <configure_board>:
leds_pwm_device_t pwm_device_2 = {0};
leds_device_t leds_device_3    = {0};
leds_device_t leds_device_4    = {0};

int configure_board()
{
     654:	b510      	push	{r4, lr}
    int err;
    err = leds_pwm_init_device(&pwm_device_1, PWM_DRIVER, PWM_CHANNEL0, PERIOD);
     656:	f644 6320 	movw	r3, #20000	; 0x4e20
     65a:	2211      	movs	r2, #17
     65c:	4911      	ldr	r1, [pc, #68]	; (6a4 <configure_board+0x50>)
     65e:	4812      	ldr	r0, [pc, #72]	; (6a8 <configure_board+0x54>)
     660:	f7ff ff5a 	bl	518 <leds_pwm_init_device>
    if (err) {
     664:	4604      	mov	r4, r0
     666:	b120      	cbz	r0, 672 <configure_board+0x1e>
        return err;
    }

    err = leds_pwm_init_device(&pwm_device_2, PWM_DRIVER, PWM_CHANNEL1, PERIOD);
    if (err) {
        printk("error initiating leds_pwm_device\n");
     668:	4810      	ldr	r0, [pc, #64]	; (6ac <configure_board+0x58>)
     66a:	f000 fc91 	bl	f90 <printk>

    leds_configure(&leds_device_3, LED2);
    leds_configure(&leds_device_4, LED3);

    return 0;
}
     66e:	4620      	mov	r0, r4
     670:	bd10      	pop	{r4, pc}
    err = leds_pwm_init_device(&pwm_device_2, PWM_DRIVER, PWM_CHANNEL1, PERIOD);
     672:	f644 6320 	movw	r3, #20000	; 0x4e20
     676:	2212      	movs	r2, #18
     678:	490a      	ldr	r1, [pc, #40]	; (6a4 <configure_board+0x50>)
     67a:	480d      	ldr	r0, [pc, #52]	; (6b0 <configure_board+0x5c>)
     67c:	f7ff ff4c 	bl	518 <leds_pwm_init_device>
    if (err) {
     680:	4604      	mov	r4, r0
     682:	2800      	cmp	r0, #0
     684:	d1f0      	bne.n	668 <configure_board+0x14>
    leds_init_device(&leds_device_3);
     686:	480b      	ldr	r0, [pc, #44]	; (6b4 <configure_board+0x60>)
     688:	f7ff ff98 	bl	5bc <leds_init_device>
    leds_init_device(&leds_device_4);
     68c:	480a      	ldr	r0, [pc, #40]	; (6b8 <configure_board+0x64>)
     68e:	f7ff ff95 	bl	5bc <leds_init_device>
    leds_configure(&leds_device_3, LED2);
     692:	2113      	movs	r1, #19
     694:	4807      	ldr	r0, [pc, #28]	; (6b4 <configure_board+0x60>)
     696:	f7ff ffa3 	bl	5e0 <leds_configure>
    leds_configure(&leds_device_4, LED3);
     69a:	2114      	movs	r1, #20
     69c:	4806      	ldr	r0, [pc, #24]	; (6b8 <configure_board+0x64>)
     69e:	f7ff ff9f 	bl	5e0 <leds_configure>
     6a2:	e7e4      	b.n	66e <configure_board+0x1a>
     6a4:	00008cf5 	.word	0x00008cf5
     6a8:	20000018 	.word	0x20000018
     6ac:	00008cfb 	.word	0x00008cfb
     6b0:	20000024 	.word	0x20000024
     6b4:	20000000 	.word	0x20000000
     6b8:	2000000c 	.word	0x2000000c

000006bc <main>:

void main(void)
{
     6bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printk("Firmware version: %d.%d.%d\n", version_get_major(), version_get_minor(),
     6c0:	f7ff fee6 	bl	490 <version_get_major>
     6c4:	4604      	mov	r4, r0
     6c6:	f7ff fee5 	bl	494 <version_get_minor>
     6ca:	4605      	mov	r5, r0
     6cc:	f7ff fee4 	bl	498 <version_get_build>
     6d0:	462a      	mov	r2, r5
     6d2:	4603      	mov	r3, r0
     6d4:	4621      	mov	r1, r4
     6d6:	4833      	ldr	r0, [pc, #204]	; (7a4 <main+0xe8>)
     6d8:	f000 fc5a 	bl	f90 <printk>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
     6dc:	f008 f8c6 	bl	886c <_impl_k_uptime_get>
     6e0:	4682      	mov	sl, r0
           version_get_build());
    u32_t time = k_uptime_get();
    u32_t end_time;

    int err;
    err = configure_board();
     6e2:	f7ff ffb7 	bl	654 <configure_board>
    if (err) {
     6e6:	4604      	mov	r4, r0
     6e8:	2800      	cmp	r0, #0
     6ea:	d157      	bne.n	79c <main+0xe0>
    }
    u16_t pulse = 0;
    u8_t end    = 0;
    int cnt     = 0;
    int onoff   = 1;
    leds_pwm_change_pulse(&pwm_device_1, pulse);
     6ec:	4601      	mov	r1, r0
     6ee:	482e      	ldr	r0, [pc, #184]	; (7a8 <main+0xec>)
    leds_pwm_change_pulse(&pwm_device_2, PERIOD - pulse);

    printk("Starting test\n");
    while (1) {
        leds_pwm_change_pulse(&pwm_device_1, pulse);
     6f0:	4f2d      	ldr	r7, [pc, #180]	; (7a8 <main+0xec>)
        leds_pwm_change_pulse(&pwm_device_2, PERIOD - pulse);
     6f2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 7ac <main+0xf0>
        if (cnt == onoff * 100) {
            if (onoff % 2) {
                leds_turn_on_led(&leds_device_3);
                leds_turn_on_led(&leds_device_4);
            } else {
                leds_turn_off_led(&leds_device_3);
     6f6:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 7c0 <main+0x104>
    leds_pwm_change_pulse(&pwm_device_1, pulse);
     6fa:	f7ff ff37 	bl	56c <leds_pwm_change_pulse>
    leds_pwm_change_pulse(&pwm_device_2, PERIOD - pulse);
     6fe:	f644 6120 	movw	r1, #20000	; 0x4e20
     702:	482a      	ldr	r0, [pc, #168]	; (7ac <main+0xf0>)
     704:	f7ff ff32 	bl	56c <leds_pwm_change_pulse>
    printk("Starting test\n");
     708:	4829      	ldr	r0, [pc, #164]	; (7b0 <main+0xf4>)
     70a:	f000 fc41 	bl	f90 <printk>
    int onoff   = 1;
     70e:	f04f 0b01 	mov.w	fp, #1
    u8_t end    = 0;
     712:	4626      	mov	r6, r4
    u16_t pulse = 0;
     714:	4625      	mov	r5, r4
        leds_pwm_change_pulse(&pwm_device_1, pulse);
     716:	4629      	mov	r1, r5
     718:	4638      	mov	r0, r7
     71a:	f7ff ff27 	bl	56c <leds_pwm_change_pulse>
        leds_pwm_change_pulse(&pwm_device_2, PERIOD - pulse);
     71e:	f644 6320 	movw	r3, #20000	; 0x4e20
     722:	1b59      	subs	r1, r3, r5
     724:	b289      	uxth	r1, r1
     726:	4640      	mov	r0, r8
     728:	9301      	str	r3, [sp, #4]
     72a:	f7ff ff1f 	bl	56c <leds_pwm_change_pulse>
        leds_pwm_set_pulse(&pwm_device_1);
     72e:	4638      	mov	r0, r7
     730:	f7ff ff2a 	bl	588 <leds_pwm_set_pulse>
        leds_pwm_set_pulse(&pwm_device_2);
     734:	4640      	mov	r0, r8
     736:	f7ff ff27 	bl	588 <leds_pwm_set_pulse>
        if (cnt > 20000) {
     73a:	9b01      	ldr	r3, [sp, #4]
     73c:	429c      	cmp	r4, r3
     73e:	dd0d      	ble.n	75c <main+0xa0>
            if (end) {
     740:	b306      	cbz	r6, 784 <main+0xc8>
     742:	f008 f893 	bl	886c <_impl_k_uptime_get>
            }
            onoff++;
        }
        cnt++;
    }
    printk("Duration: %d milisec\n", end_time - time);
     746:	eba0 010a 	sub.w	r1, r0, sl
     74a:	481a      	ldr	r0, [pc, #104]	; (7b4 <main+0xf8>)
     74c:	f000 fc20 	bl	f90 <printk>
    printk("Finishing test\n");
     750:	4819      	ldr	r0, [pc, #100]	; (7b8 <main+0xfc>)
}
     752:	b003      	add	sp, #12
     754:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printk("Finishing test\n");
     758:	f000 bc1a 	b.w	f90 <printk>
            pulse++;
     75c:	3501      	adds	r5, #1
     75e:	b2ad      	uxth	r5, r5
        if (cnt == onoff * 100) {
     760:	2364      	movs	r3, #100	; 0x64
     762:	fb03 f30b 	mul.w	r3, r3, fp
     766:	429c      	cmp	r4, r3
     768:	d10a      	bne.n	780 <main+0xc4>
            if (onoff % 2) {
     76a:	f01b 0f01 	tst.w	fp, #1
                leds_turn_on_led(&leds_device_3);
     76e:	4648      	mov	r0, r9
            if (onoff % 2) {
     770:	d00e      	beq.n	790 <main+0xd4>
                leds_turn_on_led(&leds_device_3);
     772:	f7ff ff4a 	bl	60a <leds_turn_on_led>
                leds_turn_on_led(&leds_device_4);
     776:	4811      	ldr	r0, [pc, #68]	; (7bc <main+0x100>)
     778:	f7ff ff47 	bl	60a <leds_turn_on_led>
            onoff++;
     77c:	f10b 0b01 	add.w	fp, fp, #1
        cnt++;
     780:	3401      	adds	r4, #1
        leds_pwm_change_pulse(&pwm_device_1, pulse);
     782:	e7c8      	b.n	716 <main+0x5a>
            cnt   = 0;
     784:	4634      	mov	r4, r6
            onoff = 1;
     786:	f04f 0b01 	mov.w	fp, #1
            end   = 1;
     78a:	465e      	mov	r6, fp
            pulse = 0;
     78c:	4625      	mov	r5, r4
     78e:	e7e7      	b.n	760 <main+0xa4>
                leds_turn_off_led(&leds_device_3);
     790:	f7ff ff4e 	bl	630 <leds_turn_off_led>
                leds_turn_off_led(&leds_device_4);
     794:	4809      	ldr	r0, [pc, #36]	; (7bc <main+0x100>)
     796:	f7ff ff4b 	bl	630 <leds_turn_off_led>
     79a:	e7ef      	b.n	77c <main+0xc0>
}
     79c:	b003      	add	sp, #12
     79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7a2:	bf00      	nop
     7a4:	00008d1d 	.word	0x00008d1d
     7a8:	20000018 	.word	0x20000018
     7ac:	20000024 	.word	0x20000024
     7b0:	00008d39 	.word	0x00008d39
     7b4:	00008d48 	.word	0x00008d48
     7b8:	00008d5e 	.word	0x00008d5e
     7bc:	2000000c 	.word	0x2000000c
     7c0:	20000000 	.word	0x20000000

000007c4 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     7c4:	b508      	push	{r3, lr}
     7c6:	4604      	mov	r4, r0
     7c8:	4608      	mov	r0, r1
     7ca:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     7cc:	461a      	mov	r2, r3
     7ce:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
     7d0:	f007 fd84 	bl	82dc <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
     7d4:	f001 faae 	bl	1d34 <_impl_k_thread_abort>

000007d8 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
     7d8:	b510      	push	{r4, lr}
     7da:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
     7dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     7e0:	4620      	mov	r0, r4
     7e2:	f007 fb09 	bl	7df8 <_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
     7e6:	4603      	mov	r3, r0
     7e8:	2800      	cmp	r0, #0
     7ea:	d0f7      	beq.n	7dc <z_work_q_main+0x4>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     7ec:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
     7ee:	6842      	ldr	r2, [r0, #4]
     7f0:	f3bf 8f5b 	dmb	ish
     7f4:	e853 1f00 	ldrex	r1, [r3]
     7f8:	f021 0e01 	bic.w	lr, r1, #1
     7fc:	e843 ec00 	strex	ip, lr, [r3]
     800:	f1bc 0f00 	cmp.w	ip, #0
     804:	d1f6      	bne.n	7f4 <z_work_q_main+0x1c>
     806:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
     80a:	07cb      	lsls	r3, r1, #31
     80c:	d500      	bpl.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
					      K_WORK_STATE_PENDING)) {
			handler(work);
     80e:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
     810:	f007 fd3a 	bl	8288 <_impl_k_yield>
     814:	e7e2      	b.n	7dc <z_work_q_main+0x4>

00000816 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     816:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
     818:	f990 400b 	ldrsb.w	r4, [r0, #11]
     81c:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
     81e:	428c      	cmp	r4, r1
     820:	f04f 040c 	mov.w	r4, #12
     824:	bfb6      	itet	lt
     826:	4361      	mullt	r1, r4
     828:	fb04 0101 	mlage	r1, r4, r1, r0
     82c:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
     82e:	2420      	movs	r4, #32
     830:	fb92 f4f4 	sdiv	r4, r2, r4
     834:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     838:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     83a:	f002 001f 	and.w	r0, r2, #31
     83e:	bd10      	pop	{r4, pc}

00000840 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     840:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     842:	ab01      	add	r3, sp, #4
     844:	f7ff ffe7 	bl	816 <get_bit_ptr>

	*word |= (1<<bit);
     848:	9a01      	ldr	r2, [sp, #4]
     84a:	2301      	movs	r3, #1
     84c:	fa03 f000 	lsl.w	r0, r3, r0
     850:	6813      	ldr	r3, [r2, #0]
     852:	4303      	orrs	r3, r0
     854:	6013      	str	r3, [r2, #0]
}
     856:	b003      	add	sp, #12
     858:	f85d fb04 	ldr.w	pc, [sp], #4

0000085c <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     85c:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     85e:	ab01      	add	r3, sp, #4
     860:	f7ff ffd9 	bl	816 <get_bit_ptr>

	*word &= ~(1<<bit);
     864:	9a01      	ldr	r2, [sp, #4]
     866:	2301      	movs	r3, #1
     868:	fa03 f000 	lsl.w	r0, r3, r0
     86c:	6813      	ldr	r3, [r2, #0]
     86e:	ea23 0300 	bic.w	r3, r3, r0
     872:	6013      	str	r3, [r2, #0]
}
     874:	b003      	add	sp, #12
     876:	f85d fb04 	ldr.w	pc, [sp], #4

0000087a <_sys_mem_pool_base_init>:
{
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     87a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     87e:	6843      	ldr	r3, [r0, #4]
     880:	8905      	ldrh	r5, [r0, #8]
{
     882:	4604      	mov	r4, r0
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
     884:	6800      	ldr	r0, [r0, #0]

	p->max_inline_level = -1;

	for (i = 0; i < p->n_levels; i++) {
     886:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     888:	435d      	muls	r5, r3
	p->max_inline_level = -1;
     88a:	22ff      	movs	r2, #255	; 0xff
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
     88c:	4428      	add	r0, r5
	p->max_inline_level = -1;
     88e:	72e2      	strb	r2, [r4, #11]
	for (i = 0; i < p->n_levels; i++) {
     890:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     892:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
     896:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
     89a:	42b9      	cmp	r1, r7
     89c:	db05      	blt.n	8aa <_sys_mem_pool_base_init+0x30>
     89e:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     8a0:	8923      	ldrh	r3, [r4, #8]
     8a2:	429d      	cmp	r5, r3
     8a4:	db23      	blt.n	8ee <_sys_mem_pool_base_init+0x74>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
     8aa:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     8ae:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     8b2:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
     8b6:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     8b8:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
     8bc:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     8c0:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
     8c4:	bfc8      	it	gt
     8c6:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     8c8:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
     8cc:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
     8d0:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
     8d4:	bfca      	itet	gt
     8d6:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
     8da:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     8dc:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
     8e0:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
     8e4:	bfc8      	it	gt
     8e6:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
     8ea:	3101      	adds	r1, #1
     8ec:	e7d5      	b.n	89a <_sys_mem_pool_base_init+0x20>
	return (u8_t *)p->buf + lsz * block;
     8ee:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     8f0:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
     8f2:	6820      	ldr	r0, [r4, #0]
     8f4:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
     8f6:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     8f8:	5086      	str	r6, [r0, r2]
	return (u8_t *)p->buf + lsz * block;
     8fa:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
     8fc:	689a      	ldr	r2, [r3, #8]
     8fe:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     900:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     902:	4620      	mov	r0, r4
     904:	6011      	str	r1, [r2, #0]
	list->tail = node;
     906:	6099      	str	r1, [r3, #8]
     908:	462a      	mov	r2, r5
     90a:	2100      	movs	r1, #0
     90c:	f7ff ff98 	bl	840 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     910:	3501      	adds	r5, #1
     912:	e7c5      	b.n	8a0 <_sys_mem_pool_base_init+0x26>

00000914 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     918:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l, alloc_l = -1, free_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[p->n_levels];
     91a:	7a86      	ldrb	r6, [r0, #10]
{
     91c:	af00      	add	r7, sp, #0
     91e:	4604      	mov	r4, r0
     920:	60bb      	str	r3, [r7, #8]
	size_t lsizes[p->n_levels];
     922:	00b3      	lsls	r3, r6, #2
     924:	330a      	adds	r3, #10
     926:	f023 0307 	bic.w	r3, r3, #7
     92a:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     92e:	6843      	ldr	r3, [r0, #4]
{
     930:	60fa      	str	r2, [r7, #12]
	lsizes[0] = _ALIGN4(p->max_sz);
     932:	3303      	adds	r3, #3
     934:	466a      	mov	r2, sp
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	f842 3904 	str.w	r3, [r2], #-4
	size_t lsizes[p->n_levels];
     93e:	46e9      	mov	r9, sp
	int i, from_l, alloc_l = -1, free_l = -1;
     940:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     944:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     946:	f04f 0e0c 	mov.w	lr, #12
     94a:	1e58      	subs	r0, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     94c:	42b3      	cmp	r3, r6
     94e:	6278      	str	r0, [r7, #36]	; 0x24
     950:	da09      	bge.n	966 <_sys_mem_pool_block_alloc+0x52>
		if (i > 0) {
     952:	b12b      	cbz	r3, 960 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     954:	6810      	ldr	r0, [r2, #0]
     956:	0880      	lsrs	r0, r0, #2
     958:	3003      	adds	r0, #3
     95a:	f020 0003 	bic.w	r0, r0, #3
     95e:	6050      	str	r0, [r2, #4]
		}

		if (lsizes[i] < size) {
     960:	6850      	ldr	r0, [r2, #4]
     962:	4288      	cmp	r0, r1
     964:	d20b      	bcs.n	97e <_sys_mem_pool_block_alloc+0x6a>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     968:	3301      	adds	r3, #1
     96a:	d114      	bne.n	996 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     96c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     96e:	2300      	movs	r3, #0
     970:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     972:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     976:	372c      	adds	r7, #44	; 0x2c
     978:	46bd      	mov	sp, r7
     97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     97e:	68e0      	ldr	r0, [r4, #12]
     980:	fb0e 0003 	mla	r0, lr, r3, r0
     984:	f100 0c04 	add.w	ip, r0, #4
		if (!level_empty(p, i)) {
     988:	6840      	ldr	r0, [r0, #4]
     98a:	3204      	adds	r2, #4
     98c:	4560      	cmp	r0, ip
     98e:	bf18      	it	ne
     990:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     992:	3301      	adds	r3, #1
     994:	e7d9      	b.n	94a <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     996:	1c6e      	adds	r6, r5, #1
     998:	d0e8      	beq.n	96c <_sys_mem_pool_block_alloc+0x58>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     99a:	7c23      	ldrb	r3, [r4, #16]
     99c:	f013 0301 	ands.w	r3, r3, #1
     9a0:	d005      	beq.n	9ae <_sys_mem_pool_block_alloc+0x9a>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     9a2:	f04f 0220 	mov.w	r2, #32
     9a6:	f3ef 8311 	mrs	r3, BASEPRI
     9aa:	f382 8811 	msr	BASEPRI, r2
	key = pool_irq_lock(p);
     9ae:	623b      	str	r3, [r7, #32]
     9b0:	230c      	movs	r3, #12
     9b2:	436b      	muls	r3, r5
     9b4:	1d1a      	adds	r2, r3, #4
     9b6:	68e3      	ldr	r3, [r4, #12]
     9b8:	4413      	add	r3, r2
	return list->head == list;
     9ba:	681e      	ldr	r6, [r3, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
     9bc:	42b3      	cmp	r3, r6
     9be:	d07d      	beq.n	abc <_sys_mem_pool_block_alloc+0x1a8>
	node->prev->next = node->next;
     9c0:	e896 000a 	ldmia.w	r6, {r1, r3}
     9c4:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     9c6:	6831      	ldr	r1, [r6, #0]
		data = block_alloc(p, i, lsizes[i]);
     9c8:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
     9cc:	604b      	str	r3, [r1, #4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     9ce:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     9d0:	4629      	mov	r1, r5
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     9d2:	1af3      	subs	r3, r6, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     9d4:	4620      	mov	r0, r4
     9d6:	fb93 f2f2 	sdiv	r2, r3, r2
     9da:	f7ff ff3f 	bl	85c <clear_free_bit>
     9de:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     9e2:	eb09 0a85 	add.w	sl, r9, r5, lsl #2
     9e6:	617b      	str	r3, [r7, #20]
			for (from_l = i; from_l < alloc_l; from_l++) {
     9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9ea:	429d      	cmp	r5, r3
     9ec:	db16      	blt.n	a1c <_sys_mem_pool_block_alloc+0x108>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     9ee:	7c23      	ldrb	r3, [r4, #16]
     9f0:	07d9      	lsls	r1, r3, #31
     9f2:	d502      	bpl.n	9fa <_sys_mem_pool_block_alloc+0xe6>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     9f4:	6a3b      	ldr	r3, [r7, #32]
     9f6:	f383 8811 	msr	BASEPRI, r3
	*level_p = alloc_l;
     9fa:	68fb      	ldr	r3, [r7, #12]
     9fc:	461a      	mov	r2, r3
     9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a00:	6013      	str	r3, [r2, #0]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     a02:	6823      	ldr	r3, [r4, #0]
     a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a06:	1af3      	subs	r3, r6, r3
     a08:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     a0c:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     a10:	68ba      	ldr	r2, [r7, #8]
     a12:	6013      	str	r3, [r2, #0]
	*data_p = data;
     a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     a16:	2000      	movs	r0, #0
	*data_p = data;
     a18:	601e      	str	r6, [r3, #0]
	return 0;
     a1a:	e7ac      	b.n	976 <_sys_mem_pool_block_alloc+0x62>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     a1c:	6823      	ldr	r3, [r4, #0]
	bn = block_num(p, block, lsizes[l]);
     a1e:	f85a 2b04 	ldr.w	r2, [sl], #4
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
     a22:	1af3      	subs	r3, r6, r3
     a24:	fb93 f3f2 	sdiv	r3, r3, r2
     a28:	697a      	ldr	r2, [r7, #20]
		int lbn = 4*bn + i;
     a2a:	009b      	lsls	r3, r3, #2
     a2c:	613b      	str	r3, [r7, #16]
     a2e:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     a32:	4413      	add	r3, r2
	for (i = 1; i < 4; i++) {
     a34:	f04f 0b01 	mov.w	fp, #1
     a38:	61bb      	str	r3, [r7, #24]
		set_free_bit(p, l + 1, lbn);
     a3a:	eb05 030b 	add.w	r3, r5, fp
     a3e:	607b      	str	r3, [r7, #4]
		int lsz = lsizes[l + 1];
     a40:	f8da 8000 	ldr.w	r8, [sl]
		set_free_bit(p, l + 1, lbn);
     a44:	6879      	ldr	r1, [r7, #4]
		void *block2 = (lsz * i) + (char *)block;
     a46:	fb0b f308 	mul.w	r3, fp, r8
     a4a:	61fb      	str	r3, [r7, #28]
     a4c:	18f3      	adds	r3, r6, r3
     a4e:	603b      	str	r3, [r7, #0]
		set_free_bit(p, l + 1, lbn);
     a50:	693b      	ldr	r3, [r7, #16]
     a52:	4620      	mov	r0, r4
     a54:	eb0b 0203 	add.w	r2, fp, r3
     a58:	f7ff fef2 	bl	840 <set_free_bit>
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
     a5c:	683b      	ldr	r3, [r7, #0]
     a5e:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     a60:	8921      	ldrh	r1, [r4, #8]
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
     a62:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     a66:	4498      	add	r8, r3
     a68:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     a6c:	6862      	ldr	r2, [r4, #4]
     a6e:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     a70:	4590      	cmp	r8, r2
     a72:	d20a      	bcs.n	a8a <_sys_mem_pool_block_alloc+0x176>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     a74:	68e2      	ldr	r2, [r4, #12]
     a76:	69b9      	ldr	r1, [r7, #24]
	node->next = list;
     a78:	69f8      	ldr	r0, [r7, #28]
     a7a:	440a      	add	r2, r1
     a7c:	1d11      	adds	r1, r2, #4
     a7e:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     a80:	6891      	ldr	r1, [r2, #8]
     a82:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     a84:	6891      	ldr	r1, [r2, #8]
     a86:	600b      	str	r3, [r1, #0]
	list->tail = node;
     a88:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     a8a:	f10b 0b01 	add.w	fp, fp, #1
     a8e:	f1bb 0f04 	cmp.w	fp, #4
     a92:	d1d5      	bne.n	a40 <_sys_mem_pool_block_alloc+0x12c>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     a94:	7c23      	ldrb	r3, [r4, #16]
     a96:	07d8      	lsls	r0, r3, #31
     a98:	f105 0501 	add.w	r5, r5, #1
     a9c:	d502      	bpl.n	aa4 <_sys_mem_pool_block_alloc+0x190>
     a9e:	6a3b      	ldr	r3, [r7, #32]
     aa0:	f383 8811 	msr	BASEPRI, r3
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     aa4:	7c23      	ldrb	r3, [r4, #16]
     aa6:	f013 0301 	ands.w	r3, r3, #1
     aaa:	d005      	beq.n	ab8 <_sys_mem_pool_block_alloc+0x1a4>
	__asm__ volatile(
     aac:	f04f 0220 	mov.w	r2, #32
     ab0:	f3ef 8311 	mrs	r3, BASEPRI
     ab4:	f382 8811 	msr	BASEPRI, r2
				key = pool_irq_lock(p);
     ab8:	623b      	str	r3, [r7, #32]
     aba:	e795      	b.n	9e8 <_sys_mem_pool_block_alloc+0xd4>
	for (i = free_l; i >= 0; i--) {
     abc:	3d01      	subs	r5, #1
     abe:	1c6a      	adds	r2, r5, #1
     ac0:	f1a3 030c 	sub.w	r3, r3, #12
     ac4:	f47f af79 	bne.w	9ba <_sys_mem_pool_block_alloc+0xa6>
     ac8:	2600      	movs	r6, #0
     aca:	e790      	b.n	9ee <_sys_mem_pool_block_alloc+0xda>

00000acc <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ad0:	b087      	sub	sp, #28
	size_t lsizes[p->n_levels];
     ad2:	7a83      	ldrb	r3, [r0, #10]
     ad4:	009b      	lsls	r3, r3, #2
     ad6:	330a      	adds	r3, #10
     ad8:	f023 0307 	bic.w	r3, r3, #7
{
     adc:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     ade:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     ae2:	6843      	ldr	r3, [r0, #4]
     ae4:	3303      	adds	r3, #3
     ae6:	f023 0303 	bic.w	r3, r3, #3
{
     aea:	4604      	mov	r4, r0
	size_t lsizes[p->n_levels];
     aec:	46e8      	mov	r8, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     aee:	9300      	str	r3, [sp, #0]
     af0:	466d      	mov	r5, sp
	for (i = 1; i <= level; i++) {
     af2:	2001      	movs	r0, #1
     af4:	4281      	cmp	r1, r0
     af6:	f080 8083 	bcs.w	c00 <_sys_mem_pool_block_free+0x134>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     afa:	7c23      	ldrb	r3, [r4, #16]
     afc:	f013 0301 	ands.w	r3, r3, #1
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     b00:	460e      	mov	r6, r1
     b02:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     b04:	d005      	beq.n	b12 <_sys_mem_pool_block_free+0x46>
     b06:	f04f 0220 	mov.w	r2, #32
     b0a:	f3ef 8311 	mrs	r3, BASEPRI
     b0e:	f382 8811 	msr	BASEPRI, r2
	unsigned int key = pool_irq_lock(p);
     b12:	60bb      	str	r3, [r7, #8]
     b14:	230c      	movs	r3, #12
     b16:	fb03 f901 	mul.w	r9, r3, r1
	int i, lsz = lsizes[level];
     b1a:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
     b1e:	60fb      	str	r3, [r7, #12]
	return (u8_t *)p->buf + lsz * block;
     b20:	fb03 fb05 	mul.w	fp, r3, r5
     b24:	6823      	ldr	r3, [r4, #0]
     b26:	607b      	str	r3, [r7, #4]
	set_free_bit(p, level, bn);
     b28:	462a      	mov	r2, r5
     b2a:	4631      	mov	r1, r6
     b2c:	4620      	mov	r0, r4
	return (u8_t *)p->buf + lsz * block;
     b2e:	eb03 0a0b 	add.w	sl, r3, fp
	set_free_bit(p, level, bn);
     b32:	f7ff fe85 	bl	840 <set_free_bit>
	sys_dlist_append(&p->levels[level].free_list, block);
     b36:	68e2      	ldr	r2, [r4, #12]
	node->next = list;
     b38:	687b      	ldr	r3, [r7, #4]
     b3a:	444a      	add	r2, r9
     b3c:	1d11      	adds	r1, r2, #4
     b3e:	f843 100b 	str.w	r1, [r3, fp]
	node->prev = list->tail;
     b42:	6893      	ldr	r3, [r2, #8]
     b44:	f8ca 3004 	str.w	r3, [sl, #4]
	list->tail->next = node;
     b48:	6893      	ldr	r3, [r2, #8]
     b4a:	f8c3 a000 	str.w	sl, [r3]
	list->tail = node;
     b4e:	f8c2 a008 	str.w	sl, [r2, #8]
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     b52:	7c23      	ldrb	r3, [r4, #16]
     b54:	07da      	lsls	r2, r3, #31
     b56:	d502      	bpl.n	b5e <_sys_mem_pool_block_free+0x92>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     b58:	68bb      	ldr	r3, [r7, #8]
     b5a:	f383 8811 	msr	BASEPRI, r3
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     b5e:	f894 a010 	ldrb.w	sl, [r4, #16]
     b62:	f01a 0a01 	ands.w	sl, sl, #1
     b66:	d005      	beq.n	b74 <_sys_mem_pool_block_free+0xa8>
	__asm__ volatile(
     b68:	f04f 0320 	mov.w	r3, #32
     b6c:	f3ef 8a11 	mrs	sl, BASEPRI
     b70:	f383 8811 	msr	BASEPRI, r3
	key = pool_irq_lock(p);
     b74:	f8c7 a008 	str.w	sl, [r7, #8]
	if (level == 0 || partner_bits(p, level, bn) != 0xf) {
     b78:	2e00      	cmp	r6, #0
     b7a:	d04a      	beq.n	c12 <_sys_mem_pool_block_free+0x146>
	int bit = get_bit_ptr(p, level, bn, &word);
     b7c:	f107 0314 	add.w	r3, r7, #20
     b80:	462a      	mov	r2, r5
     b82:	4631      	mov	r1, r6
     b84:	4620      	mov	r0, r4
     b86:	f7ff fe46 	bl	816 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     b8a:	697a      	ldr	r2, [r7, #20]
     b8c:	2304      	movs	r3, #4
     b8e:	fb90 f0f3 	sdiv	r0, r0, r3
     b92:	0083      	lsls	r3, r0, #2
     b94:	6810      	ldr	r0, [r2, #0]
     b96:	40d8      	lsrs	r0, r3
     b98:	f000 000f 	and.w	r0, r0, #15
	if (level == 0 || partner_bits(p, level, bn) != 0xf) {
     b9c:	280f      	cmp	r0, #15
     b9e:	d138      	bne.n	c12 <_sys_mem_pool_block_free+0x146>
		int b = (bn & ~3) + i;
     ba0:	f025 0303 	bic.w	r3, r5, #3
     ba4:	607b      	str	r3, [r7, #4]
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
     ba6:	68fb      	ldr	r3, [r7, #12]
	if (level == 0 || partner_bits(p, level, bn) != 0xf) {
     ba8:	f04f 0a00 	mov.w	sl, #0
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
     bac:	3b01      	subs	r3, #1
		int b = (bn & ~3) + i;
     bae:	687a      	ldr	r2, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
     bb0:	68f9      	ldr	r1, [r7, #12]
	return p->n_max * p->max_sz;
     bb2:	f8b4 e008 	ldrh.w	lr, [r4, #8]
		int b = (bn & ~3) + i;
     bb6:	4452      	add	r2, sl
	return (u8_t *)p->buf + lsz * block;
     bb8:	fb01 fb02 	mul.w	fp, r1, r2
	return p->n_max * p->max_sz;
     bbc:	6861      	ldr	r1, [r4, #4]
		if (block_fits(p, block_ptr(p, lsz, b), lsz)) {
     bbe:	eb03 000b 	add.w	r0, r3, fp
	return p->n_max * p->max_sz;
     bc2:	fb01 f10e 	mul.w	r1, r1, lr
		if (block_fits(p, block_ptr(p, lsz, b), lsz)) {
     bc6:	4288      	cmp	r0, r1
     bc8:	d20f      	bcs.n	bea <_sys_mem_pool_block_free+0x11e>
			clear_free_bit(p, level, b);
     bca:	4631      	mov	r1, r6
     bcc:	4620      	mov	r0, r4
     bce:	603b      	str	r3, [r7, #0]
     bd0:	f7ff fe44 	bl	85c <clear_free_bit>
	return (u8_t *)p->buf + lsz * block;
     bd4:	6822      	ldr	r2, [r4, #0]
	node->next->prev = node->prev;
     bd6:	683b      	ldr	r3, [r7, #0]
	node->prev->next = node->next;
     bd8:	f852 000b 	ldr.w	r0, [r2, fp]
     bdc:	eb02 010b 	add.w	r1, r2, fp
     be0:	6849      	ldr	r1, [r1, #4]
     be2:	6008      	str	r0, [r1, #0]
	node->next->prev = node->prev;
     be4:	f852 200b 	ldr.w	r2, [r2, fp]
     be8:	6051      	str	r1, [r2, #4]
	for (i = 0; i < 4; i++) {
     bea:	f10a 0a01 	add.w	sl, sl, #1
     bee:	f1ba 0f04 	cmp.w	sl, #4
     bf2:	d1dc      	bne.n	bae <_sys_mem_pool_block_free+0xe2>
	return bfree_recombine(p, level - 1, lsizes, bn / 4, key);
     bf4:	fb95 f5fa 	sdiv	r5, r5, sl
     bf8:	3e01      	subs	r6, #1
     bfa:	f1a9 090c 	sub.w	r9, r9, #12
     bfe:	e78c      	b.n	b1a <_sys_mem_pool_block_free+0x4e>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     c00:	682b      	ldr	r3, [r5, #0]
     c02:	089b      	lsrs	r3, r3, #2
     c04:	3303      	adds	r3, #3
     c06:	f023 0303 	bic.w	r3, r3, #3
     c0a:	f845 3f04 	str.w	r3, [r5, #4]!
	for (i = 1; i <= level; i++) {
     c0e:	3001      	adds	r0, #1
     c10:	e770      	b.n	af4 <_sys_mem_pool_block_free+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     c12:	7c23      	ldrb	r3, [r4, #16]
     c14:	07db      	lsls	r3, r3, #31
     c16:	d501      	bpl.n	c1c <_sys_mem_pool_block_free+0x150>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     c18:	f38a 8811 	msr	BASEPRI, sl
}
     c1c:	371c      	adds	r7, #28
     c1e:	46bd      	mov	sp, r7
     c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c24 <z_arch_printk_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     c24:	2000      	movs	r0, #0
     c26:	4770      	bx	lr

00000c28 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c28:	680b      	ldr	r3, [r1, #0]
     c2a:	3301      	adds	r3, #1
     c2c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c2e:	4b01      	ldr	r3, [pc, #4]	; (c34 <char_out+0xc>)
     c30:	681b      	ldr	r3, [r3, #0]
     c32:	4718      	bx	r3
     c34:	20002810 	.word	0x20002810

00000c38 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c3c:	b085      	sub	sp, #20
     c3e:	469b      	mov	fp, r3
     c40:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     c42:	f8df a090 	ldr.w	sl, [pc, #144]	; cd4 <_printk_dec_ulong+0x9c>
     c46:	2c01      	cmp	r4, #1
     c48:	bfb8      	it	lt
     c4a:	2401      	movlt	r4, #1
     c4c:	2b01      	cmp	r3, #1
     c4e:	bf0c      	ite	eq
     c50:	2330      	moveq	r3, #48	; 0x30
     c52:	2320      	movne	r3, #32
     c54:	4615      	mov	r5, r2
     c56:	4680      	mov	r8, r0
     c58:	4689      	mov	r9, r1
     c5a:	9401      	str	r4, [sp, #4]
     c5c:	9302      	str	r3, [sp, #8]
     c5e:	2601      	movs	r6, #1
     c60:	270a      	movs	r7, #10
     c62:	2200      	movs	r2, #0
     c64:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     c68:	b90a      	cbnz	r2, c6e <_printk_dec_ulong+0x36>
     c6a:	45aa      	cmp	sl, r5
     c6c:	d21f      	bcs.n	cae <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     c6e:	fbb5 f0f4 	udiv	r0, r5, r4
     c72:	4649      	mov	r1, r9
     c74:	3030      	adds	r0, #48	; 0x30
     c76:	47c0      	blx	r8
			digits++;
     c78:	3601      	adds	r6, #1
			found_largest_digit = 1;
     c7a:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     c7c:	3f01      	subs	r7, #1
	while (pos >= 9) {
     c7e:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     c80:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     c84:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     c88:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     c8c:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     c90:	d1e8      	bne.n	c64 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     c92:	4649      	mov	r1, r9
     c94:	f105 0030 	add.w	r0, r5, #48	; 0x30
     c98:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     c9a:	f1bb 0f03 	cmp.w	fp, #3
     c9e:	d103      	bne.n	ca8 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     ca0:	9b01      	ldr	r3, [sp, #4]
     ca2:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     ca4:	2c00      	cmp	r4, #0
     ca6:	dc0f      	bgt.n	cc8 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     ca8:	b005      	add	sp, #20
     caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     cae:	9b01      	ldr	r3, [sp, #4]
     cb0:	42bb      	cmp	r3, r7
     cb2:	dbe3      	blt.n	c7c <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     cb4:	f1bb 0f02 	cmp.w	fp, #2
     cb8:	d8e0      	bhi.n	c7c <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cba:	4649      	mov	r1, r9
     cbc:	9802      	ldr	r0, [sp, #8]
     cbe:	9203      	str	r2, [sp, #12]
			digits++;
     cc0:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cc2:	47c0      	blx	r8
			digits++;
     cc4:	9a03      	ldr	r2, [sp, #12]
     cc6:	e7d9      	b.n	c7c <_printk_dec_ulong+0x44>
			out(' ', ctx);
     cc8:	4649      	mov	r1, r9
     cca:	2020      	movs	r0, #32
     ccc:	47c0      	blx	r8
     cce:	3c01      	subs	r4, #1
     cd0:	e7e8      	b.n	ca4 <_printk_dec_ulong+0x6c>
     cd2:	bf00      	nop
     cd4:	3b9ac9ff 	.word	0x3b9ac9ff

00000cd8 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     cd8:	680a      	ldr	r2, [r1, #0]
     cda:	688b      	ldr	r3, [r1, #8]
{
     cdc:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     cde:	b112      	cbz	r2, ce6 <str_out+0xe>
     ce0:	684c      	ldr	r4, [r1, #4]
     ce2:	42a3      	cmp	r3, r4
     ce4:	db02      	blt.n	cec <str_out+0x14>
		ctx->count++;
     ce6:	3301      	adds	r3, #1
     ce8:	608b      	str	r3, [r1, #8]
		return c;
     cea:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
     cec:	1e65      	subs	r5, r4, #1
     cee:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     cf0:	bf0b      	itete	eq
     cf2:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     cf4:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
     cf6:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
     cf8:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
     cfa:	bf0c      	ite	eq
     cfc:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
     cfe:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     d00:	bd30      	pop	{r4, r5, pc}
	...

00000d04 <__printk_hook_install>:
	_char_out = fn;
     d04:	4b01      	ldr	r3, [pc, #4]	; (d0c <__printk_hook_install+0x8>)
     d06:	6018      	str	r0, [r3, #0]
     d08:	4770      	bx	lr
     d0a:	bf00      	nop
     d0c:	20002810 	.word	0x20002810

00000d10 <_vprintk>:
{
     d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d14:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
     d16:	f04f 0a00 	mov.w	sl, #0
{
     d1a:	4606      	mov	r6, r0
     d1c:	460f      	mov	r7, r1
     d1e:	9204      	str	r2, [sp, #16]
     d20:	461c      	mov	r4, r3
	int min_width = -1;
     d22:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     d26:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
     d28:	4655      	mov	r5, sl
	while (*fmt) {
     d2a:	9b04      	ldr	r3, [sp, #16]
     d2c:	7818      	ldrb	r0, [r3, #0]
     d2e:	b910      	cbnz	r0, d36 <_vprintk+0x26>
}
     d30:	b009      	add	sp, #36	; 0x24
     d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
     d36:	b945      	cbnz	r5, d4a <_vprintk+0x3a>
			if (*fmt != '%') {
     d38:	2825      	cmp	r0, #37	; 0x25
     d3a:	f000 810c 	beq.w	f56 <_vprintk+0x246>
				out((int)*fmt, ctx);
     d3e:	4639      	mov	r1, r7
     d40:	47b0      	blx	r6
		++fmt;
     d42:	9b04      	ldr	r3, [sp, #16]
     d44:	3301      	adds	r3, #1
     d46:	9304      	str	r3, [sp, #16]
     d48:	e7ef      	b.n	d2a <_vprintk+0x1a>
			switch (*fmt) {
     d4a:	2864      	cmp	r0, #100	; 0x64
     d4c:	d061      	beq.n	e12 <_vprintk+0x102>
     d4e:	d819      	bhi.n	d84 <_vprintk+0x74>
     d50:	2839      	cmp	r0, #57	; 0x39
     d52:	d80a      	bhi.n	d6a <_vprintk+0x5a>
     d54:	2831      	cmp	r0, #49	; 0x31
     d56:	d250      	bcs.n	dfa <_vprintk+0xea>
     d58:	282d      	cmp	r0, #45	; 0x2d
     d5a:	d03c      	beq.n	dd6 <_vprintk+0xc6>
     d5c:	2830      	cmp	r0, #48	; 0x30
     d5e:	d03d      	beq.n	ddc <_vprintk+0xcc>
     d60:	2825      	cmp	r0, #37	; 0x25
     d62:	d108      	bne.n	d76 <_vprintk+0x66>
				out((int)'%', ctx);
     d64:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     d66:	47b0      	blx	r6
     d68:	e06f      	b.n	e4a <_vprintk+0x13a>
			switch (*fmt) {
     d6a:	2858      	cmp	r0, #88	; 0x58
     d6c:	f000 8089 	beq.w	e82 <_vprintk+0x172>
     d70:	2863      	cmp	r0, #99	; 0x63
     d72:	f000 80ea 	beq.w	f4a <_vprintk+0x23a>
				out((int)'%', ctx);
     d76:	4639      	mov	r1, r7
     d78:	2025      	movs	r0, #37	; 0x25
     d7a:	47b0      	blx	r6
				out((int)*fmt, ctx);
     d7c:	9b04      	ldr	r3, [sp, #16]
     d7e:	4639      	mov	r1, r7
     d80:	7818      	ldrb	r0, [r3, #0]
     d82:	e7f0      	b.n	d66 <_vprintk+0x56>
			switch (*fmt) {
     d84:	2870      	cmp	r0, #112	; 0x70
     d86:	d072      	beq.n	e6e <_vprintk+0x15e>
     d88:	d806      	bhi.n	d98 <_vprintk+0x88>
     d8a:	2869      	cmp	r0, #105	; 0x69
     d8c:	d041      	beq.n	e12 <_vprintk+0x102>
     d8e:	286c      	cmp	r0, #108	; 0x6c
     d90:	d03c      	beq.n	e0c <_vprintk+0xfc>
     d92:	2868      	cmp	r0, #104	; 0x68
     d94:	d0d5      	beq.n	d42 <_vprintk+0x32>
     d96:	e7ee      	b.n	d76 <_vprintk+0x66>
     d98:	2875      	cmp	r0, #117	; 0x75
     d9a:	d058      	beq.n	e4e <_vprintk+0x13e>
     d9c:	d817      	bhi.n	dce <_vprintk+0xbe>
     d9e:	2873      	cmp	r0, #115	; 0x73
     da0:	d1e9      	bne.n	d76 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
     da2:	6823      	ldr	r3, [r4, #0]
     da4:	f104 0b04 	add.w	fp, r4, #4
     da8:	461c      	mov	r4, r3
				while (*s)
     daa:	4625      	mov	r5, r4
     dac:	f815 0b01 	ldrb.w	r0, [r5], #1
     db0:	2800      	cmp	r0, #0
     db2:	f040 80bf 	bne.w	f34 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     db6:	f1b8 0f03 	cmp.w	r8, #3
     dba:	f040 80d5 	bne.w	f68 <_vprintk+0x258>
					int remaining = min_width - (s - start);
     dbe:	1ae4      	subs	r4, r4, r3
     dc0:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     dc4:	2c00      	cmp	r4, #0
     dc6:	f300 80bb 	bgt.w	f40 <_vprintk+0x230>
				char *s = va_arg(ap, char *);
     dca:	465c      	mov	r4, fp
     dcc:	e03d      	b.n	e4a <_vprintk+0x13a>
			switch (*fmt) {
     dce:	2878      	cmp	r0, #120	; 0x78
     dd0:	d057      	beq.n	e82 <_vprintk+0x172>
     dd2:	287a      	cmp	r0, #122	; 0x7a
     dd4:	e7de      	b.n	d94 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
     dd6:	f04f 0803 	mov.w	r8, #3
     dda:	e7b2      	b.n	d42 <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
     ddc:	f1b9 0f00 	cmp.w	r9, #0
     de0:	da0e      	bge.n	e00 <_vprintk+0xf0>
     de2:	f1b8 0f00 	cmp.w	r8, #0
     de6:	f000 80bc 	beq.w	f62 <_vprintk+0x252>
					min_width = *fmt - '0';
     dea:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     dee:	f1b8 0f00 	cmp.w	r8, #0
     df2:	bf08      	it	eq
     df4:	f04f 0802 	moveq.w	r8, #2
     df8:	e7a3      	b.n	d42 <_vprintk+0x32>
				if (min_width < 0) {
     dfa:	f1b9 0f00 	cmp.w	r9, #0
     dfe:	dbf4      	blt.n	dea <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
     e00:	230a      	movs	r3, #10
     e02:	fb03 0909 	mla	r9, r3, r9, r0
     e06:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     e0a:	e7f0      	b.n	dee <_vprintk+0xde>
				long_ctr++;
     e0c:	f10a 0a01 	add.w	sl, sl, #1
     e10:	e797      	b.n	d42 <_vprintk+0x32>
				if (long_ctr < 2) {
     e12:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     e16:	bfc5      	ittet	gt
     e18:	3407      	addgt	r4, #7
     e1a:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     e1e:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     e20:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     e22:	bfd4      	ite	le
     e24:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     e26:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     e2a:	2d00      	cmp	r5, #0
     e2c:	da05      	bge.n	e3a <_vprintk+0x12a>
					out((int)'-', ctx);
     e2e:	4639      	mov	r1, r7
     e30:	202d      	movs	r0, #45	; 0x2d
     e32:	47b0      	blx	r6
					d = -d;
     e34:	426d      	negs	r5, r5
					min_width--;
     e36:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     e3a:	f8cd 9000 	str.w	r9, [sp]
     e3e:	4643      	mov	r3, r8
     e40:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
     e42:	4639      	mov	r1, r7
     e44:	4630      	mov	r0, r6
     e46:	f7ff fef7 	bl	c38 <_printk_dec_ulong>
			might_format = 0;
     e4a:	2500      	movs	r5, #0
				break;
     e4c:	e779      	b.n	d42 <_vprintk+0x32>
				if (long_ctr < 2) {
     e4e:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     e52:	bfc5      	ittet	gt
     e54:	3407      	addgt	r4, #7
     e56:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     e5a:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     e5c:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     e5e:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     e62:	bfcc      	ite	gt
     e64:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     e68:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     e6a:	4643      	mov	r3, r8
     e6c:	e7e9      	b.n	e42 <_vprintk+0x132>
				  out('0', ctx);
     e6e:	4639      	mov	r1, r7
     e70:	2030      	movs	r0, #48	; 0x30
     e72:	47b0      	blx	r6
				  out('x', ctx);
     e74:	4639      	mov	r1, r7
     e76:	2078      	movs	r0, #120	; 0x78
     e78:	47b0      	blx	r6
				  min_width = 8;
     e7a:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     e7e:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     e82:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     e86:	bfc7      	ittee	gt
     e88:	3407      	addgt	r4, #7
     e8a:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     e8e:	6823      	ldrle	r3, [r4, #0]
     e90:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     e92:	bfc2      	ittt	gt
     e94:	f103 0408 	addgt.w	r4, r3, #8
     e98:	681b      	ldrgt	r3, [r3, #0]
     e9a:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     e9c:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     ea0:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     ea4:	bfd8      	it	le
     ea6:	3404      	addle	r4, #4
	int digits = 0;
     ea8:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     eaa:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     eac:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     eae:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     eb2:	9b05      	ldr	r3, [sp, #20]
     eb4:	ea4f 008b 	mov.w	r0, fp, lsl #2
     eb8:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     ebc:	f010 000f 	ands.w	r0, r0, #15
     ec0:	d109      	bne.n	ed6 <_vprintk+0x1c6>
     ec2:	9b07      	ldr	r3, [sp, #28]
     ec4:	b913      	cbnz	r3, ecc <_vprintk+0x1bc>
     ec6:	f1bb 0f00 	cmp.w	fp, #0
     eca:	d122      	bne.n	f12 <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
     ecc:	f04f 0e30 	mov.w	lr, #48	; 0x30
     ed0:	e007      	b.n	ee2 <_vprintk+0x1d2>
	for (; size; size--) {
     ed2:	9a06      	ldr	r2, [sp, #24]
     ed4:	e7eb      	b.n	eae <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     ed6:	2809      	cmp	r0, #9
     ed8:	bf8c      	ite	hi
     eda:	f04f 0e57 	movhi.w	lr, #87	; 0x57
     ede:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
     ee2:	4639      	mov	r1, r7
     ee4:	4470      	add	r0, lr
     ee6:	9206      	str	r2, [sp, #24]
     ee8:	47b0      	blx	r6
			digits++;
     eea:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     eec:	9507      	str	r5, [sp, #28]
			digits++;
     eee:	3301      	adds	r3, #1
     ef0:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     ef2:	f1bb 0f00 	cmp.w	fp, #0
     ef6:	d1ec      	bne.n	ed2 <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     ef8:	f1b8 0f03 	cmp.w	r8, #3
     efc:	d1a5      	bne.n	e4a <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
     efe:	9b03      	ldr	r3, [sp, #12]
     f00:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     f04:	2d00      	cmp	r5, #0
     f06:	dda0      	ble.n	e4a <_vprintk+0x13a>
			out(' ', ctx);
     f08:	4639      	mov	r1, r7
     f0a:	2020      	movs	r0, #32
     f0c:	47b0      	blx	r6
     f0e:	3d01      	subs	r5, #1
     f10:	e7f8      	b.n	f04 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
     f12:	1e53      	subs	r3, r2, #1
     f14:	4591      	cmp	r9, r2
     f16:	9306      	str	r3, [sp, #24]
     f18:	dbeb      	blt.n	ef2 <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     f1a:	f1b8 0f01 	cmp.w	r8, #1
     f1e:	d103      	bne.n	f28 <_vprintk+0x218>
				out('0', ctx);
     f20:	4639      	mov	r1, r7
     f22:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     f24:	47b0      	blx	r6
     f26:	e7e4      	b.n	ef2 <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     f28:	f1b8 0f02 	cmp.w	r8, #2
     f2c:	d1e1      	bne.n	ef2 <_vprintk+0x1e2>
				out(' ', ctx);
     f2e:	4639      	mov	r1, r7
     f30:	2020      	movs	r0, #32
     f32:	e7f7      	b.n	f24 <_vprintk+0x214>
					out((int)(*s++), ctx);
     f34:	4639      	mov	r1, r7
     f36:	9303      	str	r3, [sp, #12]
     f38:	462c      	mov	r4, r5
     f3a:	47b0      	blx	r6
     f3c:	9b03      	ldr	r3, [sp, #12]
     f3e:	e734      	b.n	daa <_vprintk+0x9a>
						out(' ', ctx);
     f40:	4639      	mov	r1, r7
     f42:	2020      	movs	r0, #32
     f44:	47b0      	blx	r6
     f46:	3c01      	subs	r4, #1
     f48:	e73c      	b.n	dc4 <_vprintk+0xb4>
				out(c, ctx);
     f4a:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     f4c:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     f4e:	4639      	mov	r1, r7
     f50:	47b0      	blx	r6
				int c = va_arg(ap, int);
     f52:	462c      	mov	r4, r5
     f54:	e779      	b.n	e4a <_vprintk+0x13a>
				long_ctr = 0;
     f56:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     f58:	46a8      	mov	r8, r5
				min_width = -1;
     f5a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     f5e:	2501      	movs	r5, #1
     f60:	e6ef      	b.n	d42 <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
     f62:	f04f 0801 	mov.w	r8, #1
     f66:	e6ec      	b.n	d42 <_vprintk+0x32>
				char *s = va_arg(ap, char *);
     f68:	465c      	mov	r4, fp
			might_format = 0;
     f6a:	4605      	mov	r5, r0
     f6c:	e6e9      	b.n	d42 <_vprintk+0x32>
	...

00000f70 <vprintk>:
{
     f70:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     f72:	ac02      	add	r4, sp, #8
     f74:	2300      	movs	r3, #0
     f76:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     f7a:	4602      	mov	r2, r0
     f7c:	460b      	mov	r3, r1
     f7e:	4803      	ldr	r0, [pc, #12]	; (f8c <vprintk+0x1c>)
     f80:	4621      	mov	r1, r4
     f82:	f7ff fec5 	bl	d10 <_vprintk>
}
     f86:	b002      	add	sp, #8
     f88:	bd10      	pop	{r4, pc}
     f8a:	bf00      	nop
     f8c:	00000c29 	.word	0x00000c29

00000f90 <printk>:
{
     f90:	b40f      	push	{r0, r1, r2, r3}
     f92:	b507      	push	{r0, r1, r2, lr}
     f94:	a904      	add	r1, sp, #16
     f96:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     f9a:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
     f9c:	f7ff ffe8 	bl	f70 <vprintk>
}
     fa0:	b003      	add	sp, #12
     fa2:	f85d eb04 	ldr.w	lr, [sp], #4
     fa6:	b004      	add	sp, #16
     fa8:	4770      	bx	lr
	...

00000fac <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     fac:	b40c      	push	{r2, r3}
     fae:	b530      	push	{r4, r5, lr}
     fb0:	b085      	sub	sp, #20
     fb2:	ab08      	add	r3, sp, #32
     fb4:	4604      	mov	r4, r0
     fb6:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
     fba:	9001      	str	r0, [sp, #4]
     fbc:	9102      	str	r1, [sp, #8]
     fbe:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fc0:	a901      	add	r1, sp, #4
     fc2:	4807      	ldr	r0, [pc, #28]	; (fe0 <snprintk+0x34>)
	va_start(ap, fmt);
     fc4:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
     fc6:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fc8:	f7ff fea2 	bl	d10 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     fcc:	9803      	ldr	r0, [sp, #12]
     fce:	9b02      	ldr	r3, [sp, #8]
     fd0:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     fd2:	bfb8      	it	lt
     fd4:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     fd6:	b005      	add	sp, #20
     fd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     fdc:	b002      	add	sp, #8
     fde:	4770      	bx	lr
     fe0:	00000cd9 	.word	0x00000cd9

00000fe4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_COMPILER_OPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_KERNEL_BIN_NAME, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
     fe4:	4770      	bx	lr
	...

00000fe8 <nordicsemi_nrf52_init>:
#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
#include <logging/log.h>
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf52_init(struct device *arg)
{
     fe8:	b510      	push	{r4, lr}
	__asm__ volatile(
     fea:	f04f 0320 	mov.w	r3, #32
     fee:	f3ef 8411 	mrs	r4, BASEPRI
     ff2:	f383 8811 	msr	BASEPRI, r3

	ARG_UNUSED(arg);

	key = irq_lock();

	SystemInit();
     ff6:	f000 f84f 	bl	1098 <SystemInit>

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     ffa:	4a08      	ldr	r2, [pc, #32]	; (101c <nordicsemi_nrf52_init+0x34>)
     ffc:	2301      	movs	r3, #1
     ffe:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
    1002:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1006:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    100a:	4b05      	ldr	r3, [pc, #20]	; (1020 <nordicsemi_nrf52_init+0x38>)
    100c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1010:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    1012:	62da      	str	r2, [r3, #44]	; 0x2c
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1014:	f384 8811 	msr	BASEPRI, r4
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1018:	2000      	movs	r0, #0
    101a:	bd10      	pop	{r4, pc}
    101c:	4001e000 	.word	0x4001e000
    1020:	e000ed00 	.word	0xe000ed00

00001024 <errata_16>:
    return false;
}

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    1024:	4b09      	ldr	r3, [pc, #36]	; (104c <errata_16+0x28>)
    1026:	781b      	ldrb	r3, [r3, #0]
    1028:	2b06      	cmp	r3, #6
    102a:	d10c      	bne.n	1046 <errata_16+0x22>
    102c:	4b08      	ldr	r3, [pc, #32]	; (1050 <errata_16+0x2c>)
    102e:	681b      	ldr	r3, [r3, #0]
    1030:	071a      	lsls	r2, r3, #28
    1032:	d108      	bne.n	1046 <errata_16+0x22>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    1034:	4b07      	ldr	r3, [pc, #28]	; (1054 <errata_16+0x30>)
    1036:	6818      	ldr	r0, [r3, #0]
    1038:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    103c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    1040:	4258      	negs	r0, r3
    1042:	4158      	adcs	r0, r3
    1044:	4770      	bx	lr
            return true;
        }
    }

    return false;
    1046:	2000      	movs	r0, #0
}
    1048:	4770      	bx	lr
    104a:	bf00      	nop
    104c:	f0000fe0 	.word	0xf0000fe0
    1050:	f0000fe4 	.word	0xf0000fe4
    1054:	f0000fe8 	.word	0xf0000fe8

00001058 <errata_108>:
}


static bool errata_136(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    1058:	4b0c      	ldr	r3, [pc, #48]	; (108c <errata_108+0x34>)
    105a:	781b      	ldrb	r3, [r3, #0]
    105c:	2b06      	cmp	r3, #6
    105e:	d110      	bne.n	1082 <errata_108+0x2a>
    1060:	4b0b      	ldr	r3, [pc, #44]	; (1090 <errata_108+0x38>)
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	071a      	lsls	r2, r3, #28
    1066:	d10c      	bne.n	1082 <errata_108+0x2a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    1068:	4b0a      	ldr	r3, [pc, #40]	; (1094 <errata_108+0x3c>)
    106a:	6818      	ldr	r0, [r3, #0]
    106c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    1070:	2b30      	cmp	r3, #48	; 0x30
    1072:	d008      	beq.n	1086 <errata_108+0x2e>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    1074:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    1078:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
    107c:	4258      	negs	r0, r3
    107e:	4158      	adcs	r0, r3
    1080:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    1082:	2000      	movs	r0, #0
    1084:	4770      	bx	lr
            return true;
    1086:	2001      	movs	r0, #1
}
    1088:	4770      	bx	lr
    108a:	bf00      	nop
    108c:	f0000fe0 	.word	0xf0000fe0
    1090:	f0000fe4 	.word	0xf0000fe4
    1094:	f0000fe8 	.word	0xf0000fe8

00001098 <SystemInit>:
{
    1098:	b508      	push	{r3, lr}
    if (errata_12()){
    109a:	f7ff ffdd 	bl	1058 <errata_108>
    109e:	b128      	cbz	r0, 10ac <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    10a0:	4b79      	ldr	r3, [pc, #484]	; (1288 <SystemInit+0x1f0>)
    10a2:	4a7a      	ldr	r2, [pc, #488]	; (128c <SystemInit+0x1f4>)
    10a4:	681b      	ldr	r3, [r3, #0]
    10a6:	f3c3 2304 	ubfx	r3, r3, #8, #5
    10aa:	6013      	str	r3, [r2, #0]
    if (errata_16()){
    10ac:	f7ff ffba 	bl	1024 <errata_16>
    10b0:	b110      	cbz	r0, 10b8 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    10b2:	4b77      	ldr	r3, [pc, #476]	; (1290 <SystemInit+0x1f8>)
    10b4:	4a77      	ldr	r2, [pc, #476]	; (1294 <SystemInit+0x1fc>)
    10b6:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    10b8:	f7ff ffce 	bl	1058 <errata_108>
    10bc:	b128      	cbz	r0, 10ca <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    10be:	4b76      	ldr	r3, [pc, #472]	; (1298 <SystemInit+0x200>)
    10c0:	4a76      	ldr	r2, [pc, #472]	; (129c <SystemInit+0x204>)
    10c2:	681b      	ldr	r3, [r3, #0]
    10c4:	f3c3 3342 	ubfx	r3, r3, #13, #3
    10c8:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    10ca:	f7ff ffab 	bl	1024 <errata_16>
    10ce:	b120      	cbz	r0, 10da <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    10d0:	4a73      	ldr	r2, [pc, #460]	; (12a0 <SystemInit+0x208>)
    10d2:	68d3      	ldr	r3, [r2, #12]
    10d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    10d8:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    10da:	f7ff ffbd 	bl	1058 <errata_108>
    10de:	b140      	cbz	r0, 10f2 <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
    10e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    10e4:	2200      	movs	r2, #0
    10e6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    10ea:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    10ee:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    10f2:	f7ff ff97 	bl	1024 <errata_16>
    10f6:	b110      	cbz	r0, 10fe <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    10f8:	4b6a      	ldr	r3, [pc, #424]	; (12a4 <SystemInit+0x20c>)
    10fa:	2203      	movs	r2, #3
    10fc:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    10fe:	f7ff ff91 	bl	1024 <errata_16>
    1102:	b140      	cbz	r0, 1116 <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    1104:	4b68      	ldr	r3, [pc, #416]	; (12a8 <SystemInit+0x210>)
    1106:	2205      	movs	r2, #5
    1108:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    110a:	2201      	movs	r2, #1
    110c:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    110e:	2200      	movs	r2, #0
    1110:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    1112:	223f      	movs	r2, #63	; 0x3f
    1114:	605a      	str	r2, [r3, #4]
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    1116:	4b65      	ldr	r3, [pc, #404]	; (12ac <SystemInit+0x214>)
    1118:	781b      	ldrb	r3, [r3, #0]
    111a:	2b06      	cmp	r3, #6
    111c:	d109      	bne.n	1132 <SystemInit+0x9a>
    111e:	4b64      	ldr	r3, [pc, #400]	; (12b0 <SystemInit+0x218>)
    1120:	681b      	ldr	r3, [r3, #0]
    1122:	0719      	lsls	r1, r3, #28
    1124:	d105      	bne.n	1132 <SystemInit+0x9a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    1126:	4b63      	ldr	r3, [pc, #396]	; (12b4 <SystemInit+0x21c>)
    1128:	681b      	ldr	r3, [r3, #0]
    112a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    112e:	2b50      	cmp	r3, #80	; 0x50
    1130:	d05c      	beq.n	11ec <SystemInit+0x154>
    if (errata_108()){
    1132:	f7ff ff91 	bl	1058 <errata_108>
    1136:	b128      	cbz	r0, 1144 <SystemInit+0xac>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    1138:	4b5f      	ldr	r3, [pc, #380]	; (12b8 <SystemInit+0x220>)
    113a:	4a60      	ldr	r2, [pc, #384]	; (12bc <SystemInit+0x224>)
    113c:	681b      	ldr	r3, [r3, #0]
    113e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    1142:	6013      	str	r3, [r2, #0]
    if (errata_136()){
    1144:	f7ff ff88 	bl	1058 <errata_108>
    1148:	b148      	cbz	r0, 115e <SystemInit+0xc6>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    114a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    114e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1152:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    1154:	bf44      	itt	mi
    1156:	f06f 0201 	mvnmi.w	r2, #1
    115a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400


static bool errata_182(void)
{
    if (*(uint32_t *)0x10000130ul == 0x6ul){
    115e:	4b58      	ldr	r3, [pc, #352]	; (12c0 <SystemInit+0x228>)
    1160:	681b      	ldr	r3, [r3, #0]
    1162:	2b06      	cmp	r3, #6
    1164:	d104      	bne.n	1170 <SystemInit+0xd8>
        if (*(uint32_t *)0x10000134ul == 0x6ul){
    1166:	4b57      	ldr	r3, [pc, #348]	; (12c4 <SystemInit+0x22c>)
    1168:	681b      	ldr	r3, [r3, #0]
    116a:	2b06      	cmp	r3, #6
    116c:	f000 8086 	beq.w	127c <SystemInit+0x1e4>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    1170:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1174:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    1178:	2a00      	cmp	r2, #0
    117a:	db03      	blt.n	1184 <SystemInit+0xec>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    117c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    1180:	2b00      	cmp	r3, #0
    1182:	da2f      	bge.n	11e4 <SystemInit+0x14c>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    1184:	4b50      	ldr	r3, [pc, #320]	; (12c8 <SystemInit+0x230>)
    1186:	2201      	movs	r2, #1
    1188:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    118c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1190:	2a00      	cmp	r2, #0
    1192:	d0fb      	beq.n	118c <SystemInit+0xf4>
            NRF_UICR->PSELRESET[0] = 21;
    1194:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    1198:	2115      	movs	r1, #21
    119a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    119e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    11a2:	2a00      	cmp	r2, #0
    11a4:	d0fb      	beq.n	119e <SystemInit+0x106>
            NRF_UICR->PSELRESET[1] = 21;
    11a6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    11aa:	2215      	movs	r2, #21
    11ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    11b0:	4b45      	ldr	r3, [pc, #276]	; (12c8 <SystemInit+0x230>)
    11b2:	461a      	mov	r2, r3
    11b4:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    11b8:	2900      	cmp	r1, #0
    11ba:	d0fb      	beq.n	11b4 <SystemInit+0x11c>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    11bc:	2100      	movs	r1, #0
    11be:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    11c2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    11c6:	2b00      	cmp	r3, #0
    11c8:	d0fb      	beq.n	11c2 <SystemInit+0x12a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    11ca:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    11ce:	493f      	ldr	r1, [pc, #252]	; (12cc <SystemInit+0x234>)
    11d0:	4b3f      	ldr	r3, [pc, #252]	; (12d0 <SystemInit+0x238>)
    11d2:	68ca      	ldr	r2, [r1, #12]
    11d4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    11d8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    11da:	60cb      	str	r3, [r1, #12]
    11dc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    11e0:	bf00      	nop
    11e2:	e7fd      	b.n	11e0 <SystemInit+0x148>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    11e4:	4b3b      	ldr	r3, [pc, #236]	; (12d4 <SystemInit+0x23c>)
    11e6:	4a3c      	ldr	r2, [pc, #240]	; (12d8 <SystemInit+0x240>)
    11e8:	601a      	str	r2, [r3, #0]
}
    11ea:	bd08      	pop	{r3, pc}
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    11ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    11f0:	4b3a      	ldr	r3, [pc, #232]	; (12dc <SystemInit+0x244>)
    11f2:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    11f6:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    11fa:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    11fe:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    1202:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    1206:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    120a:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    120e:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    1212:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    1216:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    121a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    121e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    1222:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    1226:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    122a:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    122e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    1232:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    1236:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    123a:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    123e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    1242:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    1246:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    124a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    124e:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    1252:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    1256:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    125a:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    125e:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    1262:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    1266:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    126a:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    126e:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    1272:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    1276:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    127a:	e75a      	b.n	1132 <SystemInit+0x9a>
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    127c:	4a18      	ldr	r2, [pc, #96]	; (12e0 <SystemInit+0x248>)
    127e:	6813      	ldr	r3, [r2, #0]
    1280:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    1284:	6013      	str	r3, [r2, #0]
    1286:	e773      	b.n	1170 <SystemInit+0xd8>
    1288:	10000324 	.word	0x10000324
    128c:	40013540 	.word	0x40013540
    1290:	4007c074 	.word	0x4007c074
    1294:	baadf00d 	.word	0xbaadf00d
    1298:	10000244 	.word	0x10000244
    129c:	4000053c 	.word	0x4000053c
    12a0:	e000edf0 	.word	0xe000edf0
    12a4:	400005a0 	.word	0x400005a0
    12a8:	40005610 	.word	0x40005610
    12ac:	f0000fe0 	.word	0xf0000fe0
    12b0:	f0000fe4 	.word	0xf0000fe4
    12b4:	f0000fe8 	.word	0xf0000fe8
    12b8:	10000258 	.word	0x10000258
    12bc:	40000ee4 	.word	0x40000ee4
    12c0:	10000130 	.word	0x10000130
    12c4:	10000134 	.word	0x10000134
    12c8:	4001e000 	.word	0x4001e000
    12cc:	e000ed00 	.word	0xe000ed00
    12d0:	05fa0004 	.word	0x05fa0004
    12d4:	20002814 	.word	0x20002814
    12d8:	03d09000 	.word	0x03d09000
    12dc:	4000c000 	.word	0x4000c000
    12e0:	4000173c 	.word	0x4000173c

000012e4 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    12e4:	b513      	push	{r0, r1, r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    12e6:	4c11      	ldr	r4, [pc, #68]	; (132c <sys_rand32_get+0x48>)
    12e8:	f3bf 8f5b 	dmb	ish
    12ec:	6820      	ldr	r0, [r4, #0]
    12ee:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    12f2:	b960      	cbnz	r0, 130e <sys_rand32_get+0x2a>
    12f4:	480e      	ldr	r0, [pc, #56]	; (1330 <sys_rand32_get+0x4c>)
    12f6:	f006 fb3d 	bl	7974 <_impl_device_get_binding>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    12fa:	f3bf 8f5b 	dmb	ish
    12fe:	e854 3f00 	ldrex	r3, [r4]
    1302:	e844 0200 	strex	r2, r0, [r4]
    1306:	2a00      	cmp	r2, #0
    1308:	d1f9      	bne.n	12fe <sys_rand32_get+0x1a>
    130a:	f3bf 8f5b 	dmb	ish
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    130e:	6843      	ldr	r3, [r0, #4]
    1310:	2204      	movs	r2, #4
    1312:	681b      	ldr	r3, [r3, #0]
    1314:	eb0d 0102 	add.w	r1, sp, r2
    1318:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    131a:	2800      	cmp	r0, #0
    131c:	da02      	bge.n	1324 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    131e:	f000 fa49 	bl	17b4 <_timer_cycle_get_32>
    1322:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1324:	9801      	ldr	r0, [sp, #4]
    1326:	b002      	add	sp, #8
    1328:	bd10      	pop	{r4, pc}
    132a:	bf00      	nop
    132c:	20000030 	.word	0x20000030
    1330:	00008d9f 	.word	0x00008d9f

00001334 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1334:	280a      	cmp	r0, #10
{
    1336:	b538      	push	{r3, r4, r5, lr}
    1338:	4604      	mov	r4, r0
    133a:	4d07      	ldr	r5, [pc, #28]	; (1358 <console_out+0x24>)
	if ('\n' == c) {
    133c:	d104      	bne.n	1348 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    133e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    1340:	6843      	ldr	r3, [r0, #4]
    1342:	210d      	movs	r1, #13
    1344:	685b      	ldr	r3, [r3, #4]
    1346:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    1348:	6828      	ldr	r0, [r5, #0]
    134a:	6843      	ldr	r3, [r0, #4]
    134c:	b2e1      	uxtb	r1, r4
    134e:	685b      	ldr	r3, [r3, #4]
    1350:	4798      	blx	r3

	return c;
}
    1352:	4620      	mov	r0, r4
    1354:	bd38      	pop	{r3, r4, r5, pc}
    1356:	bf00      	nop
    1358:	20000034 	.word	0x20000034

0000135c <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    135c:	4801      	ldr	r0, [pc, #4]	; (1364 <uart_console_hook_install+0x8>)
    135e:	f7ff bcd1 	b.w	d04 <__printk_hook_install>
    1362:	bf00      	nop
    1364:	00001335 	.word	0x00001335

00001368 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1368:	b508      	push	{r3, lr}
    136a:	4804      	ldr	r0, [pc, #16]	; (137c <uart_console_init+0x14>)
    136c:	f006 fb02 	bl	7974 <_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1370:	4b03      	ldr	r3, [pc, #12]	; (1380 <uart_console_init+0x18>)
    1372:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1374:	f7ff fff2 	bl	135c <uart_console_hook_install>

	return 0;
}
    1378:	2000      	movs	r0, #0
    137a:	bd08      	pop	{r3, pc}
    137c:	00008da9 	.word	0x00008da9
    1380:	20000034 	.word	0x20000034

00001384 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1384:	b510      	push	{r4, lr}
	__asm__ volatile(
    1386:	f04f 0320 	mov.w	r3, #32
    138a:	f3ef 8211 	mrs	r2, BASEPRI
    138e:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1392:	4c11      	ldr	r4, [pc, #68]	; (13d8 <_m16src_stop+0x54>)
    1394:	7823      	ldrb	r3, [r4, #0]
    1396:	b923      	cbnz	r3, 13a2 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1398:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    139c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    13a0:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    13a2:	3b01      	subs	r3, #1
    13a4:	b2db      	uxtb	r3, r3
    13a6:	7023      	strb	r3, [r4, #0]
    13a8:	b123      	cbz	r3, 13b4 <_m16src_stop+0x30>
    13aa:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    13ae:	f06f 000f 	mvn.w	r0, #15
    13b2:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    13b4:	4b09      	ldr	r3, [pc, #36]	; (13dc <_m16src_stop+0x58>)
    13b6:	7818      	ldrb	r0, [r3, #0]
    13b8:	2101      	movs	r1, #1
    13ba:	b128      	cbz	r0, 13c8 <_m16src_stop+0x44>
		m16src_ref++;
    13bc:	7021      	strb	r1, [r4, #0]
    13be:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    13c2:	f06f 000a 	mvn.w	r0, #10
    13c6:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1U;
    13c8:	7019      	strb	r1, [r3, #0]
    13ca:	f382 8811 	msr	BASEPRI, r2
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    13ce:	4a04      	ldr	r2, [pc, #16]	; (13e0 <_m16src_stop+0x5c>)
    13d0:	6011      	str	r1, [r2, #0]
	/* re-entrancy and mult-context safe, and reference count is zero, */

	nrf_clock_task_trigger(NRF_CLOCK_TASK_HFCLKSTOP);

	/* release resource guard */
	m16src_grd = 0U;
    13d2:	7018      	strb	r0, [r3, #0]

	return 0;
}
    13d4:	bd10      	pop	{r4, pc}
    13d6:	bf00      	nop
    13d8:	2000003a 	.word	0x2000003a
    13dc:	20000039 	.word	0x20000039
    13e0:	40000004 	.word	0x40000004

000013e4 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    13e4:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    13e6:	2200      	movs	r2, #0
    13e8:	4610      	mov	r0, r2
    13ea:	2101      	movs	r1, #1
    13ec:	f000 fbce 	bl	1b8c <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    13f0:	2000      	movs	r0, #0
    13f2:	f000 fb99 	bl	1b28 <_arch_irq_enable>

	return 0;
}
    13f6:	2000      	movs	r0, #0
    13f8:	bd08      	pop	{r3, pc}
	...

000013fc <_m16src_start>:
{
    13fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    13fe:	f04f 0220 	mov.w	r2, #32
    1402:	f3ef 8311 	mrs	r3, BASEPRI
    1406:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    140a:	4a26      	ldr	r2, [pc, #152]	; (14a4 <_m16src_start+0xa8>)
    140c:	7810      	ldrb	r0, [r2, #0]
    140e:	1c44      	adds	r4, r0, #1
    1410:	7014      	strb	r4, [r2, #0]
    1412:	b170      	cbz	r0, 1432 <_m16src_start+0x36>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1414:	f383 8811 	msr	BASEPRI, r3
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
    1418:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    141c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    1420:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
    1424:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    1428:	bf0c      	ite	eq
    142a:	2000      	moveq	r0, #0
    142c:	f06f 0043 	mvnne.w	r0, #67	; 0x43
}
    1430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    1432:	4d1d      	ldr	r5, [pc, #116]	; (14a8 <_m16src_start+0xac>)
    1434:	782f      	ldrb	r7, [r5, #0]
    1436:	b12f      	cbz	r7, 1444 <_m16src_start+0x48>
		m16src_ref--;
    1438:	7010      	strb	r0, [r2, #0]
    143a:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    143e:	f06f 000a 	mvn.w	r0, #10
    1442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1U;
    1444:	2601      	movs	r6, #1
    1446:	702e      	strb	r6, [r5, #0]
    1448:	f383 8811 	msr	BASEPRI, r3
    144c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1450:	b319      	cbz	r1, 149a <_m16src_start+0x9e>
		irq_disable(POWER_CLOCK_IRQn);
    1452:	4638      	mov	r0, r7
    1454:	f000 fb78 	bl	1b48 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1458:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    145c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
    1460:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    1464:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1466:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    146a:	b192      	cbz	r2, 1492 <_m16src_start+0x96>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    146c:	2200      	movs	r2, #0
    146e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1472:	4a0e      	ldr	r2, [pc, #56]	; (14ac <_m16src_start+0xb0>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1474:	f013 0f01 	tst.w	r3, #1
    1478:	f04f 0301 	mov.w	r3, #1
    NRF_CLOCK->INTENCLR = int_mask;
    147c:	bf08      	it	eq
    147e:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    1482:	2000      	movs	r0, #0
    1484:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1488:	f000 fb4e 	bl	1b28 <_arch_irq_enable>
	m16src_grd = 0U;
    148c:	2300      	movs	r3, #0
    148e:	702b      	strb	r3, [r5, #0]
    1490:	e7c2      	b.n	1418 <_m16src_start+0x1c>
			__WFE();
    1492:	bf20      	wfe
			__SEV();
    1494:	bf40      	sev
			__WFE();
    1496:	bf20      	wfe
    1498:	e7e5      	b.n	1466 <_m16src_start+0x6a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    149a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    149e:	6026      	str	r6, [r4, #0]
    14a0:	e7f4      	b.n	148c <_m16src_start+0x90>
    14a2:	bf00      	nop
    14a4:	2000003a 	.word	0x2000003a
    14a8:	20000039 	.word	0x20000039
    14ac:	e000e100 	.word	0xe000e100

000014b0 <_power_clock_isr>:
{
    14b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    14b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    14b6:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    14b8:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	hf_intenset = ((NRF_CLOCK->INTENSET &
    14bc:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    14c0:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf_intenset = ((NRF_CLOCK->INTENSET &
    14c4:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    14c8:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    14cc:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    14d0:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
    14d4:	3400      	adds	r4, #0
	hf_intenset = ((NRF_CLOCK->INTENSET &
    14d6:	f002 0201 	and.w	r2, r2, #1
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    14da:	bf18      	it	ne
    14dc:	2401      	movne	r4, #1
	if (pof) {
    14de:	f1be 0f00 	cmp.w	lr, #0
    14e2:	d003      	beq.n	14ec <_power_clock_isr+0x3c>
		NRF_POWER->EVENTS_POFWARN = 0;
    14e4:	f04f 0e00 	mov.w	lr, #0
    14e8:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    14ec:	2f00      	cmp	r7, #0
    14ee:	d041      	beq.n	1574 <_power_clock_isr+0xc4>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    14f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    14f4:	2700      	movs	r7, #0
    14f6:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    14fa:	b152      	cbz	r2, 1512 <_power_clock_isr+0x62>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    14fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    1500:	4f23      	ldr	r7, [pc, #140]	; (1590 <_power_clock_isr+0xe0>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1502:	2201      	movs	r2, #1
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    1504:	f04f 0e02 	mov.w	lr, #2
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1508:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    150c:	f8c7 e000 	str.w	lr, [r7]
		NRF_CLOCK->TASKS_CAL = 1;
    1510:	611a      	str	r2, [r3, #16]
	if (lf) {
    1512:	b9ee      	cbnz	r6, 1550 <_power_clock_isr+0xa0>
	if (done) {
    1514:	b159      	cbz	r1, 152e <_power_clock_isr+0x7e>
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    1516:	4b1e      	ldr	r3, [pc, #120]	; (1590 <_power_clock_isr+0xe0>)
		NRF_CLOCK->EVENTS_DONE = 0;
    1518:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    151c:	2100      	movs	r1, #0
    151e:	6019      	str	r1, [r3, #0]
		err = _m16src_stop(dev, NULL);
    1520:	4628      	mov	r0, r5
		NRF_CLOCK->EVENTS_DONE = 0;
    1522:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    1526:	f7ff ff2d 	bl	1384 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    152a:	2301      	movs	r3, #1
    152c:	6173      	str	r3, [r6, #20]
	if (ctto) {
    152e:	b36c      	cbz	r4, 158c <_power_clock_isr+0xdc>
		NRF_CLOCK->EVENTS_CTTO = 0;
    1530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1534:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1536:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    1538:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    153c:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    153e:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1542:	f7ff ff5b 	bl	13fc <_m16src_start>
		if (!err) {
    1546:	bb08      	cbnz	r0, 158c <_power_clock_isr+0xdc>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1548:	4b12      	ldr	r3, [pc, #72]	; (1594 <_power_clock_isr+0xe4>)
    154a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
}
    154e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1554:	2200      	movs	r2, #0
    1556:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (lf_intenset) {
    155a:	0782      	lsls	r2, r0, #30
    155c:	d5da      	bpl.n	1514 <_power_clock_isr+0x64>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    155e:	2202      	movs	r2, #2
    1560:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
			if ((NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) ==
    1564:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1568:	079b      	lsls	r3, r3, #30
    156a:	d1d3      	bne.n	1514 <_power_clock_isr+0x64>
	if (done) {
    156c:	2900      	cmp	r1, #0
    156e:	d0df      	beq.n	1530 <_power_clock_isr+0x80>
				ctto = 1U;
    1570:	2401      	movs	r4, #1
    1572:	e7d0      	b.n	1516 <_power_clock_isr+0x66>
	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    1574:	2a00      	cmp	r2, #0
    1576:	d0cc      	beq.n	1512 <_power_clock_isr+0x62>
    1578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    157c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    1580:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    1584:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    1588:	d1c3      	bne.n	1512 <_power_clock_isr+0x62>
    158a:	e7b7      	b.n	14fc <_power_clock_isr+0x4c>
    158c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    158e:	bf00      	nop
    1590:	40000c34 	.word	0x40000c34
    1594:	e000e100 	.word	0xe000e100

00001598 <_k32src_start>:
{
    1598:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    159a:	f04f 0220 	mov.w	r2, #32
    159e:	f3ef 8311 	mrs	r3, BASEPRI
    15a2:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    15a6:	4d22      	ldr	r5, [pc, #136]	; (1630 <_k32src_start+0x98>)
    15a8:	782a      	ldrb	r2, [r5, #0]
    15aa:	b18a      	cbz	r2, 15d0 <_k32src_start+0x38>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    15ac:	f383 8811 	msr	BASEPRI, r3
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    15b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    15b4:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    15b8:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    15bc:	f003 0303 	and.w	r3, r3, #3
    15c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    15c4:	4393      	bics	r3, r2
}
    15c6:	bf14      	ite	ne
    15c8:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    15cc:	2000      	moveq	r0, #0
    15ce:	bd70      	pop	{r4, r5, r6, pc}
	k32src_initialized = 1U;
    15d0:	2401      	movs	r4, #1
    15d2:	702c      	strb	r4, [r5, #0]
    15d4:	f383 8811 	msr	BASEPRI, r3
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    15d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    15dc:	4e15      	ldr	r6, [pc, #84]	; (1634 <_k32src_start+0x9c>)
    15de:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    NRF_CLOCK->INTENSET = int_mask;
    15e2:	2502      	movs	r5, #2
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    15e4:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    15e8:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    15ec:	f011 0103 	ands.w	r1, r1, #3
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    15f0:	6034      	str	r4, [r6, #0]
    NRF_CLOCK->INTENCLR = int_mask;
    15f2:	f04f 0618 	mov.w	r6, #24
    15f6:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    15fa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    15fe:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1602:	d1d5      	bne.n	15b0 <_k32src_start+0x18>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    1604:	2210      	movs	r2, #16
    1606:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_CLOCK->INTENSET = int_mask;
    160a:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
		if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) == 0) {
    160e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    1612:	03d2      	lsls	r2, r2, #15
    1614:	d402      	bmi.n	161c <_k32src_start+0x84>
    1616:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
    161a:	e7c9      	b.n	15b0 <_k32src_start+0x18>
    161c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1620:	f7ff feec 	bl	13fc <_m16src_start>
		if (!err) {
    1624:	2800      	cmp	r0, #0
    1626:	d1c3      	bne.n	15b0 <_k32src_start+0x18>
    1628:	4b03      	ldr	r3, [pc, #12]	; (1638 <_k32src_start+0xa0>)
    162a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    162e:	e7bf      	b.n	15b0 <_k32src_start+0x18>
    1630:	20000038 	.word	0x20000038
    1634:	40000008 	.word	0x40000008
    1638:	e000e100 	.word	0xe000e100

0000163c <z_clock_idle_exit>:
    163c:	4770      	bx	lr

0000163e <k_spin_lock.isra.0>:
	__asm__ volatile(
    163e:	f04f 0320 	mov.w	r3, #32
    1642:	f3ef 8011 	mrs	r0, BASEPRI
    1646:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
    164a:	4770      	bx	lr

0000164c <rtc1_nrf5_isr>:
 * symbol.
 */
void rtc1_nrf5_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    164c:	4a0d      	ldr	r2, [pc, #52]	; (1684 <rtc1_nrf5_isr+0x38>)
    164e:	2300      	movs	r3, #0
{
    1650:	b510      	push	{r4, lr}
	RTC->EVENTS_COMPARE[0] = 0;
    1652:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	k_spinlock_key_t key = k_spin_lock(&lock);
    1656:	f7ff fff2 	bl	163e <k_spin_lock.isra.0>
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    165a:	490b      	ldr	r1, [pc, #44]	; (1688 <rtc1_nrf5_isr+0x3c>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
    165c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    1660:	680c      	ldr	r4, [r1, #0]
    1662:	f240 1247 	movw	r2, #327	; 0x147
	return (a - b) & COUNTER_MAX;
    1666:	1b1b      	subs	r3, r3, r4
    1668:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    166c:	fbb3 f3f2 	udiv	r3, r3, r2

	last_count += dticks * CYC_PER_TICK;
    1670:	fb02 4203 	mla	r2, r2, r3, r4
    1674:	600a      	str	r2, [r1, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1676:	f380 8811 	msr	BASEPRI, r0
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(dticks);
    167a:	4618      	mov	r0, r3
}
    167c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clock_announce(dticks);
    1680:	f007 b884 	b.w	878c <z_clock_announce>
    1684:	40011000 	.word	0x40011000
    1688:	2000003c 	.word	0x2000003c

0000168c <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    168c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    168e:	481f      	ldr	r0, [pc, #124]	; (170c <z_clock_driver_init+0x80>)
    1690:	f006 f970 	bl	7974 <_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
	if (!clock) {
    1694:	2800      	cmp	r0, #0
    1696:	d035      	beq.n	1704 <z_clock_driver_init+0x78>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1698:	6843      	ldr	r3, [r0, #4]
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    169a:	4d1d      	ldr	r5, [pc, #116]	; (1710 <z_clock_driver_init+0x84>)
    169c:	681b      	ldr	r3, [r3, #0]
    169e:	2101      	movs	r1, #1
    16a0:	4798      	blx	r3
    16a2:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
    16a4:	f240 1347 	movw	r3, #327	; 0x147
    p_reg->PRESCALER = val;
    16a8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    16ac:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

__STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    16b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    16b4:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
    p_reg->INTENSET = mask;
    16b8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    16bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    16c0:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    16c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    16c8:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    16ca:	681b      	ldr	r3, [r3, #0]
    16cc:	9301      	str	r3, [sp, #4]
    (void)dummy;
    16ce:	9b01      	ldr	r3, [sp, #4]
    16d0:	4b10      	ldr	r3, [pc, #64]	; (1714 <z_clock_driver_init+0x88>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    16d2:	2101      	movs	r1, #1
    16d4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    16d8:	2011      	movs	r0, #17
    16da:	4622      	mov	r2, r4
    16dc:	f000 fa56 	bl	1b8c <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    16e0:	2011      	movs	r0, #17
    16e2:	f000 fa21 	bl	1b28 <_arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    16e6:	4a0c      	ldr	r2, [pc, #48]	; (1718 <z_clock_driver_init+0x8c>)
    16e8:	2301      	movs	r3, #1
    16ea:	6013      	str	r3, [r2, #0]
    16ec:	602b      	str	r3, [r5, #0]
     return p_reg->COUNTER;
    16ee:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
    16f2:	f203 1347 	addw	r3, r3, #327	; 0x147
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    16f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    16fa:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
    16fe:	4620      	mov	r0, r4
}
    1700:	b003      	add	sp, #12
    1702:	bd30      	pop	{r4, r5, pc}
		return -1;
    1704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1708:	e7fa      	b.n	1700 <z_clock_driver_init+0x74>
    170a:	bf00      	nop
    170c:	00008dc8 	.word	0x00008dc8
    1710:	40011000 	.word	0x40011000
    1714:	e000e100 	.word	0xe000e100
    1718:	40011008 	.word	0x40011008

0000171c <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    171c:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    171e:	f64c 0569 	movw	r5, #51305	; 0xc869
    1722:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1726:	bf14      	ite	ne
    1728:	4602      	movne	r2, r0
    172a:	462a      	moveq	r2, r5
     return p_reg->COUNTER;
    172c:	4c13      	ldr	r4, [pc, #76]	; (177c <z_clock_set_timeout+0x60>)
	ticks = max(min(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
    172e:	f7ff ff86 	bl	163e <k_spin_lock.isra.0>
	u32_t cyc, t = counter();

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
    1732:	4b13      	ldr	r3, [pc, #76]	; (1780 <z_clock_set_timeout+0x64>)
    1734:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    1738:	681e      	ldr	r6, [r3, #0]
	ticks = max(min(ticks - 1, (s32_t)MAX_TICKS), 0);
    173a:	1e53      	subs	r3, r2, #1
    173c:	42ab      	cmp	r3, r5
	return (a - b) & COUNTER_MAX;
    173e:	eba1 0206 	sub.w	r2, r1, r6
	ticks = max(min(ticks - 1, (s32_t)MAX_TICKS), 0);
    1742:	bfa8      	it	ge
    1744:	462b      	movge	r3, r5
	return (a - b) & COUNTER_MAX;
    1746:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
    174a:	f240 1547 	movw	r5, #327	; 0x147
	cyc += (CYC_PER_TICK - 1);
    174e:	f502 72a3 	add.w	r2, r2, #326	; 0x146
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
    1752:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	cyc += (CYC_PER_TICK - 1);
    1756:	fb05 2303 	mla	r3, r5, r3, r2
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
    175a:	fbb3 f3f5 	udiv	r3, r3, r5
	cyc += last_count;
    175e:	fb05 6303 	mla	r3, r5, r3, r6
	return (a - b) & COUNTER_MAX;
    1762:	1a59      	subs	r1, r3, r1
    1764:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

	if (counter_sub(cyc, t) < MIN_DELAY) {
    1768:	291f      	cmp	r1, #31
		cyc += CYC_PER_TICK;
    176a:	bf98      	it	ls
    176c:	195b      	addls	r3, r3, r5
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    176e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    1772:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    1776:	f380 8811 	msr	BASEPRI, r0
    177a:	bd70      	pop	{r4, r5, r6, pc}
    177c:	40011000 	.word	0x40011000
    1780:	2000003c 	.word	0x2000003c

00001784 <z_clock_elapsed>:
	k_spin_unlock(&lock, key);
#endif
}

u32_t z_clock_elapsed(void)
{
    1784:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
    1786:	f7ff ff5a 	bl	163e <k_spin_lock.isra.0>
     return p_reg->COUNTER;
    178a:	4b08      	ldr	r3, [pc, #32]	; (17ac <z_clock_elapsed+0x28>)
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    178c:	4a08      	ldr	r2, [pc, #32]	; (17b0 <z_clock_elapsed+0x2c>)
    178e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    1792:	6812      	ldr	r2, [r2, #0]
    1794:	1a9b      	subs	r3, r3, r2
    1796:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    179a:	f240 1247 	movw	r2, #327	; 0x147
    179e:	fbb3 f3f2 	udiv	r3, r3, r2
    17a2:	f380 8811 	msr	BASEPRI, r0

	k_spin_unlock(&lock, key);
	return ret;
}
    17a6:	4618      	mov	r0, r3
    17a8:	bd08      	pop	{r3, pc}
    17aa:	bf00      	nop
    17ac:	40011000 	.word	0x40011000
    17b0:	2000003c 	.word	0x2000003c

000017b4 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    17b4:	b508      	push	{r3, lr}
	k_spinlock_key_t key = k_spin_lock(&lock);
    17b6:	f7ff ff42 	bl	163e <k_spin_lock.isra.0>
    17ba:	4b06      	ldr	r3, [pc, #24]	; (17d4 <_timer_cycle_get_32+0x20>)
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    17bc:	4a06      	ldr	r2, [pc, #24]	; (17d8 <_timer_cycle_get_32+0x24>)
    17be:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    17c2:	6812      	ldr	r2, [r2, #0]
    17c4:	f380 8811 	msr	BASEPRI, r0
	return (a - b) & COUNTER_MAX;
    17c8:	1a98      	subs	r0, r3, r2
    17ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    17ce:	4410      	add	r0, r2
    17d0:	bd08      	pop	{r3, pc}
    17d2:	bf00      	nop
    17d4:	40011000 	.word	0x40011000
    17d8:	2000003c 	.word	0x2000003c

000017dc <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    17dc:	4804      	ldr	r0, [pc, #16]	; (17f0 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    17de:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    17e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    17e2:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    17e4:	d003      	beq.n	17ee <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    17e6:	4903      	ldr	r1, [pc, #12]	; (17f4 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    17e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    17ec:	600a      	str	r2, [r1, #0]

000017ee <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    17ee:	4770      	bx	lr
    ldr r0, =_kernel
    17f0:	20000e50 	.word	0x20000e50
    ldr r1, =_SCS_ICSR
    17f4:	e000ed04 	.word	0xe000ed04

000017f8 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17f8:	4804      	ldr	r0, [pc, #16]	; (180c <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    17fa:	2300      	movs	r3, #0
    17fc:	2120      	movs	r1, #32
    17fe:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1800:	3301      	adds	r3, #1
    1802:	2b27      	cmp	r3, #39	; 0x27
    1804:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1808:	d1f9      	bne.n	17fe <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    180a:	4770      	bx	lr
    180c:	e000e100 	.word	0xe000e100

00001810 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1810:	4a08      	ldr	r2, [pc, #32]	; (1834 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1812:	4909      	ldr	r1, [pc, #36]	; (1838 <__swap+0x28>)
	_current->arch.basepri = key;
    1814:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1816:	6809      	ldr	r1, [r1, #0]
    1818:	6699      	str	r1, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    181a:	4908      	ldr	r1, [pc, #32]	; (183c <__swap+0x2c>)
	_current->arch.basepri = key;
    181c:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    181e:	684b      	ldr	r3, [r1, #4]
    1820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1824:	604b      	str	r3, [r1, #4]
    1826:	2300      	movs	r3, #0
    1828:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    182c:	6893      	ldr	r3, [r2, #8]
}
    182e:	6e98      	ldr	r0, [r3, #104]	; 0x68
    1830:	4770      	bx	lr
    1832:	bf00      	nop
    1834:	20000e50 	.word	0x20000e50
    1838:	00009314 	.word	0x00009314
    183c:	e000ed00 	.word	0xe000ed00

00001840 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1840:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1842:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1846:	490d      	ldr	r1, [pc, #52]	; (187c <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1848:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    184a:	2028      	movs	r0, #40	; 0x28
    add r0, r2
    184c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    184e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1852:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    1856:	4f0a      	ldr	r7, [pc, #40]	; (1880 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1858:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    185c:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    185e:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1860:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1862:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
    1864:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1866:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1868:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    186c:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    1870:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r3, #0
    msr PSPLIM, r3
    pop {r3}
#endif

    msr PSP, ip
    1874:	f38c 8809 	msr	PSP, ip
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
    1878:	4770      	bx	lr
    187a:	0000      	.short	0x0000
    ldr r1, =_kernel
    187c:	20000e50 	.word	0x20000e50
    ldr v4, =_SCS_ICSR
    1880:	e000ed04 	.word	0xe000ed04

00001884 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    1884:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1888:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    188a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    188e:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1892:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    1894:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    1898:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    189c:	2902      	cmp	r1, #2
    beq _oops
    189e:	d0ff      	beq.n	18a0 <_oops>

000018a0 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    18a0:	b500      	push	{lr}
    blx _do_kernel_oops
    18a2:	f000 fa17 	bl	1cd4 <_do_kernel_oops>
    pop {pc}
    18a6:	bd00      	pop	{pc}

000018a8 <_MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    18a8:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    18aa:	4c19      	ldr	r4, [pc, #100]	; (1910 <_MpuFault.isra.2+0x68>)
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    18ac:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
    18ae:	4819      	ldr	r0, [pc, #100]	; (1914 <_MpuFault.isra.2+0x6c>)
    18b0:	f7ff fb6e 	bl	f90 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    18b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    18b6:	06d9      	lsls	r1, r3, #27
    18b8:	d502      	bpl.n	18c0 <_MpuFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error\n");
    18ba:	4817      	ldr	r0, [pc, #92]	; (1918 <_MpuFault.isra.2+0x70>)
    18bc:	f7ff fb68 	bl	f90 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    18c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    18c2:	071a      	lsls	r2, r3, #28
    18c4:	d502      	bpl.n	18cc <_MpuFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    18c6:	4815      	ldr	r0, [pc, #84]	; (191c <_MpuFault.isra.2+0x74>)
    18c8:	f7ff fb62 	bl	f90 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    18cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    18ce:	079b      	lsls	r3, r3, #30
    18d0:	d50e      	bpl.n	18f0 <_MpuFault.isra.2+0x48>
		PR_FAULT_INFO("  Data Access Violation\n");
    18d2:	4813      	ldr	r0, [pc, #76]	; (1920 <_MpuFault.isra.2+0x78>)
    18d4:	f7ff fb5c 	bl	f90 <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    18d8:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    18da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    18dc:	0618      	lsls	r0, r3, #24
    18de:	d507      	bpl.n	18f0 <_MpuFault.isra.2+0x48>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
    18e0:	4810      	ldr	r0, [pc, #64]	; (1924 <_MpuFault.isra.2+0x7c>)
    18e2:	f7ff fb55 	bl	f90 <printk>
			if (fromHardFault) {
    18e6:	b11d      	cbz	r5, 18f0 <_MpuFault.isra.2+0x48>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    18e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    18ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    18ee:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    18f0:	4c07      	ldr	r4, [pc, #28]	; (1910 <_MpuFault.isra.2+0x68>)
    18f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    18f4:	07d2      	lsls	r2, r2, #31
    18f6:	d502      	bpl.n	18fe <_MpuFault.isra.2+0x56>
		PR_FAULT_INFO("  Instruction Access Violation\n");
    18f8:	480b      	ldr	r0, [pc, #44]	; (1928 <_MpuFault.isra.2+0x80>)
    18fa:	f7ff fb49 	bl	f90 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    18fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1900:	069b      	lsls	r3, r3, #26
    1902:	d502      	bpl.n	190a <_MpuFault.isra.2+0x62>
		PR_FAULT_INFO(
    1904:	4809      	ldr	r0, [pc, #36]	; (192c <_MpuFault.isra.2+0x84>)
    1906:	f7ff fb43 	bl	f90 <printk>
	if (_MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    190a:	2000      	movs	r0, #0
    190c:	bd38      	pop	{r3, r4, r5, pc}
    190e:	bf00      	nop
    1910:	e000ed00 	.word	0xe000ed00
    1914:	00008f37 	.word	0x00008f37
    1918:	00008f4e 	.word	0x00008f4e
    191c:	00008f60 	.word	0x00008f60
    1920:	00008f74 	.word	0x00008f74
    1924:	00008f8d 	.word	0x00008f8d
    1928:	00008fa4 	.word	0x00008fa4
    192c:	00008fc4 	.word	0x00008fc4

00001930 <_BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    1930:	b538      	push	{r3, r4, r5, lr}
{
	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1932:	4c1b      	ldr	r4, [pc, #108]	; (19a0 <_BusFault.isra.3+0x70>)
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    1934:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
    1936:	481b      	ldr	r0, [pc, #108]	; (19a4 <_BusFault.isra.3+0x74>)
    1938:	f7ff fb2a 	bl	f90 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    193c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    193e:	04d8      	lsls	r0, r3, #19
    1940:	d504      	bpl.n	194c <_BusFault.isra.3+0x1c>
		PR_FAULT_INFO("  Stacking error\n");
    1942:	4819      	ldr	r0, [pc, #100]	; (19a8 <_BusFault.isra.3+0x78>)
		PR_FAULT_INFO("  Instruction bus error\n");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    1944:	f7ff fb24 	bl	f90 <printk>
	if (_MemoryFaultIsRecoverable(esf)) {
		return _NANO_ERR_RECOVERABLE;
	}

	return _NANO_ERR_HW_EXCEPTION;
}
    1948:	2000      	movs	r0, #0
    194a:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    194c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    194e:	0519      	lsls	r1, r3, #20
    1950:	d501      	bpl.n	1956 <_BusFault.isra.3+0x26>
		PR_FAULT_INFO("  Unstacking error\n");
    1952:	4816      	ldr	r0, [pc, #88]	; (19ac <_BusFault.isra.3+0x7c>)
    1954:	e7f6      	b.n	1944 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1956:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1958:	059a      	lsls	r2, r3, #22
    195a:	d514      	bpl.n	1986 <_BusFault.isra.3+0x56>
		PR_FAULT_INFO("  Precise data bus error\n");
    195c:	4814      	ldr	r0, [pc, #80]	; (19b0 <_BusFault.isra.3+0x80>)
    195e:	f7ff fb17 	bl	f90 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1962:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1964:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1966:	041b      	lsls	r3, r3, #16
    1968:	d507      	bpl.n	197a <_BusFault.isra.3+0x4a>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
    196a:	4812      	ldr	r0, [pc, #72]	; (19b4 <_BusFault.isra.3+0x84>)
    196c:	f7ff fb10 	bl	f90 <printk>
			if (fromHardFault) {
    1970:	b11d      	cbz	r5, 197a <_BusFault.isra.3+0x4a>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1972:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1974:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1978:	62a3      	str	r3, [r4, #40]	; 0x28
		if ((SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) != 0) {
    197a:	4b09      	ldr	r3, [pc, #36]	; (19a0 <_BusFault.isra.3+0x70>)
    197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    197e:	0558      	lsls	r0, r3, #21
    1980:	d5e2      	bpl.n	1948 <_BusFault.isra.3+0x18>
			PR_FAULT_INFO("  Imprecise data bus error\n");
    1982:	480d      	ldr	r0, [pc, #52]	; (19b8 <_BusFault.isra.3+0x88>)
    1984:	e7de      	b.n	1944 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1986:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1988:	0559      	lsls	r1, r3, #21
    198a:	d4fa      	bmi.n	1982 <_BusFault.isra.3+0x52>
	} else if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    198c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    198e:	05da      	lsls	r2, r3, #23
    1990:	d501      	bpl.n	1996 <_BusFault.isra.3+0x66>
		PR_FAULT_INFO("  Instruction bus error\n");
    1992:	480a      	ldr	r0, [pc, #40]	; (19bc <_BusFault.isra.3+0x8c>)
    1994:	e7d6      	b.n	1944 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1996:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1998:	049b      	lsls	r3, r3, #18
    199a:	d5d5      	bpl.n	1948 <_BusFault.isra.3+0x18>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    199c:	4808      	ldr	r0, [pc, #32]	; (19c0 <_BusFault.isra.3+0x90>)
    199e:	e7d1      	b.n	1944 <_BusFault.isra.3+0x14>
    19a0:	e000ed00 	.word	0xe000ed00
    19a4:	00008de8 	.word	0x00008de8
    19a8:	00008f4e 	.word	0x00008f4e
    19ac:	00008f60 	.word	0x00008f60
    19b0:	00008dff 	.word	0x00008dff
    19b4:	00008e19 	.word	0x00008e19
    19b8:	00008e2f 	.word	0x00008e2f
    19bc:	00008e4b 	.word	0x00008e4b
    19c0:	00008fc4 	.word	0x00008fc4

000019c4 <_UsageFault.isra.5>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
    19c4:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    19c6:	4c19      	ldr	r4, [pc, #100]	; (1a2c <_UsageFault.isra.5+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
    19c8:	4819      	ldr	r0, [pc, #100]	; (1a30 <_UsageFault.isra.5+0x6c>)
    19ca:	f7ff fae1 	bl	f90 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    19ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    19d0:	019a      	lsls	r2, r3, #6
    19d2:	d502      	bpl.n	19da <_UsageFault.isra.5+0x16>
		PR_FAULT_INFO("  Division by zero\n");
    19d4:	4817      	ldr	r0, [pc, #92]	; (1a34 <_UsageFault.isra.5+0x70>)
    19d6:	f7ff fadb 	bl	f90 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    19da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    19dc:	01db      	lsls	r3, r3, #7
    19de:	d502      	bpl.n	19e6 <_UsageFault.isra.5+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
    19e0:	4815      	ldr	r0, [pc, #84]	; (1a38 <_UsageFault.isra.5+0x74>)
    19e2:	f7ff fad5 	bl	f90 <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    19e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    19e8:	0318      	lsls	r0, r3, #12
    19ea:	d502      	bpl.n	19f2 <_UsageFault.isra.5+0x2e>
		PR_FAULT_INFO("  No coprocessor instructions\n");
    19ec:	4813      	ldr	r0, [pc, #76]	; (1a3c <_UsageFault.isra.5+0x78>)
    19ee:	f7ff facf 	bl	f90 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    19f2:	4c0e      	ldr	r4, [pc, #56]	; (1a2c <_UsageFault.isra.5+0x68>)
    19f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    19f6:	0359      	lsls	r1, r3, #13
    19f8:	d502      	bpl.n	1a00 <_UsageFault.isra.5+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
    19fa:	4811      	ldr	r0, [pc, #68]	; (1a40 <_UsageFault.isra.5+0x7c>)
    19fc:	f7ff fac8 	bl	f90 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1a00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a02:	039a      	lsls	r2, r3, #14
    1a04:	d502      	bpl.n	1a0c <_UsageFault.isra.5+0x48>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
    1a06:	480f      	ldr	r0, [pc, #60]	; (1a44 <_UsageFault.isra.5+0x80>)
    1a08:	f7ff fac2 	bl	f90 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1a0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a0e:	03db      	lsls	r3, r3, #15
    1a10:	d502      	bpl.n	1a18 <_UsageFault.isra.5+0x54>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
    1a12:	480d      	ldr	r0, [pc, #52]	; (1a48 <_UsageFault.isra.5+0x84>)
    1a14:	f7ff fabc 	bl	f90 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1a18:	4a04      	ldr	r2, [pc, #16]	; (1a2c <_UsageFault.isra.5+0x68>)
    1a1a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1a1c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1a20:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1a24:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    1a26:	2000      	movs	r0, #0
    1a28:	bd10      	pop	{r4, pc}
    1a2a:	bf00      	nop
    1a2c:	e000ed00 	.word	0xe000ed00
    1a30:	00008ff4 	.word	0x00008ff4
    1a34:	0000900d 	.word	0x0000900d
    1a38:	00009021 	.word	0x00009021
    1a3c:	0000903c 	.word	0x0000903c
    1a40:	0000905b 	.word	0x0000905b
    1a44:	00009081 	.word	0x00009081
    1a48:	0000909c 	.word	0x0000909c

00001a4c <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
    1a4c:	b538      	push	{r3, r4, r5, lr}
	u32_t reason;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1a4e:	4c27      	ldr	r4, [pc, #156]	; (1aec <_Fault+0xa0>)
    1a50:	6863      	ldr	r3, [r4, #4]
    1a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    1a56:	1eda      	subs	r2, r3, #3
{
    1a58:	4605      	mov	r5, r0
	switch (fault) {
    1a5a:	2a09      	cmp	r2, #9
    1a5c:	d83a      	bhi.n	1ad4 <_Fault+0x88>
    1a5e:	e8df f002 	tbb	[pc, r2]
    1a62:	3305      	.short	0x3305
    1a64:	39393035 	.word	0x39393035
    1a68:	37393939 	.word	0x37393939
	PR_FAULT_INFO("***** HARD FAULT *****\n");
    1a6c:	4820      	ldr	r0, [pc, #128]	; (1af0 <_Fault+0xa4>)
    1a6e:	f7ff fa8f 	bl	f90 <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1a72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1a74:	079a      	lsls	r2, r3, #30
    1a76:	d503      	bpl.n	1a80 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    1a78:	481e      	ldr	r0, [pc, #120]	; (1af4 <_Fault+0xa8>)
	PR_FAULT_INFO(
    1a7a:	f7ff fa89 	bl	f90 <printk>
    1a7e:	e002      	b.n	1a86 <_Fault+0x3a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1a80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1a82:	005b      	lsls	r3, r3, #1
    1a84:	d405      	bmi.n	1a92 <_Fault+0x46>
	PR_FAULT_INFO(
    1a86:	2000      	movs	r0, #0

#if defined(CONFIG_ARM_SECURE_FIRMWARE)
_exit_fatal:
	reason = _NANO_ERR_HW_EXCEPTION;
#endif
	_NanoFatalErrorHandler(reason, esf);
    1a88:	4629      	mov	r1, r5
}
    1a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_NanoFatalErrorHandler(reason, esf);
    1a8e:	f000 b8ef 	b.w	1c70 <_NanoFatalErrorHandler>
		PR_EXC("  Fault escalation (see below)\n");
    1a92:	4819      	ldr	r0, [pc, #100]	; (1af8 <_Fault+0xac>)
    1a94:	f7ff fa7c 	bl	f90 <printk>
		if (SCB_MMFSR != 0) {
    1a98:	4b18      	ldr	r3, [pc, #96]	; (1afc <_Fault+0xb0>)
    1a9a:	781b      	ldrb	r3, [r3, #0]
    1a9c:	b12b      	cbz	r3, 1aaa <_Fault+0x5e>
			reason = _MpuFault(esf, 1);
    1a9e:	2001      	movs	r0, #1
		reason = _MpuFault(esf, 0);
    1aa0:	f7ff ff02 	bl	18a8 <_MpuFault.isra.2>
	if (reason == _NANO_ERR_RECOVERABLE) {
    1aa4:	2806      	cmp	r0, #6
    1aa6:	d1ef      	bne.n	1a88 <_Fault+0x3c>
    1aa8:	bd38      	pop	{r3, r4, r5, pc}
		} else if (SCB_BFSR != 0) {
    1aaa:	4b15      	ldr	r3, [pc, #84]	; (1b00 <_Fault+0xb4>)
    1aac:	781b      	ldrb	r3, [r3, #0]
    1aae:	b11b      	cbz	r3, 1ab8 <_Fault+0x6c>
			reason = _BusFault(esf, 1);
    1ab0:	2001      	movs	r0, #1
		reason = _BusFault(esf, 0);
    1ab2:	f7ff ff3d 	bl	1930 <_BusFault.isra.3>
    1ab6:	e7f5      	b.n	1aa4 <_Fault+0x58>
		} else if (SCB_UFSR != 0) {
    1ab8:	4b12      	ldr	r3, [pc, #72]	; (1b04 <_Fault+0xb8>)
    1aba:	881b      	ldrh	r3, [r3, #0]
    1abc:	b29b      	uxth	r3, r3
    1abe:	2b00      	cmp	r3, #0
    1ac0:	d0e1      	beq.n	1a86 <_Fault+0x3a>
		reason = _UsageFault(esf);
    1ac2:	f7ff ff7f 	bl	19c4 <_UsageFault.isra.5>
    1ac6:	e7ed      	b.n	1aa4 <_Fault+0x58>
		reason = _MpuFault(esf, 0);
    1ac8:	2000      	movs	r0, #0
    1aca:	e7e9      	b.n	1aa0 <_Fault+0x54>
		reason = _BusFault(esf, 0);
    1acc:	2000      	movs	r0, #0
    1ace:	e7f0      	b.n	1ab2 <_Fault+0x66>
	PR_FAULT_INFO(
    1ad0:	480d      	ldr	r0, [pc, #52]	; (1b08 <_Fault+0xbc>)
    1ad2:	e7d2      	b.n	1a7a <_Fault+0x2e>
	PR_FAULT_INFO("***** %s %d) *****\n",
    1ad4:	480d      	ldr	r0, [pc, #52]	; (1b0c <_Fault+0xc0>)
    1ad6:	490e      	ldr	r1, [pc, #56]	; (1b10 <_Fault+0xc4>)
    1ad8:	f1a3 0210 	sub.w	r2, r3, #16
    1adc:	2b0f      	cmp	r3, #15
    1ade:	bfd8      	it	le
    1ae0:	4601      	movle	r1, r0
    1ae2:	480c      	ldr	r0, [pc, #48]	; (1b14 <_Fault+0xc8>)
    1ae4:	f7ff fa54 	bl	f90 <printk>
    1ae8:	e7cd      	b.n	1a86 <_Fault+0x3a>
    1aea:	bf00      	nop
    1aec:	e000ed00 	.word	0xe000ed00
    1af0:	00008e92 	.word	0x00008e92
    1af4:	00008eaa 	.word	0x00008eaa
    1af8:	00008ecc 	.word	0x00008ecc
    1afc:	e000ed28 	.word	0xe000ed28
    1b00:	e000ed29 	.word	0xe000ed29
    1b04:	e000ed2a 	.word	0xe000ed2a
    1b08:	00008eec 	.word	0x00008eec
    1b0c:	00008e64 	.word	0x00008e64
    1b10:	00008e79 	.word	0x00008e79
    1b14:	00008f23 	.word	0x00008f23

00001b18 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1b18:	4a02      	ldr	r2, [pc, #8]	; (1b24 <_FaultInit+0xc>)
    1b1a:	6953      	ldr	r3, [r2, #20]
    1b1c:	f043 0310 	orr.w	r3, r3, #16
    1b20:	6153      	str	r3, [r2, #20]
    1b22:	4770      	bx	lr
    1b24:	e000ed00 	.word	0xe000ed00

00001b28 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1b28:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1b2a:	2b00      	cmp	r3, #0
    1b2c:	db08      	blt.n	1b40 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b2e:	2201      	movs	r2, #1
    1b30:	f000 001f 	and.w	r0, r0, #31
    1b34:	fa02 f000 	lsl.w	r0, r2, r0
    1b38:	095b      	lsrs	r3, r3, #5
    1b3a:	4a02      	ldr	r2, [pc, #8]	; (1b44 <_arch_irq_enable+0x1c>)
    1b3c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1b40:	4770      	bx	lr
    1b42:	bf00      	nop
    1b44:	e000e100 	.word	0xe000e100

00001b48 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1b48:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1b4a:	2b00      	cmp	r3, #0
    1b4c:	db0d      	blt.n	1b6a <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b4e:	2201      	movs	r2, #1
    1b50:	095b      	lsrs	r3, r3, #5
    1b52:	f000 001f 	and.w	r0, r0, #31
    1b56:	fa02 f000 	lsl.w	r0, r2, r0
    1b5a:	3320      	adds	r3, #32
    1b5c:	4a03      	ldr	r2, [pc, #12]	; (1b6c <_arch_irq_disable+0x24>)
    1b5e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1b62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b66:	f3bf 8f6f 	isb	sy
    1b6a:	4770      	bx	lr
    1b6c:	e000e100 	.word	0xe000e100

00001b70 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    1b70:	0942      	lsrs	r2, r0, #5
    1b72:	4b05      	ldr	r3, [pc, #20]	; (1b88 <_arch_irq_is_enabled+0x18>)
    1b74:	f000 001f 	and.w	r0, r0, #31
    1b78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1b7c:	2301      	movs	r3, #1
    1b7e:	fa03 f000 	lsl.w	r0, r3, r0
}
    1b82:	4010      	ands	r0, r2
    1b84:	4770      	bx	lr
    1b86:	bf00      	nop
    1b88:	e000e100 	.word	0xe000e100

00001b8c <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1b8c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1b8e:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b90:	bfa8      	it	ge
    1b92:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    1b96:	f101 0101 	add.w	r1, r1, #1
    1b9a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1b9e:	bfad      	iteet	ge
    1ba0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1ba4:	f000 000f 	andlt.w	r0, r0, #15
    1ba8:	4b03      	ldrlt	r3, [pc, #12]	; (1bb8 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1baa:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1bac:	bfb6      	itet	lt
    1bae:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1bb0:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1bb4:	5419      	strblt	r1, [r3, r0]
    1bb6:	4770      	bx	lr
    1bb8:	e000ed14 	.word	0xe000ed14

00001bbc <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    1bbc:	f000 b844 	b.w	1c48 <__bus_fault>

00001bc0 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    1bc0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    1bc2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    1bc4:	4b04      	ldr	r3, [pc, #16]	; (1bd8 <_arch_isr_direct_pm+0x18>)
    1bc6:	6a18      	ldr	r0, [r3, #32]
    1bc8:	b118      	cbz	r0, 1bd2 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    1bca:	2200      	movs	r2, #0
    1bcc:	621a      	str	r2, [r3, #32]
		_sys_power_save_idle_exit(idle_val);
    1bce:	f005 fef7 	bl	79c0 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    1bd2:	b662      	cpsie	i
    1bd4:	bd08      	pop	{r3, pc}
    1bd6:	bf00      	nop
    1bd8:	20000e50 	.word	0x20000e50

00001bdc <_arch_isr_direct_header>:

}
#endif

void _arch_isr_direct_header(void)
{
    1bdc:	4770      	bx	lr
	...

00001be0 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    1be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1be2:	460c      	mov	r4, r1
    1be4:	4616      	mov	r6, r2
    1be6:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1be8:	2204      	movs	r2, #4
    1bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1bec:	9909      	ldr	r1, [sp, #36]	; 0x24
    1bee:	4605      	mov	r5, r0
    1bf0:	f006 fce0 	bl	85b4 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1bf4:	f1a6 0120 	sub.w	r1, r6, #32
    1bf8:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1bfa:	4a0c      	ldr	r2, [pc, #48]	; (1c2c <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    1bfc:	65ac      	str	r4, [r5, #88]	; 0x58
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1bfe:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    1c02:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1c04:	f022 0201 	bic.w	r2, r2, #1
    1c08:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
    1c0a:	652b      	str	r3, [r5, #80]	; 0x50
	thread->stack_info.size = (u32_t)stackSize;
    1c0c:	65ee      	str	r6, [r5, #92]	; 0x5c
    1c0e:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    1c10:	9a06      	ldr	r2, [sp, #24]
    1c12:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1c14:	9a07      	ldr	r2, [sp, #28]
    1c16:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1c18:	9a08      	ldr	r2, [sp, #32]
    1c1a:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    1c1c:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    1c1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1c22:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1c24:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    1c26:	666b      	str	r3, [r5, #100]	; 0x64
    1c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c2a:	bf00      	nop
    1c2c:	000007c5 	.word	0x000007c5

00001c30 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    1c30:	4901      	ldr	r1, [pc, #4]	; (1c38 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    1c32:	2210      	movs	r2, #16
	str r2, [r1]
    1c34:	600a      	str	r2, [r1, #0]
	bx lr
    1c36:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1c38:	e000ed10 	.word	0xe000ed10

00001c3c <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1c3c:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1c3e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    1c42:	bf30      	wfi

	bx lr
    1c44:	4770      	bx	lr
    1c46:	bf00      	nop

00001c48 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1c48:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1c4a:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    1c4e:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1c6c <__bus_fault+0x24>
	ldr ip, [ip]
    1c52:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1c56:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1c5a:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1c5c:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    1c60:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    1c64:	b500      	push	{lr}
	bl _Fault
    1c66:	f7ff fef1 	bl	1a4c <_Fault>

	pop {pc}
    1c6a:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    1c6c:	e000ed04 	.word	0xe000ed04

00001c70 <_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    1c70:	b538      	push	{r3, r4, r5, lr}
    1c72:	4604      	mov	r4, r0
    1c74:	460d      	mov	r5, r1
	LOG_PANIC();

	switch (reason) {
    1c76:	2805      	cmp	r0, #5
    1c78:	d81a      	bhi.n	1cb0 <_NanoFatalErrorHandler+0x40>
    1c7a:	e8df f000 	tbb	[pc, r0]
    1c7e:	1903      	.short	0x1903
    1c80:	17151319 	.word	0x17151319
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
    1c84:	480d      	ldr	r0, [pc, #52]	; (1cbc <_NanoFatalErrorHandler+0x4c>)
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    1c86:	f7ff f983 	bl	f90 <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    1c8a:	f006 fb27 	bl	82dc <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    1c8e:	69aa      	ldr	r2, [r5, #24]
    1c90:	4601      	mov	r1, r0
    1c92:	480b      	ldr	r0, [pc, #44]	; (1cc0 <_NanoFatalErrorHandler+0x50>)
    1c94:	f7ff f97c 	bl	f90 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    1c98:	4629      	mov	r1, r5
    1c9a:	4620      	mov	r0, r4
}
    1c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    1ca0:	f000 b81c 	b.w	1cdc <_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
    1ca4:	4807      	ldr	r0, [pc, #28]	; (1cc4 <_NanoFatalErrorHandler+0x54>)
    1ca6:	e7ee      	b.n	1c86 <_NanoFatalErrorHandler+0x16>
		printk("***** Kernel OOPS! *****\n");
    1ca8:	4807      	ldr	r0, [pc, #28]	; (1cc8 <_NanoFatalErrorHandler+0x58>)
    1caa:	e7ec      	b.n	1c86 <_NanoFatalErrorHandler+0x16>
		printk("***** Kernel Panic! *****\n");
    1cac:	4807      	ldr	r0, [pc, #28]	; (1ccc <_NanoFatalErrorHandler+0x5c>)
    1cae:	e7ea      	b.n	1c86 <_NanoFatalErrorHandler+0x16>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    1cb0:	4601      	mov	r1, r0
    1cb2:	4807      	ldr	r0, [pc, #28]	; (1cd0 <_NanoFatalErrorHandler+0x60>)
    1cb4:	f7ff f96c 	bl	f90 <printk>
		break;
    1cb8:	e7e7      	b.n	1c8a <_NanoFatalErrorHandler+0x1a>
    1cba:	bf00      	nop
    1cbc:	000090c8 	.word	0x000090c8
    1cc0:	00009166 	.word	0x00009166
    1cc4:	000090e8 	.word	0x000090e8
    1cc8:	0000910e 	.word	0x0000910e
    1ccc:	00009128 	.word	0x00009128
    1cd0:	00009143 	.word	0x00009143

00001cd4 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    1cd4:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    1cd6:	6800      	ldr	r0, [r0, #0]
    1cd8:	f7ff bfca 	b.w	1c70 <_NanoFatalErrorHandler>

00001cdc <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1cdc:	2805      	cmp	r0, #5
{
    1cde:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1ce0:	d00c      	beq.n	1cfc <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1ce2:	f006 fb91 	bl	8408 <k_is_in_isr>
    1ce6:	b160      	cbz	r0, 1d02 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1ce8:	f006 fb8e 	bl	8408 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1cec:	4b0c      	ldr	r3, [pc, #48]	; (1d20 <_SysFatalErrorHandler+0x44>)
    1cee:	490d      	ldr	r1, [pc, #52]	; (1d24 <_SysFatalErrorHandler+0x48>)
    1cf0:	2800      	cmp	r0, #0
    1cf2:	bf08      	it	eq
    1cf4:	4619      	moveq	r1, r3
    1cf6:	480c      	ldr	r0, [pc, #48]	; (1d28 <_SysFatalErrorHandler+0x4c>)
    1cf8:	f7ff f94a 	bl	f90 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1cfc:	f7ff ff9e 	bl	1c3c <k_cpu_idle>
    1d00:	e7fc      	b.n	1cfc <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1d02:	f006 fb91 	bl	8428 <_is_thread_essential>
    1d06:	2800      	cmp	r0, #0
    1d08:	d1ee      	bne.n	1ce8 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1d0a:	4c08      	ldr	r4, [pc, #32]	; (1d2c <_SysFatalErrorHandler+0x50>)
    1d0c:	4808      	ldr	r0, [pc, #32]	; (1d30 <_SysFatalErrorHandler+0x54>)
    1d0e:	68a1      	ldr	r1, [r4, #8]
    1d10:	f7ff f93e 	bl	f90 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    1d14:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1d1a:	f000 b80b 	b.w	1d34 <_impl_k_thread_abort>
    1d1e:	bf00      	nop
    1d20:	000091a6 	.word	0x000091a6
    1d24:	000091a2 	.word	0x000091a2
    1d28:	000091b7 	.word	0x000091b7
    1d2c:	20000e50 	.word	0x20000e50
    1d30:	000091d7 	.word	0x000091d7

00001d34 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1d34:	b538      	push	{r3, r4, r5, lr}
    1d36:	4605      	mov	r5, r0
	__asm__ volatile(
    1d38:	f04f 0320 	mov.w	r3, #32
    1d3c:	f3ef 8411 	mrs	r4, BASEPRI
    1d40:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1d44:	f006 fbca 	bl	84dc <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1d48:	4b0a      	ldr	r3, [pc, #40]	; (1d74 <_impl_k_thread_abort+0x40>)
    1d4a:	689b      	ldr	r3, [r3, #8]
    1d4c:	429d      	cmp	r5, r3
    1d4e:	d10b      	bne.n	1d68 <_impl_k_thread_abort+0x34>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1d50:	4b09      	ldr	r3, [pc, #36]	; (1d78 <_impl_k_thread_abort+0x44>)
    1d52:	685a      	ldr	r2, [r3, #4]
    1d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1d58:	b912      	cbnz	r2, 1d60 <_impl_k_thread_abort+0x2c>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
    1d5a:	4620      	mov	r0, r4
    1d5c:	f7ff fd58 	bl	1810 <__swap>
			(void)_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1d60:	685a      	ldr	r2, [r3, #4]
    1d62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1d66:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1d68:	4620      	mov	r0, r4
}
    1d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1d6e:	f006 b967 	b.w	8040 <_reschedule>
    1d72:	bf00      	nop
    1d74:	20000e50 	.word	0x20000e50
    1d78:	e000ed00 	.word	0xe000ed00

00001d7c <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1d7c:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1d7e:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1d80:	4a0b      	ldr	r2, [pc, #44]	; (1db0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1d82:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    1d84:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1d86:	bf1e      	ittt	ne
	movne	r1, #0
    1d88:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1d8a:	6211      	strne	r1, [r2, #32]
		blxne	_sys_power_save_idle_exit
    1d8c:	f005 fe18 	blne	79c0 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1d90:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1d92:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1d96:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1d9a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1d9e:	4905      	ldr	r1, [pc, #20]	; (1db4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1da0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1da2:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1da4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1da6:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r0, =_IntExit
    1daa:	4803      	ldr	r0, [pc, #12]	; (1db8 <_isr_wrapper+0x3c>)
	bx r0
    1dac:	4700      	bx	r0
    1dae:	0000      	.short	0x0000
	ldr r2, =_kernel
    1db0:	20000e50 	.word	0x20000e50
	ldr r1, =_sw_isr_table
    1db4:	00008af0 	.word	0x00008af0
	ldr r0, =_IntExit
    1db8:	000017dd 	.word	0x000017dd

00001dbc <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1dbc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1dbe:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1dc2:	4806      	ldr	r0, [pc, #24]	; (1ddc <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1dc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1dc8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1dca:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1dce:	2002      	movs	r0, #2
    msr CONTROL, r0
    1dd0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1dd4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
    1dd8:	f000 f806 	bl	1de8 <_PrepC>
    ldr r0, =_interrupt_stack
    1ddc:	20001c10 	.word	0x20001c10

00001de0 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1de0:	bf30      	wfi
    b _SysNmiOnReset
    1de2:	f7ff bffd 	b.w	1de0 <_SysNmiOnReset>
    1de6:	bf00      	nop

00001de8 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1de8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1dea:	4b08      	ldr	r3, [pc, #32]	; (1e0c <_PrepC+0x24>)
    1dec:	4a08      	ldr	r2, [pc, #32]	; (1e10 <_PrepC+0x28>)
    1dee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1df2:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1df4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1df8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1dfc:	f005 fdfa 	bl	79f4 <_bss_zero>
	_data_copy();
    1e00:	f005 fe02 	bl	7a08 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0U;
#endif
	_IntLibInit();
    1e04:	f7ff fcf8 	bl	17f8 <_IntLibInit>
	_Cstart();
    1e08:	f005 fe22 	bl	7a50 <_Cstart>
    1e0c:	00000000 	.word	0x00000000
    1e10:	e000ed00 	.word	0xe000ed00

00001e14 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1e14:	b508      	push	{r3, lr}
	handler();
    1e16:	f7ff ffe3 	bl	1de0 <_SysNmiOnReset>
	_ExcExit();
}
    1e1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1e1e:	f7ff bcdd 	b.w	17dc <_ExcExit>
	...

00001e24 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1e24:	4b03      	ldr	r3, [pc, #12]	; (1e34 <arm_core_mpu_enable+0x10>)
    1e26:	2205      	movs	r2, #5
    1e28:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1e2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e2e:	f3bf 8f6f 	isb	sy
    1e32:	4770      	bx	lr
    1e34:	e000ed90 	.word	0xe000ed90

00001e38 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1e38:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1e3c:	4b01      	ldr	r3, [pc, #4]	; (1e44 <arm_core_mpu_disable+0xc>)
    1e3e:	2200      	movs	r2, #0
    1e40:	605a      	str	r2, [r3, #4]
    1e42:	4770      	bx	lr
    1e44:	e000ed90 	.word	0xe000ed90

00001e48 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    1e48:	4912      	ldr	r1, [pc, #72]	; (1e94 <arm_mpu_init+0x4c>)
{
    1e4a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1e4c:	680c      	ldr	r4, [r1, #0]
    1e4e:	2c08      	cmp	r4, #8
    1e50:	d81c      	bhi.n	1e8c <arm_mpu_init+0x44>
		return -1;
	}

	LOG_DBG("total region count: %d", _get_num_regions());

	arm_core_mpu_disable();
    1e52:	f7ff fff1 	bl	1e38 <arm_core_mpu_disable>
 *   The caller must provide a valid region index.
 */
static void _region_init(u32_t index, const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    1e56:	4810      	ldr	r0, [pc, #64]	; (1e98 <arm_mpu_init+0x50>)
    1e58:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	_mpu_init();

	/* Configure regions */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1e5a:	2200      	movs	r2, #0
    1e5c:	42a2      	cmp	r2, r4
    1e5e:	f101 010c 	add.w	r1, r1, #12
    1e62:	d103      	bne.n	1e6c <arm_mpu_init+0x24>
	if (size > 0) {
		_region_init(index, &region_conf);
	}
#endif

	arm_core_mpu_enable();
    1e64:	f7ff ffde 	bl	1e24 <arm_core_mpu_enable>
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
    1e68:	2000      	movs	r0, #0
    1e6a:	bd10      	pop	{r4, pc}
    1e6c:	6082      	str	r2, [r0, #8]
	/* Configure the region */
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1e6e:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    1e72:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1e76:	f043 0310 	orr.w	r3, r3, #16
    1e7a:	4313      	orrs	r3, r2
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1e7c:	60c3      	str	r3, [r0, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1e7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1e82:	f043 0301 	orr.w	r3, r3, #1
    1e86:	6103      	str	r3, [r0, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1e88:	3201      	adds	r2, #1
    1e8a:	e7e7      	b.n	1e5c <arm_mpu_init+0x14>
		return -1;
    1e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1e90:	bd10      	pop	{r4, pc}
    1e92:	bf00      	nop
    1e94:	00008d70 	.word	0x00008d70
    1e98:	e000ed90 	.word	0xe000ed90

00001e9c <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1e9c:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1e9e:	4603      	mov	r3, r0
    1ea0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1ea4:	b90a      	cbnz	r2, 1eaa <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1ea6:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1ea8:	4770      	bx	lr
		*d = *s;
    1eaa:	f803 2b01 	strb.w	r2, [r3], #1
    1eae:	e7f7      	b.n	1ea0 <strcpy+0x4>

00001eb0 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1eb0:	3801      	subs	r0, #1
    1eb2:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1eb4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1eb8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1ebc:	4293      	cmp	r3, r2
    1ebe:	d102      	bne.n	1ec6 <strcmp+0x16>
    1ec0:	2b00      	cmp	r3, #0
    1ec2:	d1f7      	bne.n	1eb4 <strcmp+0x4>
    1ec4:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1ec6:	1a98      	subs	r0, r3, r2
    1ec8:	4770      	bx	lr

00001eca <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1eca:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1ecc:	b182      	cbz	r2, 1ef0 <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1ece:	3a01      	subs	r2, #1
    1ed0:	460c      	mov	r4, r1
    1ed2:	4603      	mov	r3, r0
    1ed4:	d103      	bne.n	1ede <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1ed6:	781a      	ldrb	r2, [r3, #0]
    1ed8:	7820      	ldrb	r0, [r4, #0]
    1eda:	1a10      	subs	r0, r2, r0
    1edc:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1ede:	781e      	ldrb	r6, [r3, #0]
    1ee0:	7825      	ldrb	r5, [r4, #0]
    1ee2:	42ae      	cmp	r6, r5
    1ee4:	f100 0001 	add.w	r0, r0, #1
    1ee8:	f101 0101 	add.w	r1, r1, #1
    1eec:	d0ef      	beq.n	1ece <memcmp+0x4>
    1eee:	e7f2      	b.n	1ed6 <memcmp+0xc>
		return 0;
    1ef0:	4610      	mov	r0, r2
}
    1ef2:	bd70      	pop	{r4, r5, r6, pc}

00001ef4 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1ef4:	ea81 0300 	eor.w	r3, r1, r0
    1ef8:	f013 0f03 	tst.w	r3, #3
{
    1efc:	b570      	push	{r4, r5, r6, lr}
    1efe:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1f00:	d00b      	beq.n	1f1a <memcpy+0x26>
    1f02:	3b01      	subs	r3, #1
    1f04:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1f06:	4291      	cmp	r1, r2
    1f08:	d11b      	bne.n	1f42 <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1f0a:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
    1f0c:	2a00      	cmp	r2, #0
    1f0e:	d0fc      	beq.n	1f0a <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
    1f10:	f811 4b01 	ldrb.w	r4, [r1], #1
    1f14:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1f18:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1f1a:	079c      	lsls	r4, r3, #30
    1f1c:	d1f6      	bne.n	1f0c <memcpy+0x18>
    1f1e:	1f1e      	subs	r6, r3, #4
    1f20:	460d      	mov	r5, r1
    1f22:	1b54      	subs	r4, r2, r5
    1f24:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
    1f26:	2c03      	cmp	r4, #3
    1f28:	d806      	bhi.n	1f38 <memcpy+0x44>
    1f2a:	f022 0403 	bic.w	r4, r2, #3
    1f2e:	4421      	add	r1, r4
    1f30:	4423      	add	r3, r4
    1f32:	f002 0203 	and.w	r2, r2, #3
    1f36:	e7e4      	b.n	1f02 <memcpy+0xe>
			*(d_word++) = *(s_word++);
    1f38:	f855 4b04 	ldr.w	r4, [r5], #4
    1f3c:	f846 4f04 	str.w	r4, [r6, #4]!
    1f40:	e7ef      	b.n	1f22 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1f42:	f811 4b01 	ldrb.w	r4, [r1], #1
    1f46:	f803 4f01 	strb.w	r4, [r3, #1]!
    1f4a:	e7dc      	b.n	1f06 <memcpy+0x12>

00001f4c <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1f4c:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1f4e:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1f50:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1f52:	079c      	lsls	r4, r3, #30
    1f54:	d111      	bne.n	1f7a <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1f56:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1f5a:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1f5e:	461e      	mov	r6, r3
    1f60:	1b95      	subs	r5, r2, r6
    1f62:	441d      	add	r5, r3
    1f64:	2d03      	cmp	r5, #3
    1f66:	d80e      	bhi.n	1f86 <memset+0x3a>
    1f68:	f022 0403 	bic.w	r4, r2, #3
    1f6c:	4423      	add	r3, r4
    1f6e:	f002 0203 	and.w	r2, r2, #3
    1f72:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1f74:	4293      	cmp	r3, r2
    1f76:	d109      	bne.n	1f8c <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1f78:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1f7a:	2a00      	cmp	r2, #0
    1f7c:	d0fc      	beq.n	1f78 <memset+0x2c>
		*(d_byte++) = c_byte;
    1f7e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1f82:	3a01      	subs	r2, #1
    1f84:	e7e5      	b.n	1f52 <memset+0x6>
		*(d_word++) = c_word;
    1f86:	f846 4b04 	str.w	r4, [r6], #4
    1f8a:	e7e9      	b.n	1f60 <memset+0x14>
		*(d_byte++) = c_byte;
    1f8c:	f803 1b01 	strb.w	r1, [r3], #1
    1f90:	e7f0      	b.n	1f74 <memset+0x28>

00001f92 <atomic_or>:
{
    1f92:	b500      	push	{lr}
}
    1f94:	f3bf 8f5b 	dmb	ish
    1f98:	e850 3f00 	ldrex	r3, [r0]
    1f9c:	ea43 0201 	orr.w	r2, r3, r1
    1fa0:	e840 2e00 	strex	lr, r2, [r0]
    1fa4:	f1be 0f00 	cmp.w	lr, #0
    1fa8:	d1f6      	bne.n	1f98 <atomic_or+0x6>
    1faa:	f3bf 8f5b 	dmb	ish
    1fae:	4618      	mov	r0, r3
    1fb0:	f85d fb04 	ldr.w	pc, [sp], #4

00001fb4 <hci_cmd_done.isra.7>:

	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
	atomic_set(bt_dev.flags, flags);
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1fb4:	b570      	push	{r4, r5, r6, lr}
    1fb6:	4606      	mov	r6, r0
{
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1fb8:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1fba:	460d      	mov	r5, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1fbc:	f004 fdc2 	bl	6b44 <net_buf_pool_get>
    1fc0:	4b0e      	ldr	r3, [pc, #56]	; (1ffc <hci_cmd_done.isra.7+0x48>)
    1fc2:	4283      	cmp	r3, r0
    1fc4:	d119      	bne.n	1ffa <hci_cmd_done.isra.7+0x46>
			opcode, buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
	}

	if (cmd(buf)->opcode != opcode) {
    1fc6:	4628      	mov	r0, r5
    1fc8:	f004 fdc2 	bl	6b50 <net_buf_id>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
    1fcc:	4628      	mov	r0, r5
    1fce:	f004 fdbf 	bl	6b50 <net_buf_id>
    1fd2:	4c0b      	ldr	r4, [pc, #44]	; (2000 <hci_cmd_done.isra.7+0x4c>)
    1fd4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    1fd8:	6843      	ldr	r3, [r0, #4]
    1fda:	b173      	cbz	r3, 1ffa <hci_cmd_done.isra.7+0x46>
		cmd(buf)->status = status;
    1fdc:	4628      	mov	r0, r5
    1fde:	f004 fdb7 	bl	6b50 <net_buf_id>
    1fe2:	f804 6030 	strb.w	r6, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    1fe6:	4628      	mov	r0, r5
    1fe8:	f004 fdb2 	bl	6b50 <net_buf_id>
    1fec:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
	}
}
    1ff0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    1ff4:	6840      	ldr	r0, [r0, #4]
    1ff6:	f006 b980 	b.w	82fa <_impl_k_sem_give>
    1ffa:	bd70      	pop	{r4, r5, r6, pc}
    1ffc:	20002ac8 	.word	0x20002ac8
    2000:	20000040 	.word	0x20000040

00002004 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    2004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    2006:	4e0b      	ldr	r6, [pc, #44]	; (2034 <id_find+0x30>)
{
    2008:	4607      	mov	r7, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    200a:	2500      	movs	r5, #0
    200c:	79f3      	ldrb	r3, [r6, #7]
    200e:	b2ec      	uxtb	r4, r5
    2010:	42a3      	cmp	r3, r4
    2012:	d802      	bhi.n	201a <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    2014:	f06f 0401 	mvn.w	r4, #1
    2018:	e009      	b.n	202e <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    201a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    201e:	2207      	movs	r2, #7
    2020:	4431      	add	r1, r6
    2022:	4638      	mov	r0, r7
    2024:	f7ff ff51 	bl	1eca <memcmp>
    2028:	3501      	adds	r5, #1
    202a:	2800      	cmp	r0, #0
    202c:	d1ee      	bne.n	200c <id_find+0x8>
}
    202e:	4620      	mov	r0, r4
    2030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2032:	bf00      	nop
    2034:	20002818 	.word	0x20002818

00002038 <atomic_test_bit.constprop.22>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2038:	4b07      	ldr	r3, [pc, #28]	; (2058 <atomic_test_bit.constprop.22+0x20>)
    203a:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    203e:	0942      	lsrs	r2, r0, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2040:	eb03 0382 	add.w	r3, r3, r2, lsl #2

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    2044:	f000 001f 	and.w	r0, r0, #31
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    204a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    204e:	fa43 f000 	asr.w	r0, r3, r0
}
    2052:	f000 0001 	and.w	r0, r0, #1
    2056:	4770      	bx	lr
    2058:	20002818 	.word	0x20002818

0000205c <bt_hci_cmd_create>:
{
    205c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2060:	4680      	mov	r8, r0
    2062:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    2064:	4813      	ldr	r0, [pc, #76]	; (20b4 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    2066:	4d14      	ldr	r5, [pc, #80]	; (20b8 <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    2068:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    206c:	f004 fdfe 	bl	6c6c <net_buf_alloc_fixed>
    2070:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2072:	f100 0608 	add.w	r6, r0, #8
    2076:	2100      	movs	r1, #0
    2078:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    207a:	2700      	movs	r7, #0
    207c:	f004 fdfc 	bl	6c78 <net_buf_simple_reserve>
    2080:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    2082:	4620      	mov	r0, r4
    2084:	f004 fd64 	bl	6b50 <net_buf_id>
    2088:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    208c:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    2090:	4620      	mov	r0, r4
    2092:	f004 fd5d 	bl	6b50 <net_buf_id>
    2096:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    209a:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    209c:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    209e:	4630      	mov	r0, r6
    20a0:	f004 fe2e 	bl	6d00 <net_buf_simple_add>
	hdr->param_len = param_len;
    20a4:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    20a8:	f8a0 8000 	strh.w	r8, [r0]
}
    20ac:	4620      	mov	r0, r4
    20ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    20b2:	bf00      	nop
    20b4:	20002ac8 	.word	0x20002ac8
    20b8:	20000040 	.word	0x20000040

000020bc <bt_hci_cmd_send_sync>:
{
    20bc:	b570      	push	{r4, r5, r6, lr}
    20be:	4615      	mov	r5, r2
    20c0:	b086      	sub	sp, #24
	if (!buf) {
    20c2:	460c      	mov	r4, r1
    20c4:	b919      	cbnz	r1, 20ce <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    20c6:	f7ff ffc9 	bl	205c <bt_hci_cmd_create>
		if (!buf) {
    20ca:	4604      	mov	r4, r0
    20cc:	b368      	cbz	r0, 212a <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    20ce:	2201      	movs	r2, #1
    20d0:	2100      	movs	r1, #0
    20d2:	4668      	mov	r0, sp
    20d4:	f006 f908 	bl	82e8 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    20d8:	4620      	mov	r0, r4
    20da:	f004 fd39 	bl	6b50 <net_buf_id>
    20de:	4e14      	ldr	r6, [pc, #80]	; (2130 <bt_hci_cmd_send_sync+0x74>)
    20e0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    20e4:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    20e8:	4620      	mov	r0, r4
    20ea:	f004 fe05 	bl	6cf8 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    20ee:	4621      	mov	r1, r4
    20f0:	4810      	ldr	r0, [pc, #64]	; (2134 <bt_hci_cmd_send_sync+0x78>)
    20f2:	f004 fdc5 	bl	6c80 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    20f6:	f242 7110 	movw	r1, #10000	; 0x2710
    20fa:	4668      	mov	r0, sp
    20fc:	f006 f924 	bl	8348 <_impl_k_sem_take>
	if (cmd(buf)->status) {
    2100:	4620      	mov	r0, r4
    2102:	f004 fd25 	bl	6b50 <net_buf_id>
    2106:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    210a:	b130      	cbz	r0, 211a <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    210c:	4620      	mov	r0, r4
    210e:	f004 fdc5 	bl	6c9c <net_buf_unref>
		err = -EIO;
    2112:	f06f 0004 	mvn.w	r0, #4
}
    2116:	b006      	add	sp, #24
    2118:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    211a:	b10d      	cbz	r5, 2120 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    211c:	602c      	str	r4, [r5, #0]
    211e:	e7fa      	b.n	2116 <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    2120:	4620      	mov	r0, r4
    2122:	f004 fdbb 	bl	6c9c <net_buf_unref>
		err = 0;
    2126:	4628      	mov	r0, r5
    2128:	e7f5      	b.n	2116 <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    212a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    212e:	e7f2      	b.n	2116 <bt_hci_cmd_send_sync+0x5a>
    2130:	20000040 	.word	0x20000040
    2134:	200028bc 	.word	0x200028bc

00002138 <set_random_address>:
{
    2138:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    213a:	4d15      	ldr	r5, [pc, #84]	; (2190 <set_random_address+0x58>)
    213c:	2206      	movs	r2, #6
    213e:	f105 010a 	add.w	r1, r5, #10
    2142:	4606      	mov	r6, r0
    2144:	f7ff fec1 	bl	1eca <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2148:	4604      	mov	r4, r0
    214a:	b1d8      	cbz	r0, 2184 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    214c:	2106      	movs	r1, #6
    214e:	f242 0005 	movw	r0, #8197	; 0x2005
    2152:	f7ff ff83 	bl	205c <bt_hci_cmd_create>
	if (!buf) {
    2156:	4604      	mov	r4, r0
    2158:	b1b0      	cbz	r0, 2188 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    215a:	2206      	movs	r2, #6
    215c:	4631      	mov	r1, r6
    215e:	3008      	adds	r0, #8
    2160:	f004 fdd4 	bl	6d0c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2164:	4621      	mov	r1, r4
    2166:	2200      	movs	r2, #0
    2168:	f242 0005 	movw	r0, #8197	; 0x2005
    216c:	f7ff ffa6 	bl	20bc <bt_hci_cmd_send_sync>
	if (err) {
    2170:	4604      	mov	r4, r0
    2172:	b938      	cbnz	r0, 2184 <set_random_address+0x4c>
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    2174:	2206      	movs	r2, #6
    2176:	4631      	mov	r1, r6
    2178:	f105 000a 	add.w	r0, r5, #10
    217c:	f7ff feba 	bl	1ef4 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    2180:	2301      	movs	r3, #1
    2182:	726b      	strb	r3, [r5, #9]
}
    2184:	4620      	mov	r0, r4
    2186:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    2188:	f06f 0436 	mvn.w	r4, #54	; 0x36
    218c:	e7fa      	b.n	2184 <set_random_address+0x4c>
    218e:	bf00      	nop
    2190:	20002818 	.word	0x20002818

00002194 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    2194:	2301      	movs	r3, #1
{
    2196:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    2198:	2106      	movs	r1, #6
{
    219a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    219c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    21a0:	f002 f84e 	bl	4240 <bt_rand>
	if (err) {
    21a4:	b918      	cbnz	r0, 21ae <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    21a6:	79a3      	ldrb	r3, [r4, #6]
    21a8:	f063 033f 	orn	r3, r3, #63	; 0x3f
    21ac:	71a3      	strb	r3, [r4, #6]
}
    21ae:	bd10      	pop	{r4, pc}

000021b0 <id_create.isra.12>:

static void id_create(u8_t id, bt_addr_le_t *addr, u8_t *irk)
    21b0:	b530      	push	{r4, r5, lr}
    21b2:	4604      	mov	r4, r0
    21b4:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    21b6:	460d      	mov	r5, r1
    21b8:	b199      	cbz	r1, 21e2 <id_create.isra.12+0x32>
    21ba:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    21bc:	2207      	movs	r2, #7
    21be:	4669      	mov	r1, sp
    21c0:	4628      	mov	r0, r5
    21c2:	9300      	str	r3, [sp, #0]
    21c4:	f8cd 3003 	str.w	r3, [sp, #3]
    21c8:	f7ff fe7f 	bl	1eca <memcmp>
    21cc:	b148      	cbz	r0, 21e2 <id_create.isra.12+0x32>
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    21ce:	4810      	ldr	r0, [pc, #64]	; (2210 <id_create.isra.12+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    21d0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    21d4:	2207      	movs	r2, #7
    21d6:	4629      	mov	r1, r5
    21d8:	4420      	add	r0, r4
    21da:	f7ff fe8b 	bl	1ef4 <memcpy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
    21de:	b005      	add	sp, #20
    21e0:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    21e2:	a802      	add	r0, sp, #8
    21e4:	f7ff ffd6 	bl	2194 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    21e8:	a802      	add	r0, sp, #8
    21ea:	f7ff ff0b 	bl	2004 <id_find>
    21ee:	2800      	cmp	r0, #0
    21f0:	daf7      	bge.n	21e2 <id_create.isra.12+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    21f2:	4807      	ldr	r0, [pc, #28]	; (2210 <id_create.isra.12+0x60>)
    21f4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    21f8:	4404      	add	r4, r0
    21fa:	2207      	movs	r2, #7
    21fc:	a902      	add	r1, sp, #8
    21fe:	4620      	mov	r0, r4
    2200:	f7ff fe78 	bl	1ef4 <memcpy>
		if (addr) {
    2204:	2d00      	cmp	r5, #0
    2206:	d0ea      	beq.n	21de <id_create.isra.12+0x2e>
    2208:	2207      	movs	r2, #7
    220a:	4621      	mov	r1, r4
    220c:	4628      	mov	r0, r5
    220e:	e7e4      	b.n	21da <id_create.isra.12+0x2a>
    2210:	20002818 	.word	0x20002818

00002214 <bt_recv>:
{
    2214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (bt_buf_get_type(buf)) {
    2216:	7d06      	ldrb	r6, [r0, #20]
    2218:	2e01      	cmp	r6, #1
{
    221a:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    221c:	d10a      	bne.n	2234 <bt_recv+0x20>
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    221e:	6887      	ldr	r7, [r0, #8]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    2220:	783b      	ldrb	r3, [r7, #0]
    2222:	3b0e      	subs	r3, #14
    2224:	2b01      	cmp	r3, #1
    2226:	d80a      	bhi.n	223e <bt_recv+0x2a>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    2228:	4040      	eors	r0, r0
    222a:	f380 8811 	msr	BASEPRI, r0
    222e:	f04f 0004 	mov.w	r0, #4
    2232:	df02      	svc	2
		net_buf_unref(buf);
    2234:	f004 fd32 	bl	6c9c <net_buf_unref>
		return -EINVAL;
    2238:	f06f 0015 	mvn.w	r0, #21
    223c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_pull(buf, sizeof(*hdr));
    223e:	f100 0508 	add.w	r5, r0, #8
    2242:	2102      	movs	r1, #2
    2244:	4628      	mov	r0, r5
    2246:	f004 fd6a 	bl	6d1e <net_buf_simple_pull>
	switch (hdr->evt) {
    224a:	783b      	ldrb	r3, [r7, #0]
    224c:	2b3e      	cmp	r3, #62	; 0x3e
    224e:	d103      	bne.n	2258 <bt_recv+0x44>
	net_buf_pull(buf, sizeof(*evt));
    2250:	4631      	mov	r1, r6
    2252:	4628      	mov	r0, r5
    2254:	f004 fd63 	bl	6d1e <net_buf_simple_pull>
	net_buf_unref(buf);
    2258:	4620      	mov	r0, r4
    225a:	f004 fd1f 	bl	6c9c <net_buf_unref>
		return 0;
    225e:	2000      	movs	r0, #0
    2260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00002264 <bt_recv_prio>:
{
    2264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2266:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    2268:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    226a:	2b01      	cmp	r3, #1
{
    226c:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    226e:	d005      	beq.n	227c <bt_recv_prio+0x18>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    2270:	4040      	eors	r0, r0
    2272:	f380 8811 	msr	BASEPRI, r0
    2276:	f04f 0004 	mov.w	r0, #4
    227a:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    227c:	8983      	ldrh	r3, [r0, #12]
    227e:	2b01      	cmp	r3, #1
    2280:	d9f6      	bls.n	2270 <bt_recv_prio+0xc>
    2282:	7833      	ldrb	r3, [r6, #0]
    2284:	3b0e      	subs	r3, #14
    2286:	2b01      	cmp	r3, #1
    2288:	d8f2      	bhi.n	2270 <bt_recv_prio+0xc>
	net_buf_pull(buf, sizeof(*hdr));
    228a:	f100 0508 	add.w	r5, r0, #8
    228e:	2102      	movs	r1, #2
    2290:	4628      	mov	r0, r5
    2292:	f004 fd44 	bl	6d1e <net_buf_simple_pull>
	switch (hdr->evt) {
    2296:	7833      	ldrb	r3, [r6, #0]
    2298:	2b0e      	cmp	r3, #14
    229a:	d005      	beq.n	22a8 <bt_recv_prio+0x44>
    229c:	2b0f      	cmp	r3, #15
    229e:	d017      	beq.n	22d0 <bt_recv_prio+0x6c>
		net_buf_unref(buf);
    22a0:	4620      	mov	r0, r4
    22a2:	f004 fcfb 	bl	6c9c <net_buf_unref>
    22a6:	e7e3      	b.n	2270 <bt_recv_prio+0xc>
	u8_t status, ncmd = evt->ncmd;
    22a8:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    22aa:	2103      	movs	r1, #3
    22ac:	4628      	mov	r0, r5
	u8_t status, ncmd = evt->ncmd;
    22ae:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    22b0:	f004 fd35 	bl	6d1e <net_buf_simple_pull>
	status = buf->data[0];
    22b4:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    22b6:	4621      	mov	r1, r4
    22b8:	7818      	ldrb	r0, [r3, #0]
    22ba:	f7ff fe7b 	bl	1fb4 <hci_cmd_done.isra.7>
	if (ncmd) {
    22be:	b116      	cbz	r6, 22c6 <bt_recv_prio+0x62>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    22c0:	480a      	ldr	r0, [pc, #40]	; (22ec <bt_recv_prio+0x88>)
    22c2:	f006 f81a 	bl	82fa <_impl_k_sem_give>
	net_buf_unref(buf);
    22c6:	4620      	mov	r0, r4
    22c8:	f004 fce8 	bl	6c9c <net_buf_unref>
}
    22cc:	2000      	movs	r0, #0
    22ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    22d0:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    22d2:	2104      	movs	r1, #4
	u8_t ncmd = evt->ncmd;
    22d4:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    22d6:	4628      	mov	r0, r5
    22d8:	f004 fd21 	bl	6d1e <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    22dc:	4621      	mov	r1, r4
    22de:	7830      	ldrb	r0, [r6, #0]
    22e0:	f7ff fe68 	bl	1fb4 <hci_cmd_done.isra.7>
	if (ncmd) {
    22e4:	2f00      	cmp	r7, #0
    22e6:	d0ee      	beq.n	22c6 <bt_recv_prio+0x62>
    22e8:	e7ea      	b.n	22c0 <bt_recv_prio+0x5c>
    22ea:	bf00      	nop
    22ec:	200028a0 	.word	0x200028a0

000022f0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    22f0:	4a08      	ldr	r2, [pc, #32]	; (2314 <bt_hci_driver_register+0x24>)
    22f2:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
    22f6:	b93b      	cbnz	r3, 2308 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    22f8:	68c1      	ldr	r1, [r0, #12]
    22fa:	b141      	cbz	r1, 230e <bt_hci_driver_register+0x1e>
    22fc:	6901      	ldr	r1, [r0, #16]
    22fe:	b131      	cbz	r1, 230e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    2300:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
	return 0;
    2304:	4618      	mov	r0, r3
    2306:	4770      	bx	lr
		return -EALREADY;
    2308:	f06f 0044 	mvn.w	r0, #68	; 0x44
    230c:	4770      	bx	lr
		return -EINVAL;
    230e:	f06f 0015 	mvn.w	r0, #21
}
    2312:	4770      	bx	lr
    2314:	20002818 	.word	0x20002818

00002318 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, u8_t *irk)
{
    2318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    231a:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    231c:	4606      	mov	r6, r0
    231e:	b928      	cbnz	r0, 232c <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    2320:	b1f4      	cbz	r4, 2360 <bt_id_create+0x48>
			return -EINVAL;
    2322:	f06f 0515 	mvn.w	r5, #21
	}

	id_create(new_id, addr, irk);

	return new_id;
}
    2326:	4628      	mov	r0, r5
    2328:	b003      	add	sp, #12
    232a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    232c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    232e:	2207      	movs	r2, #7
    2330:	4669      	mov	r1, sp
    2332:	9300      	str	r3, [sp, #0]
    2334:	f8cd 3003 	str.w	r3, [sp, #3]
    2338:	f7ff fdc7 	bl	1eca <memcmp>
    233c:	2800      	cmp	r0, #0
    233e:	d0ef      	beq.n	2320 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    2340:	7833      	ldrb	r3, [r6, #0]
    2342:	2b01      	cmp	r3, #1
    2344:	d1ed      	bne.n	2322 <bt_id_create+0xa>
    2346:	79b3      	ldrb	r3, [r6, #6]
    2348:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    234c:	2bc0      	cmp	r3, #192	; 0xc0
    234e:	d1e8      	bne.n	2322 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    2350:	4630      	mov	r0, r6
    2352:	f7ff fe57 	bl	2004 <id_find>
    2356:	2800      	cmp	r0, #0
    2358:	dbe2      	blt.n	2320 <bt_id_create+0x8>
			return -EALREADY;
    235a:	f06f 0544 	mvn.w	r5, #68	; 0x44
    235e:	e7e2      	b.n	2326 <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    2360:	4f0c      	ldr	r7, [pc, #48]	; (2394 <bt_id_create+0x7c>)
    2362:	79fc      	ldrb	r4, [r7, #7]
    2364:	2c01      	cmp	r4, #1
    2366:	d011      	beq.n	238c <bt_id_create+0x74>
	new_id = bt_dev.id_count++;
    2368:	1c63      	adds	r3, r4, #1
    236a:	71fb      	strb	r3, [r7, #7]
    236c:	4625      	mov	r5, r4
	if (new_id == BT_ID_DEFAULT &&
    236e:	b944      	cbnz	r4, 2382 <bt_id_create+0x6a>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    2370:	2001      	movs	r0, #1
    2372:	f7ff fe61 	bl	2038 <atomic_test_bit.constprop.22>
	if (new_id == BT_ID_DEFAULT &&
    2376:	b920      	cbnz	r0, 2382 <bt_id_create+0x6a>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2378:	2108      	movs	r1, #8
    237a:	f107 0070 	add.w	r0, r7, #112	; 0x70
    237e:	f7ff fe08 	bl	1f92 <atomic_or>
	id_create(new_id, addr, irk);
    2382:	4631      	mov	r1, r6
    2384:	4620      	mov	r0, r4
    2386:	f7ff ff13 	bl	21b0 <id_create.isra.12>
	return new_id;
    238a:	e7cc      	b.n	2326 <bt_id_create+0xe>
		return -ENOMEM;
    238c:	f06f 050b 	mvn.w	r5, #11
    2390:	e7c9      	b.n	2326 <bt_id_create+0xe>
    2392:	bf00      	nop
    2394:	20002818 	.word	0x20002818

00002398 <bt_setup_id_addr>:
#elif defined(CONFIG_BT_CTLR)
uint8_t bt_read_static_addr(bt_addr_le_t *addr);
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_id_addr(void)
{
    2398:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    239c:	4d22      	ldr	r5, [pc, #136]	; (2428 <bt_setup_id_addr+0x90>)
    239e:	79e9      	ldrb	r1, [r5, #7]
    23a0:	2900      	cmp	r1, #0
    23a2:	d13b      	bne.n	241c <bt_setup_id_addr+0x84>
	if (!(bt_dev.vs_commands[1] & BIT(0))) {
    23a4:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
    23a8:	07db      	lsls	r3, r3, #31
    23aa:	d40d      	bmi.n	23c8 <bt_setup_id_addr+0x30>
		return 0;
    23ac:	2700      	movs	r7, #0
		bt_addr_le_t addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs);
    23ae:	71ef      	strb	r7, [r5, #7]
		if (bt_dev.id_count) {
    23b0:	2f00      	cmp	r7, #0
    23b2:	d033      	beq.n	241c <bt_setup_id_addr+0x84>
    23b4:	2400      	movs	r4, #0
			int i;

			for (i = 0; i < bt_dev.id_count; i++) {
    23b6:	79eb      	ldrb	r3, [r5, #7]
    23b8:	429c      	cmp	r4, r3
    23ba:	db26      	blt.n	240a <bt_setup_id_addr+0x72>
				id_create(i, &addrs[i], NULL);
			}

			return set_random_address(&bt_dev.id_addr[0].a);
    23bc:	481b      	ldr	r0, [pc, #108]	; (242c <bt_setup_id_addr+0x94>)
    23be:	f7ff febb 	bl	2138 <set_random_address>
		}
	}
#endif
	return bt_id_create(NULL, NULL);
}
    23c2:	b004      	add	sp, #16
    23c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    23c8:	aa01      	add	r2, sp, #4
    23ca:	f64f 4009 	movw	r0, #64521	; 0xfc09
    23ce:	f7ff fe75 	bl	20bc <bt_hci_cmd_send_sync>
	if (err) {
    23d2:	2800      	cmp	r0, #0
    23d4:	d1ea      	bne.n	23ac <bt_setup_id_addr+0x14>
	rp = (void *)rsp->data;
    23d6:	9b01      	ldr	r3, [sp, #4]
    23d8:	689e      	ldr	r6, [r3, #8]
	cnt = min(rp->num_addrs, CONFIG_BT_ID_MAX);
    23da:	7874      	ldrb	r4, [r6, #1]
    23dc:	3400      	adds	r4, #0
    23de:	bf18      	it	ne
    23e0:	2401      	movne	r4, #1
    23e2:	4627      	mov	r7, r4
		addr[i].type = BT_ADDR_LE_RANDOM;
    23e4:	f04f 0801 	mov.w	r8, #1
		bt_addr_copy(&addr[i].a, &rp->a[i].bdaddr);
    23e8:	3602      	adds	r6, #2
	for (i = 0; i < cnt; i++) {
    23ea:	4284      	cmp	r4, r0
    23ec:	dc03      	bgt.n	23f6 <bt_setup_id_addr+0x5e>
	net_buf_unref(rsp);
    23ee:	9801      	ldr	r0, [sp, #4]
    23f0:	f004 fc54 	bl	6c9c <net_buf_unref>
    23f4:	e7db      	b.n	23ae <bt_setup_id_addr+0x16>
	memcpy(dst, src, sizeof(*dst));
    23f6:	2206      	movs	r2, #6
    23f8:	4631      	mov	r1, r6
    23fa:	f10d 0009 	add.w	r0, sp, #9
		addr[i].type = BT_ADDR_LE_RANDOM;
    23fe:	f88d 8008 	strb.w	r8, [sp, #8]
    2402:	f7ff fd77 	bl	1ef4 <memcpy>
	for (i = 0; i < cnt; i++) {
    2406:	2001      	movs	r0, #1
    2408:	e7ef      	b.n	23ea <bt_setup_id_addr+0x52>
				id_create(i, &addrs[i], NULL);
    240a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    240e:	ab02      	add	r3, sp, #8
    2410:	b2e0      	uxtb	r0, r4
    2412:	4419      	add	r1, r3
    2414:	f7ff fecc 	bl	21b0 <id_create.isra.12>
			for (i = 0; i < bt_dev.id_count; i++) {
    2418:	3401      	adds	r4, #1
    241a:	e7cc      	b.n	23b6 <bt_setup_id_addr+0x1e>
	return bt_id_create(NULL, NULL);
    241c:	2100      	movs	r1, #0
    241e:	4608      	mov	r0, r1
    2420:	f7ff ff7a 	bl	2318 <bt_id_create>
    2424:	e7cd      	b.n	23c2 <bt_setup_id_addr+0x2a>
    2426:	bf00      	nop
    2428:	20002818 	.word	0x20002818
    242c:	20002819 	.word	0x20002819

00002430 <bt_init>:
{
    2430:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    2432:	4dbc      	ldr	r5, [pc, #752]	; (2724 <bt_init+0x2f4>)
    2434:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    2438:	6899      	ldr	r1, [r3, #8]
    243a:	f011 0101 	ands.w	r1, r1, #1
{
    243e:	b087      	sub	sp, #28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    2440:	d122      	bne.n	2488 <bt_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    2442:	aa01      	add	r2, sp, #4
    2444:	f640 4003 	movw	r0, #3075	; 0xc03
    2448:	f7ff fe38 	bl	20bc <bt_hci_cmd_send_sync>
		if (err) {
    244c:	4604      	mov	r4, r0
    244e:	2800      	cmp	r0, #0
    2450:	f040 8140 	bne.w	26d4 <bt_init+0x2a4>
	u8_t status = buf->data[0];
    2454:	9b01      	ldr	r3, [sp, #4]
    2456:	689b      	ldr	r3, [r3, #8]
	if (status) {
    2458:	781b      	ldrb	r3, [r3, #0]
    245a:	b993      	cbnz	r3, 2482 <bt_init+0x52>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    245c:	f3bf 8f5b 	dmb	ish
    2460:	462b      	mov	r3, r5
    2462:	f853 2f70 	ldr.w	r2, [r3, #112]!
    2466:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    246a:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    246e:	f3bf 8f5b 	dmb	ish
    2472:	e853 1f00 	ldrex	r1, [r3]
    2476:	e843 2000 	strex	r0, r2, [r3]
    247a:	2800      	cmp	r0, #0
    247c:	d1f9      	bne.n	2472 <bt_init+0x42>
    247e:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    2482:	9801      	ldr	r0, [sp, #4]
    2484:	f004 fc0a 	bl	6c9c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    2488:	aa01      	add	r2, sp, #4
    248a:	2100      	movs	r1, #0
    248c:	f241 0003 	movw	r0, #4099	; 0x1003
    2490:	f7ff fe14 	bl	20bc <bt_hci_cmd_send_sync>
	if (err) {
    2494:	4604      	mov	r4, r0
    2496:	2800      	cmp	r0, #0
    2498:	f040 811c 	bne.w	26d4 <bt_init+0x2a4>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    249c:	9b01      	ldr	r3, [sp, #4]
    249e:	48a2      	ldr	r0, [pc, #648]	; (2728 <bt_init+0x2f8>)
    24a0:	6899      	ldr	r1, [r3, #8]
    24a2:	2208      	movs	r2, #8
    24a4:	3101      	adds	r1, #1
    24a6:	f7ff fd25 	bl	1ef4 <memcpy>
	net_buf_unref(rsp);
    24aa:	9801      	ldr	r0, [sp, #4]
    24ac:	f004 fbf6 	bl	6c9c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    24b0:	4621      	mov	r1, r4
    24b2:	aa01      	add	r2, sp, #4
    24b4:	f241 0001 	movw	r0, #4097	; 0x1001
    24b8:	f7ff fe00 	bl	20bc <bt_hci_cmd_send_sync>
	if (err) {
    24bc:	4604      	mov	r4, r0
    24be:	2800      	cmp	r0, #0
    24c0:	f040 8108 	bne.w	26d4 <bt_init+0x2a4>
	read_local_ver_complete(rsp);
    24c4:	9801      	ldr	r0, [sp, #4]
    24c6:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    24c8:	785a      	ldrb	r2, [r3, #1]
    24ca:	742a      	strb	r2, [r5, #16]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    24cc:	78d9      	ldrb	r1, [r3, #3]
    24ce:	789a      	ldrb	r2, [r3, #2]
    24d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    24d4:	826a      	strh	r2, [r5, #18]
	bt_dev.lmp_version = rp->lmp_version;
    24d6:	791a      	ldrb	r2, [r3, #4]
    24d8:	746a      	strb	r2, [r5, #17]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    24da:	7a19      	ldrb	r1, [r3, #8]
    24dc:	79da      	ldrb	r2, [r3, #7]
    24de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    24e2:	82aa      	strh	r2, [r5, #20]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    24e4:	795a      	ldrb	r2, [r3, #5]
    24e6:	799b      	ldrb	r3, [r3, #6]
    24e8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    24ec:	82eb      	strh	r3, [r5, #22]
	net_buf_unref(rsp);
    24ee:	f004 fbd5 	bl	6c9c <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    24f2:	2003      	movs	r0, #3
    24f4:	f7ff fda0 	bl	2038 <atomic_test_bit.constprop.22>
    24f8:	4601      	mov	r1, r0
    24fa:	bb58      	cbnz	r0, 2554 <bt_init+0x124>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    24fc:	aa01      	add	r2, sp, #4
    24fe:	f241 0009 	movw	r0, #4105	; 0x1009
    2502:	f7ff fddb 	bl	20bc <bt_hci_cmd_send_sync>
		if (err) {
    2506:	4604      	mov	r4, r0
    2508:	2800      	cmp	r0, #0
    250a:	f040 80e3 	bne.w	26d4 <bt_init+0x2a4>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    250e:	9b01      	ldr	r3, [sp, #4]
    2510:	9002      	str	r0, [sp, #8]
    2512:	689e      	ldr	r6, [r3, #8]
    2514:	f8ad 000c 	strh.w	r0, [sp, #12]
    2518:	3601      	adds	r6, #1
	return memcmp(a, b, sizeof(*a));
    251a:	2206      	movs	r2, #6
    251c:	a902      	add	r1, sp, #8
    251e:	4630      	mov	r0, r6
    2520:	f7ff fcd3 	bl	1eca <memcmp>
    2524:	b198      	cbz	r0, 254e <bt_init+0x11e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    2526:	4b81      	ldr	r3, [pc, #516]	; (272c <bt_init+0x2fc>)
    2528:	6818      	ldr	r0, [r3, #0]
    252a:	9004      	str	r0, [sp, #16]
    252c:	889b      	ldrh	r3, [r3, #4]
    252e:	f8ad 3014 	strh.w	r3, [sp, #20]
    2532:	2206      	movs	r2, #6
    2534:	a904      	add	r1, sp, #16
    2536:	4630      	mov	r0, r6
    2538:	f7ff fcc7 	bl	1eca <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    253c:	b138      	cbz	r0, 254e <bt_init+0x11e>
	memcpy(dst, src, sizeof(*dst));
    253e:	2206      	movs	r2, #6
    2540:	4631      	mov	r1, r6
    2542:	487b      	ldr	r0, [pc, #492]	; (2730 <bt_init+0x300>)
    2544:	f7ff fcd6 	bl	1ef4 <memcpy>
	bt_dev.id_count = 1U;
    2548:	2301      	movs	r3, #1
	bt_dev.id_addr[0].type = BT_ADDR_LE_PUBLIC;
    254a:	702c      	strb	r4, [r5, #0]
	bt_dev.id_count = 1U;
    254c:	71eb      	strb	r3, [r5, #7]
		net_buf_unref(rsp);
    254e:	9801      	ldr	r0, [sp, #4]
    2550:	f004 fba4 	bl	6c9c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    2554:	aa01      	add	r2, sp, #4
    2556:	2100      	movs	r1, #0
    2558:	f241 0002 	movw	r0, #4098	; 0x1002
    255c:	f7ff fdae 	bl	20bc <bt_hci_cmd_send_sync>
	if (err) {
    2560:	4604      	mov	r4, r0
    2562:	2800      	cmp	r0, #0
    2564:	f040 80b6 	bne.w	26d4 <bt_init+0x2a4>
	memcpy(bt_dev.supported_commands, rp->commands,
    2568:	9b01      	ldr	r3, [sp, #4]
    256a:	4872      	ldr	r0, [pc, #456]	; (2734 <bt_init+0x304>)
    256c:	6899      	ldr	r1, [r3, #8]
    256e:	2240      	movs	r2, #64	; 0x40
    2570:	3101      	adds	r1, #1
    2572:	f7ff fcbf 	bl	1ef4 <memcpy>
	net_buf_unref(rsp);
    2576:	9801      	ldr	r0, [sp, #4]
    2578:	f004 fb90 	bl	6c9c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    257c:	7f2b      	ldrb	r3, [r5, #28]
    257e:	0659      	lsls	r1, r3, #25
    2580:	f140 80c0 	bpl.w	2704 <bt_init+0x2d4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    2584:	4621      	mov	r1, r4
    2586:	aa01      	add	r2, sp, #4
    2588:	f242 0003 	movw	r0, #8195	; 0x2003
    258c:	f7ff fd96 	bl	20bc <bt_hci_cmd_send_sync>
	if (err) {
    2590:	4604      	mov	r4, r0
    2592:	2800      	cmp	r0, #0
    2594:	f040 809e 	bne.w	26d4 <bt_init+0x2a4>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2598:	9b01      	ldr	r3, [sp, #4]
    259a:	4867      	ldr	r0, [pc, #412]	; (2738 <bt_init+0x308>)
    259c:	6899      	ldr	r1, [r3, #8]
    259e:	2208      	movs	r2, #8
    25a0:	3101      	adds	r1, #1
    25a2:	f7ff fca7 	bl	1ef4 <memcpy>
	net_buf_unref(rsp);
    25a6:	9801      	ldr	r0, [sp, #4]
    25a8:	f004 fb78 	bl	6c9c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    25ac:	7f2b      	ldrb	r3, [r5, #28]
    25ae:	069a      	lsls	r2, r3, #26
    25b0:	d575      	bpl.n	269e <bt_init+0x26e>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    25b2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    25b6:	071b      	lsls	r3, r3, #28
    25b8:	f100 808f 	bmi.w	26da <bt_init+0x2aa>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    25bc:	2108      	movs	r1, #8
    25be:	f242 0001 	movw	r0, #8193	; 0x2001
    25c2:	f7ff fd4b 	bl	205c <bt_hci_cmd_create>
	if (!buf) {
    25c6:	4604      	mov	r4, r0
    25c8:	2800      	cmp	r0, #0
    25ca:	d06f      	beq.n	26ac <bt_init+0x27c>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    25cc:	2108      	movs	r1, #8
    25ce:	4408      	add	r0, r1
    25d0:	f004 fb96 	bl	6d00 <net_buf_simple_add>
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    25d4:	2602      	movs	r6, #2
	dst[1] = val >> 8;
    25d6:	2200      	movs	r2, #0
	dst[0] = val;
    25d8:	7006      	strb	r6, [r0, #0]
	dst[1] = val >> 8;
    25da:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    25dc:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    25de:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    25e0:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    25e2:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    25e4:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    25e6:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    25e8:	4621      	mov	r1, r4
    25ea:	f242 0001 	movw	r0, #8193	; 0x2001
    25ee:	f7ff fd65 	bl	20bc <bt_hci_cmd_send_sync>
	if (err) {
    25f2:	4604      	mov	r4, r0
    25f4:	2800      	cmp	r0, #0
    25f6:	d16d      	bne.n	26d4 <bt_init+0x2a4>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    25f8:	2108      	movs	r1, #8
    25fa:	f640 4001 	movw	r0, #3073	; 0xc01
    25fe:	f7ff fd2d 	bl	205c <bt_hci_cmd_create>
	if (!buf) {
    2602:	4607      	mov	r7, r0
    2604:	2800      	cmp	r0, #0
    2606:	d051      	beq.n	26ac <bt_init+0x27c>
	ev = net_buf_add(buf, sizeof(*ev));
    2608:	2108      	movs	r1, #8
    260a:	4408      	add	r0, r1
    260c:	f004 fb78 	bl	6d00 <net_buf_simple_add>
    2610:	2380      	movs	r3, #128	; 0x80
    2612:	7043      	strb	r3, [r0, #1]
    2614:	2320      	movs	r3, #32
	dst[0] = val;
    2616:	7004      	strb	r4, [r0, #0]
    2618:	7084      	strb	r4, [r0, #2]
    261a:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    261c:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    261e:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    2620:	70c6      	strb	r6, [r0, #3]
    2622:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2624:	4622      	mov	r2, r4
    2626:	4639      	mov	r1, r7
    2628:	f640 4001 	movw	r0, #3073	; 0xc01
    262c:	f7ff fd46 	bl	20bc <bt_hci_cmd_send_sync>
	if (err) {
    2630:	4604      	mov	r4, r0
    2632:	2800      	cmp	r0, #0
    2634:	d14e      	bne.n	26d4 <bt_init+0x2a4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    2636:	4601      	mov	r1, r0
    2638:	aa01      	add	r2, sp, #4
    263a:	f64f 4001 	movw	r0, #64513	; 0xfc01
    263e:	f7ff fd3d 	bl	20bc <bt_hci_cmd_send_sync>
	if (err) {
    2642:	bb20      	cbnz	r0, 268e <bt_init+0x25e>
	net_buf_unref(rsp);
    2644:	9801      	ldr	r0, [sp, #4]
    2646:	f004 fb29 	bl	6c9c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    264a:	aa01      	add	r2, sp, #4
    264c:	4621      	mov	r1, r4
    264e:	f64f 4002 	movw	r0, #64514	; 0xfc02
    2652:	f7ff fd33 	bl	20bc <bt_hci_cmd_send_sync>
	if (err) {
    2656:	b9d0      	cbnz	r0, 268e <bt_init+0x25e>
	rp.cmds = (void *)rsp->data;
    2658:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    265a:	4838      	ldr	r0, [pc, #224]	; (273c <bt_init+0x30c>)
    265c:	6899      	ldr	r1, [r3, #8]
    265e:	4632      	mov	r2, r6
    2660:	3101      	adds	r1, #1
    2662:	f7ff fc47 	bl	1ef4 <memcpy>
	net_buf_unref(rsp);
    2666:	9801      	ldr	r0, [sp, #4]
    2668:	f004 fb18 	bl	6c9c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    266c:	aa01      	add	r2, sp, #4
    266e:	4621      	mov	r1, r4
    2670:	f64f 4003 	movw	r0, #64515	; 0xfc03
    2674:	f7ff fd22 	bl	20bc <bt_hci_cmd_send_sync>
	if (err) {
    2678:	b948      	cbnz	r0, 268e <bt_init+0x25e>
	rp.feat = (void *)rsp->data;
    267a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    267c:	4830      	ldr	r0, [pc, #192]	; (2740 <bt_init+0x310>)
    267e:	6899      	ldr	r1, [r3, #8]
    2680:	2201      	movs	r2, #1
    2682:	4411      	add	r1, r2
    2684:	f7ff fc36 	bl	1ef4 <memcpy>
	net_buf_unref(rsp);
    2688:	9801      	ldr	r0, [sp, #4]
    268a:	f004 fb07 	bl	6c9c <net_buf_unref>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    268e:	79eb      	ldrb	r3, [r5, #7]
    2690:	2b00      	cmp	r3, #0
    2692:	d13a      	bne.n	270a <bt_init+0x2da>
		err = bt_setup_id_addr();
    2694:	f7ff fe80 	bl	2398 <bt_setup_id_addr>
		if (err) {
    2698:	b3b8      	cbz	r0, 270a <bt_init+0x2da>
    269a:	4604      	mov	r4, r0
    269c:	e01a      	b.n	26d4 <bt_init+0x2a4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    269e:	2102      	movs	r1, #2
    26a0:	f640 406d 	movw	r0, #3181	; 0xc6d
    26a4:	f7ff fcda 	bl	205c <bt_hci_cmd_create>
		if (!buf) {
    26a8:	4606      	mov	r6, r0
    26aa:	b910      	cbnz	r0, 26b2 <bt_init+0x282>
		return -ENOBUFS;
    26ac:	f06f 0436 	mvn.w	r4, #54	; 0x36
    26b0:	e010      	b.n	26d4 <bt_init+0x2a4>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    26b2:	2102      	movs	r1, #2
    26b4:	3008      	adds	r0, #8
    26b6:	f004 fb23 	bl	6d00 <net_buf_simple_add>
		cp_le->le = 0x01;
    26ba:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    26bc:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    26be:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    26c0:	4622      	mov	r2, r4
    26c2:	4631      	mov	r1, r6
    26c4:	f640 406d 	movw	r0, #3181	; 0xc6d
    26c8:	f7ff fcf8 	bl	20bc <bt_hci_cmd_send_sync>
		if (err) {
    26cc:	4604      	mov	r4, r0
    26ce:	2800      	cmp	r0, #0
    26d0:	f43f af6f 	beq.w	25b2 <bt_init+0x182>
}
    26d4:	4620      	mov	r0, r4
    26d6:	b007      	add	sp, #28
    26d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    26da:	aa01      	add	r2, sp, #4
    26dc:	2100      	movs	r1, #0
    26de:	f242 001c 	movw	r0, #8220	; 0x201c
    26e2:	f7ff fceb 	bl	20bc <bt_hci_cmd_send_sync>
		if (err) {
    26e6:	4604      	mov	r4, r0
    26e8:	2800      	cmp	r0, #0
    26ea:	d1f3      	bne.n	26d4 <bt_init+0x2a4>
		le_read_supp_states_complete(rsp);
    26ec:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    26ee:	6883      	ldr	r3, [r0, #8]
    26f0:	f853 2f01 	ldr.w	r2, [r3, #1]!
    26f4:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    26f6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    26fa:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    26fe:	f004 facd 	bl	6c9c <net_buf_unref>
    2702:	e75b      	b.n	25bc <bt_init+0x18c>
		return -ENODEV;
    2704:	f06f 0412 	mvn.w	r4, #18
    2708:	e7e4      	b.n	26d4 <bt_init+0x2a4>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    270a:	2102      	movs	r1, #2
    270c:	480d      	ldr	r0, [pc, #52]	; (2744 <bt_init+0x314>)
    270e:	f7ff fc40 	bl	1f92 <atomic_or>
	if (bt_dev.id_count > 0) {
    2712:	79eb      	ldrb	r3, [r5, #7]
    2714:	2b00      	cmp	r3, #0
    2716:	d0dd      	beq.n	26d4 <bt_init+0x2a4>
    2718:	2104      	movs	r1, #4
    271a:	480a      	ldr	r0, [pc, #40]	; (2744 <bt_init+0x314>)
    271c:	f7ff fc39 	bl	1f92 <atomic_or>
    2720:	e7d8      	b.n	26d4 <bt_init+0x2a4>
    2722:	bf00      	nop
    2724:	20002818 	.word	0x20002818
    2728:	20002830 	.word	0x20002830
    272c:	00008cc4 	.word	0x00008cc4
    2730:	20002819 	.word	0x20002819
    2734:	20002838 	.word	0x20002838
    2738:	20002890 	.word	0x20002890
    273c:	20002879 	.word	0x20002879
    2740:	20002878 	.word	0x20002878
    2744:	20002888 	.word	0x20002888

00002748 <init_work>:
{
    2748:	b510      	push	{r4, lr}
	err = bt_init();
    274a:	f7ff fe71 	bl	2430 <bt_init>
	if (ready_cb) {
    274e:	4b03      	ldr	r3, [pc, #12]	; (275c <init_work+0x14>)
    2750:	681b      	ldr	r3, [r3, #0]
    2752:	b113      	cbz	r3, 275a <init_work+0x12>
}
    2754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2758:	4718      	bx	r3
    275a:	bd10      	pop	{r4, pc}
    275c:	20000050 	.word	0x20000050

00002760 <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    2760:	b538      	push	{r3, r4, r5, lr}
    2762:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    2764:	4805      	ldr	r0, [pc, #20]	; (277c <bt_buf_get_rx+0x1c>)
    2766:	f004 fa81 	bl	6c6c <net_buf_alloc_fixed>
#endif

	if (buf) {
    276a:	4604      	mov	r4, r0
    276c:	b120      	cbz	r0, 2778 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    276e:	2100      	movs	r1, #0
    2770:	3008      	adds	r0, #8
    2772:	f004 fa81 	bl	6c78 <net_buf_simple_reserve>
    2776:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    2778:	4620      	mov	r0, r4
    277a:	bd38      	pop	{r3, r4, r5, pc}
    277c:	20002ae8 	.word	0x20002ae8

00002780 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    2780:	b510      	push	{r4, lr}
    2782:	4601      	mov	r1, r0
    2784:	f04f 0320 	mov.w	r3, #32
    2788:	f3ef 8011 	mrs	r0, BASEPRI
    278c:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    2790:	4a0b      	ldr	r2, [pc, #44]	; (27c0 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    2792:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    2794:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
	bt_dev.sent_cmd = NULL;
    2798:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    279c:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    27a0:	b924      	cbnz	r4, 27ac <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    27a2:	2001      	movs	r0, #1
}
    27a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    27a8:	f7ff bfda 	b.w	2760 <bt_buf_get_rx>
    27ac:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    27ae:	f104 0008 	add.w	r0, r4, #8
    27b2:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    27b4:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    27b6:	4619      	mov	r1, r3
    27b8:	f004 fa5e 	bl	6c78 <net_buf_simple_reserve>
}
    27bc:	4620      	mov	r0, r4
    27be:	bd10      	pop	{r4, pc}
    27c0:	20002818 	.word	0x20002818

000027c4 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    27c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    27c6:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    27c8:	1dc3      	adds	r3, r0, #7
{
    27ca:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    27cc:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    27d0:	1e50      	subs	r0, r2, #1
{
    27d2:	460e      	mov	r6, r1
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    27d4:	b280      	uxth	r0, r0
{
    27d6:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    27d8:	801a      	strh	r2, [r3, #0]
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    27da:	2100      	movs	r1, #0
    27dc:	2204      	movs	r2, #4
    27de:	fb06 5000 	mla	r0, r6, r0, r5
    27e2:	f7ff fbb3 	bl	1f4c <memset>
    27e6:	3c02      	subs	r4, #2
    27e8:	b2a4      	uxth	r4, r4
		     sizeof(mem_pool));
	while (mem_count--) {
    27ea:	f64f 77ff 	movw	r7, #65535	; 0xffff
    27ee:	42bc      	cmp	r4, r7
    27f0:	d101      	bne.n	27f6 <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    27f2:	b003      	add	sp, #12
    27f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    27f6:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    27fa:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    27fc:	2204      	movs	r2, #4
    27fe:	1b80      	subs	r0, r0, r6
    2800:	eb0d 0102 	add.w	r1, sp, r2
    2804:	4428      	add	r0, r5
    2806:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    2808:	9301      	str	r3, [sp, #4]
    280a:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    280c:	f7ff fb72 	bl	1ef4 <memcpy>
    2810:	e7ed      	b.n	27ee <mem_init+0x2a>

00002812 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    2812:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    2814:	6805      	ldr	r5, [r0, #0]
{
    2816:	4606      	mov	r6, r0
	if (*mem_head) {
    2818:	b195      	cbz	r5, 2840 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    281a:	1deb      	adds	r3, r5, #7
    281c:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    2820:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    2822:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    2824:	4629      	mov	r1, r5
    2826:	eb0d 0002 	add.w	r0, sp, r2
    282a:	f7ff fb63 	bl	1ef4 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    282e:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    2830:	3c01      	subs	r4, #1
    2832:	b2a4      	uxth	r4, r4
		if (head) {
    2834:	b11b      	cbz	r3, 283e <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    2836:	1dda      	adds	r2, r3, #7
    2838:	f022 0203 	bic.w	r2, r2, #3
    283c:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    283e:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    2840:	4628      	mov	r0, r5
    2842:	b002      	add	sp, #8
    2844:	bd70      	pop	{r4, r5, r6, pc}

00002846 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    2846:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    2848:	680c      	ldr	r4, [r1, #0]
{
    284a:	4606      	mov	r6, r0
    284c:	460d      	mov	r5, r1
	if (*mem_head) {
    284e:	b11c      	cbz	r4, 2858 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    2850:	1de3      	adds	r3, r4, #7
    2852:	f023 0303 	bic.w	r3, r3, #3
    2856:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    2858:	2204      	movs	r2, #4
    285a:	4629      	mov	r1, r5
    285c:	4630      	mov	r0, r6
    285e:	f7ff fb49 	bl	1ef4 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    2862:	1df2      	adds	r2, r6, #7
    2864:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    2868:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    286a:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    286c:	602e      	str	r6, [r5, #0]
    286e:	bd70      	pop	{r4, r5, r6, pc}

00002870 <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    2870:	fb02 0001 	mla	r0, r2, r1, r0
    2874:	4770      	bx	lr

00002876 <mem_rcopy>:
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
}

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    2876:	b510      	push	{r4, lr}
	src += len;
    2878:	4411      	add	r1, r2
    287a:	3801      	subs	r0, #1
	while (len--) {
    287c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2880:	3a01      	subs	r2, #1
    2882:	b292      	uxth	r2, r2
    2884:	429a      	cmp	r2, r3
    2886:	d100      	bne.n	288a <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    2888:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    288a:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    288e:	f800 4f01 	strb.w	r4, [r0, #1]!
    2892:	e7f5      	b.n	2880 <mem_rcopy+0xa>

00002894 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    2894:	6010      	str	r0, [r2, #0]
    2896:	6008      	str	r0, [r1, #0]

	return link;
}
    2898:	4770      	bx	lr

0000289a <memq_enqueue>:

	return link;
}

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    289a:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    289c:	6814      	ldr	r4, [r2, #0]
    289e:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    28a0:	6814      	ldr	r4, [r2, #0]
    28a2:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    28a4:	6010      	str	r0, [r2, #0]

	return link;
}
    28a6:	bd10      	pop	{r4, pc}

000028a8 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    28a8:	4288      	cmp	r0, r1
    28aa:	d003      	beq.n	28b4 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    28ac:	b11a      	cbz	r2, 28b6 <memq_peek+0xe>
		*mem = head->mem;
    28ae:	6843      	ldr	r3, [r0, #4]
    28b0:	6013      	str	r3, [r2, #0]
    28b2:	4770      	bx	lr
		return NULL;
    28b4:	2000      	movs	r0, #0
	}

	return head;
}
    28b6:	4770      	bx	lr

000028b8 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    28b8:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    28ba:	4283      	cmp	r3, r0
    28bc:	d009      	beq.n	28d2 <memq_dequeue+0x1a>
	if (mem) {
    28be:	b122      	cbz	r2, 28ca <memq_dequeue+0x12>
		*mem = head->mem;
    28c0:	6858      	ldr	r0, [r3, #4]
    28c2:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    28c4:	681a      	ldr	r2, [r3, #0]
    28c6:	600a      	str	r2, [r1, #0]

	return link;
    28c8:	e001      	b.n	28ce <memq_dequeue+0x16>
	if (!link) {
    28ca:	2b00      	cmp	r3, #0
    28cc:	d1fa      	bne.n	28c4 <memq_dequeue+0xc>
}
    28ce:	4618      	mov	r0, r3
    28d0:	4770      	bx	lr
		return NULL;
    28d2:	2300      	movs	r3, #0
    28d4:	e7fb      	b.n	28ce <memq_dequeue+0x16>
	...

000028d8 <mayfly_init>:
#if defined(CONFIG_MAYFLY_UT)
static u8_t _state;
#endif /* CONFIG_MAYFLY_UT */

void mayfly_init(void)
{
    28d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    28dc:	4f11      	ldr	r7, [pc, #68]	; (2924 <mayfly_init+0x4c>)
    28de:	f8df 9048 	ldr.w	r9, [pc, #72]	; 2928 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    28e2:	2604      	movs	r6, #4
	while (callee_id--) {
    28e4:	3e01      	subs	r6, #1
    28e6:	b2f6      	uxtb	r6, r6
    28e8:	2eff      	cmp	r6, #255	; 0xff
    28ea:	d019      	beq.n	2920 <mayfly_init+0x48>
    28ec:	b233      	sxth	r3, r6
    28ee:	ea4f 0883 	mov.w	r8, r3, lsl #2
    28f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    28f6:	011d      	lsls	r5, r3, #4
    28f8:	2404      	movs	r4, #4
    28fa:	f04f 0a0c 	mov.w	sl, #12
    28fe:	e00a      	b.n	2916 <mayfly_init+0x3e>
    2900:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    2904:	1d0a      	adds	r2, r1, #4
    2906:	eb04 0008 	add.w	r0, r4, r8
    290a:	443a      	add	r2, r7
    290c:	4439      	add	r1, r7
    290e:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    2912:	f7ff ffbf 	bl	2894 <memq_init>
		while (caller_id--) {
    2916:	3c01      	subs	r4, #1
    2918:	b2e4      	uxtb	r4, r4
    291a:	2cff      	cmp	r4, #255	; 0xff
    291c:	d1f0      	bne.n	2900 <mayfly_init+0x28>
    291e:	e7e1      	b.n	28e4 <mayfly_init+0xc>
    2920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2924:	200000d8 	.word	0x200000d8
    2928:	20000054 	.word	0x20000054

0000292c <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    292c:	b4f0      	push	{r4, r5, r6, r7}
    292e:	4b12      	ldr	r3, [pc, #72]	; (2978 <mayfly_enable+0x4c>)
    2930:	4605      	mov	r5, r0
    2932:	460f      	mov	r7, r1
    2934:	260c      	movs	r6, #12
    2936:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    2938:	b172      	cbz	r2, 2958 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    293a:	4361      	muls	r1, r4
    293c:	fb06 1400 	mla	r4, r6, r0, r1
    2940:	4423      	add	r3, r4
    2942:	7a59      	ldrb	r1, [r3, #9]
    2944:	7a18      	ldrb	r0, [r3, #8]
    2946:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    2948:	bf04      	itt	eq
    294a:	3101      	addeq	r1, #1
    294c:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    294e:	4628      	mov	r0, r5
    2950:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    2952:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    2954:	f004 b862 	b.w	6a1c <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    2958:	434c      	muls	r4, r1
    295a:	fb06 4400 	mla	r4, r6, r0, r4
    295e:	4423      	add	r3, r4
    2960:	7a9c      	ldrb	r4, [r3, #10]
    2962:	7ada      	ldrb	r2, [r3, #11]
    2964:	42a2      	cmp	r2, r4
    2966:	d104      	bne.n	2972 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    2968:	3201      	adds	r2, #1
    296a:	729a      	strb	r2, [r3, #10]
}
    296c:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    296e:	f004 b883 	b.w	6a78 <mayfly_pend>
}
    2972:	bcf0      	pop	{r4, r5, r6, r7}
    2974:	4770      	bx	lr
    2976:	bf00      	nop
    2978:	200000d8 	.word	0x200000d8

0000297c <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    297c:	b570      	push	{r4, r5, r6, lr}
    297e:	4606      	mov	r6, r0
    2980:	460d      	mov	r5, r1
    2982:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    2984:	b1a2      	cbz	r2, 29b0 <mayfly_enqueue+0x34>
    2986:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    2988:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    298a:	7820      	ldrb	r0, [r4, #0]
    298c:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    298e:	f010 0003 	ands.w	r0, r0, #3
    2992:	d02c      	beq.n	29ee <mayfly_enqueue+0x72>
		if (chain) {
    2994:	b31b      	cbz	r3, 29de <mayfly_enqueue+0x62>
			if (state != 1) {
    2996:	2801      	cmp	r0, #1
    2998:	d028      	beq.n	29ec <mayfly_enqueue+0x70>
				/* mark as ready in queue */
				m->_req = ack + 1;
    299a:	3201      	adds	r2, #1
    299c:	b2d2      	uxtb	r2, r2
    299e:	7022      	strb	r2, [r4, #0]
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1;
    29a0:	4b1c      	ldr	r3, [pc, #112]	; (2a14 <mayfly_enqueue+0x98>)
    29a2:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    29a4:	4629      	mov	r1, r5
    29a6:	4630      	mov	r0, r6
	mfp[callee_id] = 1;
    29a8:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    29aa:	f004 f865 	bl	6a78 <mayfly_pend>
    29ae:	e01c      	b.n	29ea <mayfly_enqueue+0x6e>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    29b0:	f004 f850 	bl	6a54 <mayfly_prio_is_equal>
    29b4:	2800      	cmp	r0, #0
    29b6:	d0e6      	beq.n	2986 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    29b8:	4629      	mov	r1, r5
    29ba:	4630      	mov	r0, r6
    29bc:	f004 f83c 	bl	6a38 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    29c0:	2800      	cmp	r0, #0
    29c2:	d0e0      	beq.n	2986 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    29c4:	2330      	movs	r3, #48	; 0x30
    29c6:	220c      	movs	r2, #12
    29c8:	436b      	muls	r3, r5
    29ca:	fb02 3306 	mla	r3, r2, r6, r3
    29ce:	4a12      	ldr	r2, [pc, #72]	; (2a18 <mayfly_enqueue+0x9c>)
    29d0:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    29d2:	7a93      	ldrb	r3, [r2, #10]
    29d4:	7ad2      	ldrb	r2, [r2, #11]
    29d6:	1a9b      	subs	r3, r3, r2
    29d8:	bf18      	it	ne
    29da:	2301      	movne	r3, #1
    29dc:	e7d4      	b.n	2988 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    29de:	3202      	adds	r2, #2
    29e0:	b2d2      	uxtb	r2, r2
    29e2:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    29e4:	68e3      	ldr	r3, [r4, #12]
    29e6:	68a0      	ldr	r0, [r4, #8]
    29e8:	4798      	blx	r3

	return 0;
    29ea:	2000      	movs	r0, #0
}
    29ec:	bd70      	pop	{r4, r5, r6, pc}
	if (!chain) {
    29ee:	2b00      	cmp	r3, #0
    29f0:	d0f8      	beq.n	29e4 <mayfly_enqueue+0x68>
	m->_req = ack + 1;
    29f2:	3201      	adds	r2, #1
    29f4:	b2d2      	uxtb	r2, r2
    29f6:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    29f8:	2304      	movs	r3, #4
    29fa:	2230      	movs	r2, #48	; 0x30
    29fc:	fb12 3205 	smlabb	r2, r2, r5, r3
    2a00:	230c      	movs	r3, #12
    2a02:	fb13 2306 	smlabb	r3, r3, r6, r2
    2a06:	4a04      	ldr	r2, [pc, #16]	; (2a18 <mayfly_enqueue+0x9c>)
    2a08:	6860      	ldr	r0, [r4, #4]
    2a0a:	441a      	add	r2, r3
    2a0c:	4621      	mov	r1, r4
    2a0e:	f7ff ff44 	bl	289a <memq_enqueue>
    2a12:	e7c5      	b.n	29a0 <mayfly_enqueue+0x24>
    2a14:	200000d4 	.word	0x200000d4
    2a18:	200000d8 	.word	0x200000d8

00002a1c <mayfly_run>:
		}
	}
}

void mayfly_run(u8_t callee_id)
{
    2a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t disable = 0U;
	u8_t enable = 0U;
	u8_t caller_id;

	if (!mfp[callee_id]) {
    2a20:	4b52      	ldr	r3, [pc, #328]	; (2b6c <mayfly_run+0x150>)
    2a22:	5c1a      	ldrb	r2, [r3, r0]
{
    2a24:	b08b      	sub	sp, #44	; 0x2c
    2a26:	4606      	mov	r6, r0
	if (!mfp[callee_id]) {
    2a28:	2a00      	cmp	r2, #0
    2a2a:	f000 809b 	beq.w	2b64 <mayfly_run+0x148>
		return;
	}
	mfp[callee_id] = 1;
    2a2e:	2201      	movs	r2, #1
    2a30:	541a      	strb	r2, [r3, r0]
    2a32:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2a36:	011b      	lsls	r3, r3, #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    2a38:	4d4d      	ldr	r5, [pc, #308]	; (2b70 <mayfly_run+0x154>)
    2a3a:	9306      	str	r3, [sp, #24]
    2a3c:	2404      	movs	r4, #4
    2a3e:	233c      	movs	r3, #60	; 0x3c
    2a40:	fb13 4300 	smlabb	r3, r3, r0, r4
    2a44:	18eb      	adds	r3, r5, r3
	u8_t enable = 0U;
    2a46:	f04f 0a00 	mov.w	sl, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    2a4a:	f04f 0830 	mov.w	r8, #48	; 0x30
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    2a4e:	9305      	str	r3, [sp, #20]
	u8_t disable = 0U;
    2a50:	f8cd a004 	str.w	sl, [sp, #4]
		link = memq_peek(mft[callee_id][caller_id].head,
    2a54:	fb08 f800 	mul.w	r8, r8, r0
    2a58:	46ab      	mov	fp, r5
	while (caller_id--) {
    2a5a:	3c01      	subs	r4, #1
    2a5c:	b2e4      	uxtb	r4, r4
    2a5e:	2cff      	cmp	r4, #255	; 0xff
    2a60:	d10b      	bne.n	2a7a <mayfly_run+0x5e>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    2a62:	9b01      	ldr	r3, [sp, #4]
    2a64:	2b00      	cmp	r3, #0
    2a66:	d07d      	beq.n	2b64 <mayfly_run+0x148>
    2a68:	f1ba 0f00 	cmp.w	sl, #0
    2a6c:	d17a      	bne.n	2b64 <mayfly_run+0x148>
		mayfly_enable_cb(callee_id, callee_id, 0);
    2a6e:	4652      	mov	r2, sl
    2a70:	4631      	mov	r1, r6
    2a72:	4630      	mov	r0, r6
    2a74:	f003 ffd2 	bl	6a1c <mayfly_enable_cb>
    2a78:	e074      	b.n	2b64 <mayfly_run+0x148>
		struct mayfly *m = 0;
    2a7a:	aa0a      	add	r2, sp, #40	; 0x28
    2a7c:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    2a7e:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    2a80:	f842 3d04 	str.w	r3, [r2, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    2a84:	fb07 f304 	mul.w	r3, r7, r4
    2a88:	eb03 0008 	add.w	r0, r3, r8
    2a8c:	1829      	adds	r1, r5, r0
    2a8e:	5828      	ldr	r0, [r5, r0]
    2a90:	6849      	ldr	r1, [r1, #4]
    2a92:	9302      	str	r3, [sp, #8]
    2a94:	f7ff ff08 	bl	28a8 <memq_peek>
		memq_dequeue(mft[callee_id][caller_id].tail,
    2a98:	9b06      	ldr	r3, [sp, #24]
    2a9a:	fb17 3704 	smlabb	r7, r7, r4, r3
    2a9e:	19eb      	adds	r3, r5, r7
    2aa0:	9304      	str	r3, [sp, #16]
    2aa2:	9b02      	ldr	r3, [sp, #8]
    2aa4:	9303      	str	r3, [sp, #12]
		link = memq_peek(mft[callee_id][caller_id].head,
    2aa6:	4681      	mov	r9, r0
		while (link) {
    2aa8:	f1b9 0f00 	cmp.w	r9, #0
    2aac:	d115      	bne.n	2ada <mayfly_run+0xbe>
		if (mft[callee_id][caller_id].disable_req !=
    2aae:	230c      	movs	r3, #12
    2ab0:	fb03 8204 	mla	r2, r3, r4, r8
    2ab4:	445a      	add	r2, fp
		if (mft[callee_id][caller_id].enable_req !=
    2ab6:	fb03 8304 	mla	r3, r3, r4, r8
		if (mft[callee_id][caller_id].disable_req !=
    2aba:	7a91      	ldrb	r1, [r2, #10]
    2abc:	7ad0      	ldrb	r0, [r2, #11]
		if (mft[callee_id][caller_id].enable_req !=
    2abe:	445b      	add	r3, fp
		if (mft[callee_id][caller_id].disable_req !=
    2ac0:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    2ac2:	bf1e      	ittt	ne
    2ac4:	72d1      	strbne	r1, [r2, #11]
			disable = 1U;
    2ac6:	2201      	movne	r2, #1
    2ac8:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    2aca:	7a59      	ldrb	r1, [r3, #9]
    2acc:	7a1a      	ldrb	r2, [r3, #8]
    2ace:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    2ad0:	bf1c      	itt	ne
    2ad2:	725a      	strbne	r2, [r3, #9]
			enable = 1U;
    2ad4:	f04f 0a01 	movne.w	sl, #1
    2ad8:	e7bf      	b.n	2a5a <mayfly_run+0x3e>
			state = (m->_req - m->_ack) & 0x03;
    2ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2adc:	7819      	ldrb	r1, [r3, #0]
    2ade:	785a      	ldrb	r2, [r3, #1]
    2ae0:	1a89      	subs	r1, r1, r2
    2ae2:	f001 0103 	and.w	r1, r1, #3
			if (state == 1) {
    2ae6:	2901      	cmp	r1, #1
			state = (m->_req - m->_ack) & 0x03;
    2ae8:	9102      	str	r1, [sp, #8]
			if (state == 1) {
    2aea:	d104      	bne.n	2af6 <mayfly_run+0xda>
				m->_ack--;
    2aec:	3a01      	subs	r2, #1
    2aee:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    2af0:	6898      	ldr	r0, [r3, #8]
    2af2:	68da      	ldr	r2, [r3, #12]
    2af4:	4790      	blx	r2
			dequeue(callee_id, caller_id, link, m);
    2af6:	9f09      	ldr	r7, [sp, #36]	; 0x24
	req = m->_req;
    2af8:	783b      	ldrb	r3, [r7, #0]
	if (((req - m->_ack) & 0x03) != 1) {
    2afa:	787a      	ldrb	r2, [r7, #1]
	req = m->_req;
    2afc:	b2db      	uxtb	r3, r3
	if (((req - m->_ack) & 0x03) != 1) {
    2afe:	1a9a      	subs	r2, r3, r2
    2b00:	f002 0203 	and.w	r2, r2, #3
    2b04:	2a01      	cmp	r2, #1
    2b06:	9307      	str	r3, [sp, #28]
    2b08:	d019      	beq.n	2b3e <mayfly_run+0x122>
		memq_dequeue(mft[callee_id][caller_id].tail,
    2b0a:	9b03      	ldr	r3, [sp, #12]
    2b0c:	9904      	ldr	r1, [sp, #16]
    2b0e:	eb03 0008 	add.w	r0, r3, r8
    2b12:	4458      	add	r0, fp
    2b14:	2200      	movs	r2, #0
    2b16:	6840      	ldr	r0, [r0, #4]
    2b18:	f7ff fece 	bl	28b8 <memq_dequeue>
		m->_ack = req;
    2b1c:	9b07      	ldr	r3, [sp, #28]
		ack = m->_ack;
    2b1e:	787a      	ldrb	r2, [r7, #1]
		m->_ack = req;
    2b20:	707b      	strb	r3, [r7, #1]
		if (((m->_req - ack) & 0x03) == 1) {
    2b22:	783b      	ldrb	r3, [r7, #0]
		m->_link = link;
    2b24:	f8c7 9004 	str.w	r9, [r7, #4]
		if (((m->_req - ack) & 0x03) == 1) {
    2b28:	1a9b      	subs	r3, r3, r2
    2b2a:	f003 0303 	and.w	r3, r3, #3
    2b2e:	2b01      	cmp	r3, #1
    2b30:	d105      	bne.n	2b3e <mayfly_run+0x122>
			m->_ack = ack;
    2b32:	707a      	strb	r2, [r7, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    2b34:	4639      	mov	r1, r7
    2b36:	9a05      	ldr	r2, [sp, #20]
    2b38:	4648      	mov	r0, r9
    2b3a:	f7ff feae 	bl	289a <memq_enqueue>
			link = memq_peek(mft[callee_id][caller_id].head,
    2b3e:	9b03      	ldr	r3, [sp, #12]
    2b40:	4443      	add	r3, r8
    2b42:	18e9      	adds	r1, r5, r3
    2b44:	58e8      	ldr	r0, [r5, r3]
    2b46:	6849      	ldr	r1, [r1, #4]
    2b48:	aa09      	add	r2, sp, #36	; 0x24
    2b4a:	f7ff fead 	bl	28a8 <memq_peek>
			if (state == 1) {
    2b4e:	9b02      	ldr	r3, [sp, #8]
    2b50:	2b01      	cmp	r3, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    2b52:	4681      	mov	r9, r0
			if (state == 1) {
    2b54:	d1a8      	bne.n	2aa8 <mayfly_run+0x8c>
				if (caller_id || link) {
    2b56:	b90c      	cbnz	r4, 2b5c <mayfly_run+0x140>
    2b58:	2800      	cmp	r0, #0
    2b5a:	d0a8      	beq.n	2aae <mayfly_run+0x92>
					mayfly_pend(callee_id, callee_id);
    2b5c:	4631      	mov	r1, r6
    2b5e:	4630      	mov	r0, r6
    2b60:	f003 ff8a 	bl	6a78 <mayfly_pend>
	}
}
    2b64:	b00b      	add	sp, #44	; 0x2c
    2b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b6a:	bf00      	nop
    2b6c:	200000d4 	.word	0x200000d4
    2b70:	200000d8 	.word	0x200000d8

00002b74 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    2b74:	b510      	push	{r4, lr}
    2b76:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0U;
    2b78:	2000      	movs	r0, #0

	while (octets_len--) {
    2b7a:	3901      	subs	r1, #1
    2b7c:	b2c9      	uxtb	r1, r1
    2b7e:	29ff      	cmp	r1, #255	; 0xff
    2b80:	d100      	bne.n	2b84 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    2b82:	bd10      	pop	{r4, pc}
		bite = *octets;
    2b84:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    2b88:	2b00      	cmp	r3, #0
    2b8a:	d0f6      	beq.n	2b7a <util_ones_count_get+0x6>
			bite &= (bite - 1);
    2b8c:	1e5c      	subs	r4, r3, #1
			one_count++;
    2b8e:	3001      	adds	r0, #1
			bite &= (bite - 1);
    2b90:	4023      	ands	r3, r4
			one_count++;
    2b92:	b2c0      	uxtb	r0, r0
    2b94:	e7f8      	b.n	2b88 <util_ones_count_get+0x14>

00002b96 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    2b96:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    2b98:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    2b9a:	6805      	ldr	r5, [r0, #0]
	current = previous;
    2b9c:	461a      	mov	r2, r3
	total = 0U;
    2b9e:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    2ba0:	2aff      	cmp	r2, #255	; 0xff
    2ba2:	d101      	bne.n	2ba8 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    2ba4:	2000      	movs	r0, #0
    2ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    2ba8:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    2bac:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    2bae:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    2bb2:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    2bb6:	d004      	beq.n	2bc2 <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    2bb8:	68b3      	ldr	r3, [r6, #8]
    2bba:	441c      	add	r4, r3
		current = ticker_current->next;
    2bbc:	4613      	mov	r3, r2
    2bbe:	463a      	mov	r2, r7
    2bc0:	e7ee      	b.n	2ba0 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    2bc2:	4293      	cmp	r3, r2
    2bc4:	d100      	bne.n	2bc8 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    2bc6:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    2bc8:	b21b      	sxth	r3, r3
    2bca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2bce:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    2bd0:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    2bd2:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    2bd6:	7833      	ldrb	r3, [r6, #0]
    2bd8:	2bff      	cmp	r3, #255	; 0xff
    2bda:	d006      	beq.n	2bea <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    2bdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2be0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    2be4:	689a      	ldr	r2, [r3, #8]
    2be6:	4402      	add	r2, r0
    2be8:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    2bea:	4420      	add	r0, r4
    2bec:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002bee <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    2bee:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    2bf0:	1a55      	subs	r5, r2, r1
    2bf2:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    2bf6:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    2bf8:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    2bfa:	d109      	bne.n	2c10 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    2bfc:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    2c00:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    2c02:	42a2      	cmp	r2, r4
    2c04:	d90e      	bls.n	2c24 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    2c06:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0U;
    2c08:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    2c0a:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    2c0c:	6144      	str	r4, [r0, #20]
    2c0e:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    2c10:	1a8a      	subs	r2, r1, r2
    2c12:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    2c16:	4293      	cmp	r3, r2
    2c18:	d901      	bls.n	2c1e <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    2c1a:	1a9a      	subs	r2, r3, r2
    2c1c:	e7f1      	b.n	2c02 <ticks_to_expire_prep+0x14>
    2c1e:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    2c20:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0U;
    2c22:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    2c24:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0U;
    2c26:	2200      	movs	r2, #0
    2c28:	e7ef      	b.n	2c0a <ticks_to_expire_prep+0x1c>

00002c2a <ticker_job_op_cb>:
{
    2c2a:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    2c2c:	2200      	movs	r2, #0
    2c2e:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    2c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    2c32:	6259      	str	r1, [r3, #36]	; 0x24
{
    2c34:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    2c36:	b10a      	cbz	r2, 2c3c <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    2c38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    2c3a:	4710      	bx	r2
    2c3c:	4770      	bx	lr

00002c3e <ticker_worker>:
{
    2c3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    2c42:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1U;
    2c44:	2301      	movs	r3, #1
{
    2c46:	4604      	mov	r4, r0
	instance->worker_trigger = 1U;
    2c48:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    2c4a:	2d00      	cmp	r5, #0
    2c4c:	d14c      	bne.n	2ce8 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    2c4e:	7f43      	ldrb	r3, [r0, #29]
    2c50:	2bff      	cmp	r3, #255	; 0xff
    2c52:	d102      	bne.n	2c5a <ticker_worker+0x1c>
		instance->worker_trigger = 0U;
    2c54:	77c5      	strb	r5, [r0, #31]
		return;
    2c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    2c5a:	f003 fb1f 	bl	629c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    2c5e:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    2c60:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    2c62:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    2c66:	1bc7      	subs	r7, r0, r7
    2c68:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    2c6c:	2eff      	cmp	r6, #255	; 0xff
    2c6e:	d006      	beq.n	2c7e <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    2c70:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    2c74:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    2c78:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    2c7a:	429f      	cmp	r7, r3
    2c7c:	d218      	bcs.n	2cb0 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    2c7e:	7aa2      	ldrb	r2, [r4, #10]
    2c80:	7ae3      	ldrb	r3, [r4, #11]
    2c82:	4293      	cmp	r3, r2
    2c84:	d105      	bne.n	2c92 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    2c86:	3301      	adds	r3, #1
    2c88:	b2db      	uxtb	r3, r3
			last = 0U;
    2c8a:	2b02      	cmp	r3, #2
    2c8c:	bf08      	it	eq
    2c8e:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    2c90:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    2c92:	7ae3      	ldrb	r3, [r4, #11]
    2c94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2c98:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    2c9a:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0U;
    2c9c:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2c9e:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0U;
    2ca0:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2ca2:	46ac      	mov	ip, r5
    2ca4:	4623      	mov	r3, r4
    2ca6:	2104      	movs	r1, #4
    2ca8:	2003      	movs	r0, #3
}
    2caa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2cae:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    2cb0:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    2cb2:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    2cb4:	788a      	ldrb	r2, [r1, #2]
    2cb6:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    2cb8:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    2cbc:	1a9b      	subs	r3, r3, r2
    2cbe:	b2db      	uxtb	r3, r3
    2cc0:	2b01      	cmp	r3, #1
    2cc2:	d1d3      	bne.n	2c6c <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    2cc4:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    2cc8:	3a01      	subs	r2, #1
    2cca:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    2ccc:	f1b9 0f00 	cmp.w	r9, #0
    2cd0:	d0cc      	beq.n	2c6c <ticker_worker+0x2e>
					   ticks_expired -
    2cd2:	6948      	ldr	r0, [r1, #20]
    2cd4:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    2cd6:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    2cd8:	1a28      	subs	r0, r5, r0
    2cda:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    2cdc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ce0:	690b      	ldr	r3, [r1, #16]
    2ce2:	6a49      	ldr	r1, [r1, #36]	; 0x24
    2ce4:	47c8      	blx	r9
    2ce6:	e7c1      	b.n	2c6c <ticker_worker+0x2e>
    2ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00002cec <ticker_job>:
{
    2cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    2cf0:	7fc2      	ldrb	r2, [r0, #31]
{
    2cf2:	b093      	sub	sp, #76	; 0x4c
    2cf4:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    2cf6:	2a00      	cmp	r2, #0
    2cf8:	f040 83b9 	bne.w	346e <ticker_job+0x782>
	ticks_previous = instance->ticks_current;
    2cfc:	6943      	ldr	r3, [r0, #20]
    2cfe:	9305      	str	r3, [sp, #20]
	instance->job_guard = 1U;
    2d00:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    2d02:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1U;
    2d04:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    2d06:	7ac0      	ldrb	r0, [r0, #11]
    2d08:	4298      	cmp	r0, r3
    2d0a:	f000 808f 	beq.w	2e2c <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    2d0e:	440b      	add	r3, r1
    2d10:	b2db      	uxtb	r3, r3
			first = 0U;
    2d12:	2b02      	cmp	r3, #2
    2d14:	bf08      	it	eq
    2d16:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    2d18:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    2d1c:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1U;
    2d20:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    2d22:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    2d26:	9b05      	ldr	r3, [sp, #20]
    2d28:	4443      	add	r3, r8
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    2d2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2d2e:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    2d32:	f89b 301d 	ldrb.w	r3, [fp, #29]
    2d36:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
    2d38:	f8db 3000 	ldr.w	r3, [fp]
    2d3c:	9304      	str	r3, [sp, #16]
	users = &instance->user[0];
    2d3e:	f8db 3004 	ldr.w	r3, [fp, #4]
    2d42:	930b      	str	r3, [sp, #44]	; 0x2c
    2d44:	f89b 3009 	ldrb.w	r3, [fp, #9]
    2d48:	3b01      	subs	r3, #1
    2d4a:	b2db      	uxtb	r3, r3
    2d4c:	9302      	str	r3, [sp, #8]
	pending = 0U;
    2d4e:	2300      	movs	r3, #0
    2d50:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
    2d52:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    2d56:	9b02      	ldr	r3, [sp, #8]
    2d58:	2bff      	cmp	r3, #255	; 0xff
    2d5a:	d16a      	bne.n	2e32 <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    2d5c:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0U;
    2d60:	9a03      	ldr	r2, [sp, #12]
    2d62:	1a9b      	subs	r3, r3, r2
    2d64:	bf18      	it	ne
    2d66:	2301      	movne	r3, #1
    2d68:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
    2d6a:	9b01      	ldr	r3, [sp, #4]
    2d6c:	b1e3      	cbz	r3, 2da8 <ticker_job+0xbc>
	node = &instance->node[0];
    2d6e:	f8db 3000 	ldr.w	r3, [fp]
    2d72:	9304      	str	r3, [sp, #16]
	ticks_expired = 0U;
    2d74:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    2d78:	f89b 601d 	ldrb.w	r6, [fp, #29]
    2d7c:	2eff      	cmp	r6, #255	; 0xff
    2d7e:	d00c      	beq.n	2d9a <ticker_job+0xae>
		ticker = &node[id_expired];
    2d80:	b237      	sxth	r7, r6
    2d82:	9b04      	ldr	r3, [sp, #16]
    2d84:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    2d88:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    2d8c:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    2d8e:	4545      	cmp	r5, r8
    2d90:	f240 813a 	bls.w	3008 <ticker_job+0x31c>
			ticker->ticks_to_expire -= ticks_elapsed;
    2d94:	eba5 0508 	sub.w	r5, r5, r8
    2d98:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1U;
    2d9a:	9b02      	ldr	r3, [sp, #8]
    2d9c:	9a01      	ldr	r2, [sp, #4]
    2d9e:	9903      	ldr	r1, [sp, #12]
    2da0:	42b1      	cmp	r1, r6
    2da2:	bf18      	it	ne
    2da4:	4613      	movne	r3, r2
    2da6:	9302      	str	r3, [sp, #8]
	node = &instance->node[0];
    2da8:	f8db 3000 	ldr.w	r3, [fp]
    2dac:	9308      	str	r3, [sp, #32]
	users = &instance->user[0];
    2dae:	f8db 3004 	ldr.w	r3, [fp, #4]
    2db2:	9310      	str	r3, [sp, #64]	; 0x40
    2db4:	f89b 3009 	ldrb.w	r3, [fp, #9]
    2db8:	3b01      	subs	r3, #1
    2dba:	b2db      	uxtb	r3, r3
    2dbc:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    2dbe:	9b01      	ldr	r3, [sp, #4]
    2dc0:	2bff      	cmp	r3, #255	; 0xff
    2dc2:	f040 8174 	bne.w	30ae <ticker_job+0x3c2>
	if (instance->ticker_id_head != ticker_id_old_head) {
    2dc6:	f89b 301d 	ldrb.w	r3, [fp, #29]
    2dca:	9a03      	ldr	r2, [sp, #12]
    2dcc:	4293      	cmp	r3, r2
	if (!pending) {
    2dce:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
    2dd0:	f040 8344 	bne.w	345c <ticker_job+0x770>
	if (!pending) {
    2dd4:	b95b      	cbnz	r3, 2dee <ticker_job+0x102>
    2dd6:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    2dda:	f8db 3004 	ldr.w	r3, [fp, #4]
    2dde:	9301      	str	r3, [sp, #4]
    2de0:	3c01      	subs	r4, #1
    2de2:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    2de4:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    2de8:	2cff      	cmp	r4, #255	; 0xff
    2dea:	f040 82a4 	bne.w	3336 <ticker_job+0x64a>
	instance->job_guard = 0U;
    2dee:	2300      	movs	r3, #0
    2df0:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    2df4:	9b02      	ldr	r3, [sp, #8]
    2df6:	b14b      	cbz	r3, 2e0c <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    2df8:	f89b 301d 	ldrb.w	r3, [fp, #29]
    2dfc:	2bff      	cmp	r3, #255	; 0xff
    2dfe:	f040 82ed 	bne.w	33dc <ticker_job+0x6f0>
		if (cntr_stop() == 0) {
    2e02:	f003 fa33 	bl	626c <cntr_stop>
    2e06:	b908      	cbnz	r0, 2e0c <ticker_job+0x120>
			instance->ticks_slot_previous = 0U;
    2e08:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    2e0c:	f89b 301f 	ldrb.w	r3, [fp, #31]
    2e10:	2b00      	cmp	r3, #0
    2e12:	f000 832c 	beq.w	346e <ticker_job+0x782>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    2e16:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    2e1a:	465b      	mov	r3, fp
    2e1c:	2201      	movs	r2, #1
    2e1e:	2103      	movs	r1, #3
    2e20:	2004      	movs	r0, #4
    2e22:	46a4      	mov	ip, r4
}
    2e24:	b013      	add	sp, #76	; 0x4c
    2e26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    2e2a:	4760      	bx	ip
		flag_elapsed = 0U;
    2e2c:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0U;
    2e2e:	4690      	mov	r8, r2
    2e30:	e77f      	b.n	2d32 <ticker_job+0x46>
		user = &users[count_user];
    2e32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2e34:	9a02      	ldr	r2, [sp, #8]
    2e36:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    2e3a:	687b      	ldr	r3, [r7, #4]
    2e3c:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    2e3e:	78f9      	ldrb	r1, [r7, #3]
    2e40:	78be      	ldrb	r6, [r7, #2]
    2e42:	428e      	cmp	r6, r1
    2e44:	f000 80db 	beq.w	2ffe <ticker_job+0x312>
			user_op = &user_ops[user->middle];
    2e48:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    2e4a:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    2e4c:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    2e50:	0112      	lsls	r2, r2, #4
    2e52:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    2e54:	1c73      	adds	r3, r6, #1
    2e56:	b2db      	uxtb	r3, r3
				middle = 0U;
    2e58:	4298      	cmp	r0, r3
    2e5a:	bf08      	it	eq
    2e5c:	2300      	moveq	r3, #0
			user->middle = middle;
    2e5e:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    2e60:	9b06      	ldr	r3, [sp, #24]
    2e62:	5c9a      	ldrb	r2, [r3, r2]
    2e64:	2a03      	cmp	r2, #3
    2e66:	d9eb      	bls.n	2e40 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    2e68:	2a05      	cmp	r2, #5
    2e6a:	d81b      	bhi.n	2ea4 <ticker_job+0x1b8>
			ticker = &node[user_op->id];
    2e6c:	7869      	ldrb	r1, [r5, #1]
    2e6e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    2e72:	930a      	str	r3, [sp, #40]	; 0x28
    2e74:	980a      	ldr	r0, [sp, #40]	; 0x28
    2e76:	9b04      	ldr	r3, [sp, #16]
    2e78:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    2e7c:	7863      	ldrb	r3, [r4, #1]
    2e7e:	78a0      	ldrb	r0, [r4, #2]
    2e80:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    2e82:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    2e86:	d00d      	beq.n	2ea4 <ticker_job+0x1b8>
			    (state == 0) ||
    2e88:	2a04      	cmp	r2, #4
    2e8a:	d110      	bne.n	2eae <ticker_job+0x1c2>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    2e8c:	686a      	ldr	r2, [r5, #4]
    2e8e:	b972      	cbnz	r2, 2eae <ticker_job+0x1c2>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    2e90:	68aa      	ldr	r2, [r5, #8]
    2e92:	b962      	cbnz	r2, 2eae <ticker_job+0x1c2>
			     (user_op->params.update.ticks_drift_minus == 0) &&
    2e94:	68ea      	ldr	r2, [r5, #12]
    2e96:	b952      	cbnz	r2, 2eae <ticker_job+0x1c2>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    2e98:	692a      	ldr	r2, [r5, #16]
    2e9a:	b942      	cbnz	r2, 2eae <ticker_job+0x1c2>
			     (user_op->params.update.lazy == 0) &&
    2e9c:	696a      	ldr	r2, [r5, #20]
    2e9e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    2ea2:	d104      	bne.n	2eae <ticker_job+0x1c2>
				ticker_job_op_cb(user_op,
    2ea4:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    2ea6:	4628      	mov	r0, r5
    2ea8:	f7ff febf 	bl	2c2a <ticker_job_op_cb>
    2eac:	e7c7      	b.n	2e3e <ticker_job+0x152>
			if (state == 1) {
    2eae:	2b01      	cmp	r3, #1
    2eb0:	f040 809b 	bne.w	2fea <ticker_job+0x2fe>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    2eb4:	4658      	mov	r0, fp
    2eb6:	f7ff fe6e 	bl	2b96 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    2eba:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    2ebc:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    2ebe:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    2ec0:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    2ec2:	f040 8084 	bne.w	2fce <ticker_job+0x2e2>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    2ec6:	f8db 3014 	ldr.w	r3, [fp, #20]
    2eca:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    2ecc:	f003 f9e6 	bl	629c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    2ed0:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    2ed2:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    2ed4:	1ac3      	subs	r3, r0, r3
    2ed6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    2eda:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    2edc:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    2ede:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    2ee0:	bf9e      	ittt	ls
    2ee2:	6962      	ldrls	r2, [r4, #20]
    2ee4:	1b92      	subls	r2, r2, r6
    2ee6:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    2ee8:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    2eea:	bf96      	itet	ls
    2eec:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    2eee:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0U;
    2ef0:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    2ef2:	b18a      	cbz	r2, 2f18 <ticker_job+0x22c>
	    (user_op->params.update.lazy != 0)) {
    2ef4:	8aa9      	ldrh	r1, [r5, #20]
	if ((ticker->ticks_periodic != 0) &&
    2ef6:	b179      	cbz	r1, 2f18 <ticker_job+0x22c>
		user_op->params.update.lazy--;
    2ef8:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    2efc:	fa1f fe8e 	uxth.w	lr, lr
    2f00:	f8a5 e014 	strh.w	lr, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    2f04:	429a      	cmp	r2, r3
    2f06:	d32b      	bcc.n	2f60 <ticker_job+0x274>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    2f08:	f8df 9324 	ldr.w	r9, [pc, #804]	; 3230 <ticker_job+0x544>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    2f0c:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    2f10:	45e6      	cmp	lr, ip
    2f12:	d847      	bhi.n	2fa4 <ticker_job+0x2b8>
		ticker->lazy_periodic = user_op->params.update.lazy;
    2f14:	f8a4 e01c 	strh.w	lr, [r4, #28]
	ticker->ticks_to_expire = ticks_to_expire +
    2f18:	686a      	ldr	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    2f1a:	9908      	ldr	r1, [sp, #32]
	ticker->ticks_to_expire = ticks_to_expire +
    2f1c:	4413      	add	r3, r2
    2f1e:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
    2f20:	68aa      	ldr	r2, [r5, #8]
    2f22:	6963      	ldr	r3, [r4, #20]
    2f24:	4413      	add	r3, r2
    2f26:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    2f28:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2f2a:	4620      	mov	r0, r4
    2f2c:	f7ff fe5f 	bl	2bee <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    2f30:	68ea      	ldr	r2, [r5, #12]
    2f32:	69a3      	ldr	r3, [r4, #24]
    2f34:	4413      	add	r3, r2
    2f36:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    2f38:	692a      	ldr	r2, [r5, #16]
    2f3a:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    2f3c:	bf8c      	ite	hi
    2f3e:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
    2f40:	2300      	movls	r3, #0
    2f42:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    2f44:	7dab      	ldrb	r3, [r5, #22]
    2f46:	b103      	cbz	r3, 2f4a <ticker_job+0x25e>
		ticker->force = user_op->params.update.force;
    2f48:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    2f4a:	9b04      	ldr	r3, [sp, #16]
    2f4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2f4e:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    2f52:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    2f54:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    2f58:	3301      	adds	r3, #1
    2f5a:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    2f5c:	2100      	movs	r1, #0
    2f5e:	e7a2      	b.n	2ea6 <ticker_job+0x1ba>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    2f60:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    2f64:	45e6      	cmp	lr, ip
    2f66:	d2cf      	bcs.n	2f08 <ticker_job+0x21c>
	if ((ticker->remainder_current >= BIT(31)) ||
    2f68:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2f6a:	4eaf      	ldr	r6, [pc, #700]	; (3228 <ticker_job+0x53c>)
    2f6c:	48af      	ldr	r0, [pc, #700]	; (322c <ticker_job+0x540>)
    2f6e:	198e      	adds	r6, r1, r6
    2f70:	4286      	cmp	r6, r0
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    2f72:	bf81      	itttt	hi
    2f74:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    2f78:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    2f7c:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    2f80:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    2f82:	6a66      	ldr	r6, [r4, #36]	; 0x24
    2f84:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    2f86:	bf8c      	ite	hi
    2f88:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0U;
    2f8c:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    2f90:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    2f92:	4491      	add	r9, r2
			ticker->lazy_current--;
    2f94:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    2f98:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    2f9a:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    2f9e:	f8a4 c01e 	strh.w	ip, [r4, #30]
    2fa2:	e7af      	b.n	2f04 <ticker_job+0x218>
	ticker->remainder_current += ticker->remainder_periodic;
    2fa4:	6a66      	ldr	r6, [r4, #36]	; 0x24
    2fa6:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    2fa8:	48a0      	ldr	r0, [pc, #640]	; (322c <ticker_job+0x540>)
	ticker->remainder_current += ticker->remainder_periodic;
    2faa:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    2fac:	499e      	ldr	r1, [pc, #632]	; (3228 <ticker_job+0x53c>)
    2fae:	1871      	adds	r1, r6, r1
    2fb0:	4281      	cmp	r1, r0
	return 0;
    2fb2:	bf8e      	itee	hi
    2fb4:	2100      	movhi	r1, #0
		return 1;
    2fb6:	2101      	movls	r1, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    2fb8:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    2fba:	4411      	add	r1, r2
			ticker->lazy_current++;
    2fbc:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    2fc0:	bf8c      	ite	hi
    2fc2:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    2fc4:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    2fc6:	440b      	add	r3, r1
			ticker->lazy_current++;
    2fc8:	f8a4 c01e 	strh.w	ip, [r4, #30]
    2fcc:	e79e      	b.n	2f0c <ticker_job+0x220>
		ticker->req = ticker->ack;
    2fce:	78a3      	ldrb	r3, [r4, #2]
    2fd0:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    2fd2:	786b      	ldrb	r3, [r5, #1]
    2fd4:	f89b 201c 	ldrb.w	r2, [fp, #28]
    2fd8:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    2fda:	bf01      	itttt	eq
    2fdc:	23ff      	moveq	r3, #255	; 0xff
    2fde:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0U;
    2fe2:	2300      	moveq	r3, #0
    2fe4:	f8cb 3018 	streq.w	r3, [fp, #24]
    2fe8:	e7b8      	b.n	2f5c <ticker_job+0x270>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    2fea:	2104      	movs	r1, #4
    2fec:	465b      	mov	r3, fp
    2fee:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    2ff2:	2201      	movs	r2, #1
    2ff4:	4608      	mov	r0, r1
    2ff6:	47a0      	blx	r4
				pending = 1U;
    2ff8:	2301      	movs	r3, #1
				user->middle = prev;
    2ffa:	70be      	strb	r6, [r7, #2]
				pending = 1U;
    2ffc:	9307      	str	r3, [sp, #28]
    2ffe:	9b02      	ldr	r3, [sp, #8]
    3000:	3b01      	subs	r3, #1
    3002:	b2db      	uxtb	r3, r3
    3004:	9302      	str	r3, [sp, #8]
    3006:	e6a6      	b.n	2d56 <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    3008:	f8db 3018 	ldr.w	r3, [fp, #24]
    300c:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    300e:	bf29      	itett	cs
    3010:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    3012:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    3014:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0U;
    3018:	2300      	movcs	r3, #0
    301a:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    301e:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    3020:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    3022:	b11b      	cbz	r3, 302c <ticker_job+0x340>
			instance->ticker_id_slot_previous = id_expired;
    3024:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    3028:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0U;
    302c:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    302e:	9b04      	ldr	r3, [sp, #16]
		ticker->ticks_to_expire = 0U;
    3030:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    3032:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    3036:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    303a:	f8d4 e004 	ldr.w	lr, [r4, #4]
    303e:	f1be 0f00 	cmp.w	lr, #0
    3042:	d030      	beq.n	30a6 <ticker_job+0x3ba>
    3044:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    3046:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 322c <ticker_job+0x540>
	ticker->remainder_current += ticker->remainder_periodic;
    304a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    304c:	6a21      	ldr	r1, [r4, #32]
    304e:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    3050:	4975      	ldr	r1, [pc, #468]	; (3228 <ticker_job+0x53c>)
    3052:	1859      	adds	r1, r3, r1
    3054:	4561      	cmp	r1, ip
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    3056:	bf9f      	itttt	ls
    3058:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    305c:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    3060:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    3064:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    3066:	bf92      	itee	ls
    3068:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    306a:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    306c:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    306e:	4473      	add	r3, lr
			while (count--) {
    3070:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    3074:	441a      	add	r2, r3
			while (count--) {
    3076:	d2e8      	bcs.n	304a <ticker_job+0x35e>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    3078:	9b05      	ldr	r3, [sp, #20]
			ticker->ticks_to_expire = ticks_to_expire;
    307a:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    307c:	f8db 1014 	ldr.w	r1, [fp, #20]
    3080:	eb03 0209 	add.w	r2, r3, r9
    3084:	4620      	mov	r0, r4
    3086:	f7ff fdb2 	bl	2bee <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    308a:	8ba3      	ldrh	r3, [r4, #28]
    308c:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0U;
    308e:	2300      	movs	r3, #0
    3090:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    3092:	9b04      	ldr	r3, [sp, #16]
    3094:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    3098:	7863      	ldrb	r3, [r4, #1]
    309a:	3301      	adds	r3, #1
    309c:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    309e:	eba8 0805 	sub.w	r8, r8, r5
    30a2:	46b2      	mov	sl, r6
    30a4:	e668      	b.n	2d78 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    30a6:	78a3      	ldrb	r3, [r4, #2]
    30a8:	7063      	strb	r3, [r4, #1]
    30aa:	4656      	mov	r6, sl
    30ac:	e7f7      	b.n	309e <ticker_job+0x3b2>
		user = &users[count_user];
    30ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    30b0:	9a01      	ldr	r2, [sp, #4]
    30b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    30b6:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    30b8:	685b      	ldr	r3, [r3, #4]
    30ba:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
    30bc:	9b04      	ldr	r3, [sp, #16]
    30be:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    30c2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    30c6:	f000 808e 	beq.w	31e6 <ticker_job+0x4fa>
				ticker = &node[id_insert];
    30ca:	fa0f f38a 	sxth.w	r3, sl
    30ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    30d2:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
    30d4:	46d0      	mov	r8, sl
    30d6:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    30da:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    30de:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    30e0:	f8db 3000 	ldr.w	r3, [fp]
    30e4:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
    30e6:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    30e8:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    30ea:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    30ec:	8be3      	ldrh	r3, [r4, #30]
    30ee:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    30f0:	bf86      	itte	hi
    30f2:	1a9b      	subhi	r3, r3, r2
    30f4:	b29b      	uxthhi	r3, r3
		skip = 0U;
    30f6:	2300      	movls	r3, #0
    30f8:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
    30fa:	fa0f f388 	sxth.w	r3, r8
    30fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3102:	00db      	lsls	r3, r3, #3
    3104:	9311      	str	r3, [sp, #68]	; 0x44
    3106:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
    3108:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    310c:	f8db 0018 	ldr.w	r0, [fp, #24]
    3110:	9005      	str	r0, [sp, #20]
	ticker_new = &node[id];
    3112:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    3116:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    3118:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    311c:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    3120:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    3122:	9006      	str	r0, [sp, #24]
	while ((current != TICKER_NULL) &&
    3124:	2bff      	cmp	r3, #255	; 0xff
    3126:	d007      	beq.n	3138 <ticker_job+0x44c>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    3128:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    312c:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    3130:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    3132:	4281      	cmp	r1, r0
    3134:	f200 80a9 	bhi.w	328a <ticker_job+0x59e>
				     ticks_to_expire + ticker_new->ticks_slot);
    3138:	f8de 0018 	ldr.w	r0, [lr, #24]
    313c:	900d      	str	r0, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
    313e:	eb01 0c00 	add.w	ip, r1, r0
    3142:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    3144:	2eff      	cmp	r6, #255	; 0xff
    3146:	f040 80ae 	bne.w	32a6 <ticker_job+0x5ba>
	if ((ticker_new->ticks_slot == 0) ||
    314a:	980d      	ldr	r0, [sp, #52]	; 0x34
    314c:	b130      	cbz	r0, 315c <ticker_job+0x470>
    314e:	9805      	ldr	r0, [sp, #20]
    3150:	4281      	cmp	r1, r0
    3152:	f0c0 80bf 	bcc.w	32d4 <ticker_job+0x5e8>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    3156:	2eff      	cmp	r6, #255	; 0xff
    3158:	f040 8185 	bne.w	3466 <ticker_job+0x77a>
		if (previous == current) {
    315c:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
    315e:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    3162:	4283      	cmp	r3, r0
			node[previous].next = id;
    3164:	bf18      	it	ne
    3166:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
    316a:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    316e:	bf16      	itet	ne
    3170:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    3174:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    3178:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    317c:	2bff      	cmp	r3, #255	; 0xff
    317e:	d006      	beq.n	318e <ticker_job+0x4a2>
			node[current].ticks_to_expire -= ticks_to_expire;
    3180:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3184:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3188:	689a      	ldr	r2, [r3, #8]
    318a:	1a51      	subs	r1, r2, r1
    318c:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    318e:	78a3      	ldrb	r3, [r4, #2]
    3190:	3301      	adds	r3, #1
    3192:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    3194:	2100      	movs	r1, #0
			if (user_op) {
    3196:	2d00      	cmp	r5, #0
    3198:	d093      	beq.n	30c2 <ticker_job+0x3d6>
				ticker_job_op_cb(user_op, status);
    319a:	4628      	mov	r0, r5
    319c:	f7ff fd45 	bl	2c2a <ticker_job_op_cb>
    31a0:	e78f      	b.n	30c2 <ticker_job+0x3d6>
				user_op = &user_ops[user_ops_first];
    31a2:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    31a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    31a8:	011b      	lsls	r3, r3, #4
    31aa:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    31ac:	f109 0201 	add.w	r2, r9, #1
    31b0:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    31b4:	9a04      	ldr	r2, [sp, #16]
    31b6:	7812      	ldrb	r2, [r2, #0]
					first = 0U;
    31b8:	454a      	cmp	r2, r9
    31ba:	bf08      	it	eq
    31bc:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    31c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    31c2:	5cd3      	ldrb	r3, [r2, r3]
    31c4:	2b03      	cmp	r3, #3
    31c6:	d10e      	bne.n	31e6 <ticker_job+0x4fa>
				id_insert = user_op->id;
    31c8:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    31cc:	9b08      	ldr	r3, [sp, #32]
    31ce:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    31d2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    31d6:	7862      	ldrb	r2, [r4, #1]
    31d8:	78a3      	ldrb	r3, [r4, #2]
    31da:	429a      	cmp	r2, r3
    31dc:	d009      	beq.n	31f2 <ticker_job+0x506>
					ticker_job_op_cb(user_op,
    31de:	2101      	movs	r1, #1
    31e0:	4628      	mov	r0, r5
    31e2:	f7ff fd22 	bl	2c2a <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    31e6:	9b04      	ldr	r3, [sp, #16]
    31e8:	789b      	ldrb	r3, [r3, #2]
    31ea:	454b      	cmp	r3, r9
    31ec:	d1d9      	bne.n	31a2 <ticker_job+0x4b6>
    31ee:	9b01      	ldr	r3, [sp, #4]
    31f0:	e5e2      	b.n	2db8 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    31f2:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    31f4:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    31f8:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    31fa:	692b      	ldr	r3, [r5, #16]
    31fc:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    31fe:	8aab      	ldrh	r3, [r5, #20]
    3200:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    3202:	69ab      	ldr	r3, [r5, #24]
    3204:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    3206:	69eb      	ldr	r3, [r5, #28]
    3208:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    320a:	6a2b      	ldr	r3, [r5, #32]
    320c:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0U;
    320e:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    3210:	68ab      	ldr	r3, [r5, #8]
    3212:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
    3214:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    3216:	686a      	ldr	r2, [r5, #4]
    3218:	4620      	mov	r0, r4
    321a:	f7ff fce8 	bl	2bee <ticks_to_expire_prep>
	ticker->force = 1U;
    321e:	2301      	movs	r3, #1
	ticker->remainder_current = 0U;
    3220:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    3222:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1U;
    3224:	70e3      	strb	r3, [r4, #3]
    3226:	e75b      	b.n	30e0 <ticker_job+0x3f4>
    3228:	ff172b5a 	.word	0xff172b5a
    322c:	7f172b59 	.word	0x7f172b59
    3230:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    3234:	6860      	ldr	r0, [r4, #4]
    3236:	2800      	cmp	r0, #0
    3238:	d07b      	beq.n	3332 <ticker_job+0x646>
	ticker->remainder_current += ticker->remainder_periodic;
    323a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    323c:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    323e:	4b8d      	ldr	r3, [pc, #564]	; (3474 <ticker_job+0x788>)
	ticker->remainder_current += ticker->remainder_periodic;
    3240:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    3242:	498d      	ldr	r1, [pc, #564]	; (3478 <ticker_job+0x78c>)
    3244:	18d3      	adds	r3, r2, r3
    3246:	428b      	cmp	r3, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    3248:	bf9c      	itt	ls
    324a:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    324e:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3252:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    3254:	bf8b      	itete	hi
    3256:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    3258:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    325c:	2200      	movhi	r2, #0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    325e:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3260:	4403      	add	r3, r0
		return 1;
    3262:	bf98      	it	ls
    3264:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3266:	4413      	add	r3, r2
			ticker->lazy_current++;
    3268:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    326a:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    326c:	3201      	adds	r2, #1
    326e:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    3270:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    3272:	4293      	cmp	r3, r2
    3274:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    3278:	bf89      	itett	hi
    327a:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    327c:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    327e:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0U;
    3280:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    3282:	bf9c      	itt	ls
    3284:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0U;
    3286:	60a1      	strls	r1, [r4, #8]
    3288:	e73d      	b.n	3106 <ticker_job+0x41a>
		if (ticker_current->ticks_slot != 0) {
    328a:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    328c:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    328e:	b946      	cbnz	r6, 32a2 <ticker_job+0x5b6>
			if (ticks_slot_previous > ticks_to_expire_current) {
    3290:	9f05      	ldr	r7, [sp, #20]
    3292:	42b8      	cmp	r0, r7
    3294:	d200      	bcs.n	3298 <ticker_job+0x5ac>
				ticks_slot_previous -= ticks_to_expire_current;
    3296:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    3298:	9309      	str	r3, [sp, #36]	; 0x24
    329a:	9605      	str	r6, [sp, #20]
    329c:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    32a0:	e740      	b.n	3124 <ticker_job+0x438>
		if (ticker_current->ticks_slot != 0) {
    32a2:	9306      	str	r3, [sp, #24]
    32a4:	e7f8      	b.n	3298 <ticker_job+0x5ac>
		ticker = &node[ticker_id_head];
    32a6:	b230      	sxth	r0, r6
    32a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    32ac:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    32b0:	970e      	str	r7, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
    32b2:	68bf      	ldr	r7, [r7, #8]
    32b4:	970f      	str	r7, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
    32b6:	4567      	cmp	r7, ip
    32b8:	d20a      	bcs.n	32d0 <ticker_job+0x5e4>
		if (ticker->ticks_slot) {
    32ba:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    32bc:	69bf      	ldr	r7, [r7, #24]
    32be:	2f00      	cmp	r7, #0
    32c0:	f47f af43 	bne.w	314a <ticker_job+0x45e>
		ticks_slot -= ticks_to_expire;
    32c4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    32c6:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    32ca:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    32ce:	e739      	b.n	3144 <ticker_job+0x458>
			return TICKER_NULL;
    32d0:	26ff      	movs	r6, #255	; 0xff
    32d2:	e73a      	b.n	314a <ticker_job+0x45e>
	while (id_insert !=
    32d4:	9b06      	ldr	r3, [sp, #24]
    32d6:	4598      	cmp	r8, r3
    32d8:	f43f af59 	beq.w	318e <ticker_job+0x4a2>
		if (id_collide != TICKER_NULL) {
    32dc:	9b06      	ldr	r3, [sp, #24]
    32de:	2bff      	cmp	r3, #255	; 0xff
    32e0:	d0a8      	beq.n	3234 <ticker_job+0x548>
    32e2:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    32e4:	b233      	sxth	r3, r6
    32e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    32ea:	9305      	str	r3, [sp, #20]
    32ec:	9a05      	ldr	r2, [sp, #20]
    32ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    32f0:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    32f4:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    32f6:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    32f8:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    32fa:	bf88      	it	hi
    32fc:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    32fe:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    3300:	bf8c      	ite	hi
    3302:	b29b      	uxthhi	r3, r3
				skip_collide = 0U;
    3304:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    3306:	2a00      	cmp	r2, #0
    3308:	d094      	beq.n	3234 <ticker_job+0x548>
    330a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    330c:	4293      	cmp	r3, r2
    330e:	d891      	bhi.n	3234 <ticker_job+0x548>
			    skip_collide <= skip &&
    3310:	78fa      	ldrb	r2, [r7, #3]
    3312:	78e3      	ldrb	r3, [r4, #3]
    3314:	429a      	cmp	r2, r3
    3316:	d28d      	bcs.n	3234 <ticker_job+0x548>
					ticker_dequeue(instance, id_collide);
    3318:	4631      	mov	r1, r6
    331a:	4658      	mov	r0, fp
    331c:	f7ff fc3b 	bl	2b96 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    3320:	78bb      	ldrb	r3, [r7, #2]
    3322:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    3324:	9a05      	ldr	r2, [sp, #20]
    3326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
    3328:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    332a:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    332e:	46b2      	mov	sl, r6
    3330:	e6e9      	b.n	3106 <ticker_job+0x41a>
			return TICKER_STATUS_FAILURE;
    3332:	2101      	movs	r1, #1
    3334:	e72f      	b.n	3196 <ticker_job+0x4aa>
		user = &users[count_user];
    3336:	9b01      	ldr	r3, [sp, #4]
    3338:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    333c:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    333e:	786b      	ldrb	r3, [r5, #1]
    3340:	78ea      	ldrb	r2, [r5, #3]
    3342:	429a      	cmp	r2, r3
    3344:	d102      	bne.n	334c <ticker_job+0x660>
    3346:	3c01      	subs	r4, #1
    3348:	b2e4      	uxtb	r4, r4
    334a:	e54d      	b.n	2de8 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    334c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3350:	011b      	lsls	r3, r3, #4
    3352:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    3354:	5cf3      	ldrb	r3, [r6, r3]
    3356:	2b01      	cmp	r3, #1
    3358:	d025      	beq.n	33a6 <ticker_job+0x6ba>
    335a:	2b02      	cmp	r3, #2
    335c:	d12a      	bne.n	33b4 <ticker_job+0x6c8>
		ticker_by_next_slot_get(instance,
    335e:	f8d2 c004 	ldr.w	ip, [r2, #4]
    3362:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    3364:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    3368:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    336c:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    3370:	28ff      	cmp	r0, #255	; 0xff
    3372:	d004      	beq.n	337e <ticker_job+0x692>
    3374:	6819      	ldr	r1, [r3, #0]
    3376:	f8db 7014 	ldr.w	r7, [fp, #20]
    337a:	42b9      	cmp	r1, r7
    337c:	d023      	beq.n	33c6 <ticker_job+0x6da>
		*ticks_current = instance->ticks_current;
    337e:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    3382:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    3386:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0U;
    3388:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    338a:	29ff      	cmp	r1, #255	; 0xff
    338c:	d007      	beq.n	339e <ticker_job+0x6b2>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    338e:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    3392:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    3396:	6987      	ldr	r7, [r0, #24]
    3398:	6880      	ldr	r0, [r0, #8]
    339a:	b1df      	cbz	r7, 33d4 <ticker_job+0x6e8>
		_ticks_to_expire += ticker->ticks_to_expire;
    339c:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    339e:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    33a2:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    33a6:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    33a8:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    33ac:	b113      	cbz	r3, 33b4 <ticker_job+0x6c8>
		fp_op_func(uop->status, uop->op_context);
    33ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    33b0:	2000      	movs	r0, #0
    33b2:	4798      	blx	r3
			first = user->first + 1;
    33b4:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    33b6:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    33b8:	3301      	adds	r3, #1
    33ba:	b2db      	uxtb	r3, r3
				first = 0U;
    33bc:	429a      	cmp	r2, r3
    33be:	bf08      	it	eq
    33c0:	2300      	moveq	r3, #0
			user->first = first;
    33c2:	706b      	strb	r3, [r5, #1]
    33c4:	e7bb      	b.n	333e <ticker_job+0x652>
		ticker = &node[_ticker_id_head];
    33c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    33ca:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    33ce:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    33d2:	e7da      	b.n	338a <ticker_job+0x69e>
		_ticks_to_expire += ticker->ticks_to_expire;
    33d4:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    33d6:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    33da:	e7d6      	b.n	338a <ticker_job+0x69e>
	if (ticker_id_old_head == TICKER_NULL) {
    33dc:	9b03      	ldr	r3, [sp, #12]
    33de:	2bff      	cmp	r3, #255	; 0xff
    33e0:	d107      	bne.n	33f2 <ticker_job+0x706>
		ticks_current = cntr_cnt_get();
    33e2:	f002 ff5b 	bl	629c <cntr_cnt_get>
    33e6:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    33e8:	f002 ff32 	bl	6250 <cntr_start>
    33ec:	b908      	cbnz	r0, 33f2 <ticker_job+0x706>
			instance->ticks_current = ticks_current;
    33ee:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    33f2:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    33f6:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    33fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    33fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3402:	260a      	movs	r6, #10
    3404:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    3406:	f002 ff49 	bl	629c <cntr_cnt_get>
		cc = instance->ticks_current;
    340a:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    340e:	1b03      	subs	r3, r0, r4
    3410:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    3414:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    3416:	42ab      	cmp	r3, r5
    3418:	bf2c      	ite	cs
    341a:	18e4      	addcs	r4, r4, r3
    341c:	1964      	addcc	r4, r4, r5
		cc &= HAL_TICKER_CNTR_MASK;
    341e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    3422:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    3424:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    3428:	4620      	mov	r0, r4
    342a:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    342c:	f002 ff36 	bl	629c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    3430:	1bc0      	subs	r0, r0, r7
    3432:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3436:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    3438:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    343a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
    343e:	42a0      	cmp	r0, r4
    3440:	f67f ace4 	bls.w	2e0c <ticker_job+0x120>
		LL_ASSERT(i);
    3444:	3e01      	subs	r6, #1
    3446:	d1de      	bne.n	3406 <ticker_job+0x71a>
    3448:	4040      	eors	r0, r0
    344a:	f380 8811 	msr	BASEPRI, r0
    344e:	f04f 0004 	mov.w	r0, #4
    3452:	df02      	svc	2
	instance->job_guard = 0U;
    3454:	2300      	movs	r3, #0
    3456:	f88b 301e 	strb.w	r3, [fp, #30]
    345a:	e4cd      	b.n	2df8 <ticker_job+0x10c>
	if (!pending) {
    345c:	2b00      	cmp	r3, #0
    345e:	d1f9      	bne.n	3454 <ticker_job+0x768>
		flag_compare_update = 1U;
    3460:	2301      	movs	r3, #1
    3462:	9302      	str	r3, [sp, #8]
    3464:	e4b7      	b.n	2dd6 <ticker_job+0xea>
	while (id_insert !=
    3466:	45b0      	cmp	r8, r6
    3468:	f47f af3c 	bne.w	32e4 <ticker_job+0x5f8>
    346c:	e68f      	b.n	318e <ticker_job+0x4a2>
}
    346e:	b013      	add	sp, #76	; 0x4c
    3470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3474:	ff172b5a 	.word	0xff172b5a
    3478:	7f172b59 	.word	0x7f172b59

0000347c <ticker_init>:
{
    347c:	b570      	push	{r4, r5, r6, lr}
    347e:	9e04      	ldr	r6, [sp, #16]
    3480:	f89d 5014 	ldrb.w	r5, [sp, #20]
	if ((sizeof(struct ticker_node) != TICKER_NODE_T_SIZE) ||
    3484:	b108      	cbz	r0, 348a <ticker_init+0xe>
		return TICKER_STATUS_FAILURE;
    3486:	2001      	movs	r0, #1
    3488:	bd70      	pop	{r4, r5, r6, pc}
	instance->count_node = count_node;
    348a:	4c14      	ldr	r4, [pc, #80]	; (34dc <ticker_init+0x60>)
    348c:	7221      	strb	r1, [r4, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    348e:	9906      	ldr	r1, [sp, #24]
	instance->node = node;
    3490:	6022      	str	r2, [r4, #0]
	instance->count_user = count_user;
    3492:	7263      	strb	r3, [r4, #9]
	instance->user = user;
    3494:	6066      	str	r6, [r4, #4]
    3496:	4622      	mov	r2, r4
	while (count_user--) {
    3498:	3b01      	subs	r3, #1
    349a:	b2db      	uxtb	r3, r3
    349c:	2bff      	cmp	r3, #255	; 0xff
    349e:	d10f      	bne.n	34c0 <ticker_init+0x44>
	if (count_op) {
    34a0:	2d00      	cmp	r5, #0
    34a2:	d1f0      	bne.n	3486 <ticker_init+0xa>
	instance->caller_id_get_cb = caller_id_get_cb;
    34a4:	9907      	ldr	r1, [sp, #28]
    34a6:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    34a8:	9908      	ldr	r1, [sp, #32]
    34aa:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    34ac:	9909      	ldr	r1, [sp, #36]	; 0x24
    34ae:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    34b0:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    34b2:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0U;
    34b4:	6195      	str	r5, [r2, #24]
	instance->ticks_current = 0U;
    34b6:	6155      	str	r5, [r2, #20]
	instance->ticks_elapsed_first = 0U;
    34b8:	7295      	strb	r5, [r2, #10]
	instance->ticks_elapsed_last = 0U;
    34ba:	72d5      	strb	r5, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    34bc:	4628      	mov	r0, r5
}
    34be:	bd70      	pop	{r4, r5, r6, pc}
		users[count_user].user_op = user_op_;
    34c0:	b218      	sxth	r0, r3
    34c2:	eb06 04c0 	add.w	r4, r6, r0, lsl #3
    34c6:	6061      	str	r1, [r4, #4]
		user_op_ += users[count_user].count_user_op;
    34c8:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    34cc:	eb00 0440 	add.w	r4, r0, r0, lsl #1
		count_op -= users[count_user].count_user_op;
    34d0:	1a2d      	subs	r5, r5, r0
		user_op_ += users[count_user].count_user_op;
    34d2:	eb01 1104 	add.w	r1, r1, r4, lsl #4
		count_op -= users[count_user].count_user_op;
    34d6:	b2ed      	uxtb	r5, r5
    34d8:	e7de      	b.n	3498 <ticker_init+0x1c>
    34da:	bf00      	nop
    34dc:	20000198 	.word	0x20000198

000034e0 <ticker_trigger>:
	instance = &_instance[instance_index];
    34e0:	4a07      	ldr	r2, [pc, #28]	; (3500 <ticker_trigger+0x20>)
    34e2:	212c      	movs	r1, #44	; 0x2c
    34e4:	fb00 2301 	mla	r3, r0, r1, r2
{
    34e8:	b410      	push	{r4}
	if (instance->sched_cb) {
    34ea:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    34ec:	b12c      	cbz	r4, 34fa <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    34ee:	46a4      	mov	ip, r4
    34f0:	2201      	movs	r2, #1
    34f2:	2103      	movs	r1, #3
    34f4:	2002      	movs	r0, #2
}
    34f6:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    34f8:	4760      	bx	ip
}
    34fa:	bc10      	pop	{r4}
    34fc:	4770      	bx	lr
    34fe:	bf00      	nop
    3500:	20000198 	.word	0x20000198

00003504 <ticker_start>:
{
    3504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3508:	4f25      	ldr	r7, [pc, #148]	; (35a0 <ticker_start+0x9c>)
    350a:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    350e:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    3510:	fb08 7000 	mla	r0, r8, r0, r7
    3514:	fa0f fc81 	sxth.w	ip, r1
    3518:	f8d0 e004 	ldr.w	lr, [r0, #4]
    351c:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    3520:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    3524:	78f4      	ldrb	r4, [r6, #3]
    3526:	1c65      	adds	r5, r4, #1
    3528:	b2ed      	uxtb	r5, r5
		last = 0U;
    352a:	45ae      	cmp	lr, r5
    352c:	bf98      	it	ls
    352e:	2500      	movls	r5, #0
	if (last == user->first) {
    3530:	f896 e001 	ldrb.w	lr, [r6, #1]
    3534:	45ae      	cmp	lr, r5
    3536:	d02f      	beq.n	3598 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    3538:	f8d6 c004 	ldr.w	ip, [r6, #4]
    353c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3540:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    3544:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    3548:	f04f 0a03 	mov.w	sl, #3
    354c:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    3550:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    3552:	9b08      	ldr	r3, [sp, #32]
    3554:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    3556:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3558:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    355a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    355c:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    355e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3560:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    3562:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    3566:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    3568:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    356a:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    356c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    356e:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    3570:	2302      	movs	r3, #2
    3572:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    3574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3576:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    3578:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    357a:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    357c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    357e:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3580:	6a45      	ldr	r5, [r0, #36]	; 0x24
    3582:	6a03      	ldr	r3, [r0, #32]
    3584:	4608      	mov	r0, r1
    3586:	4798      	blx	r3
    3588:	fb09 7308 	mla	r3, r9, r8, r7
    358c:	2200      	movs	r2, #0
    358e:	2104      	movs	r1, #4
    3590:	47a8      	blx	r5
	return user_op->status;
    3592:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    3598:	2001      	movs	r0, #1
}
    359a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    359e:	bf00      	nop
    35a0:	20000198 	.word	0x20000198

000035a4 <ticker_update>:
{
    35a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    35a8:	4f23      	ldr	r7, [pc, #140]	; (3638 <ticker_update+0x94>)
    35aa:	f04f 082c 	mov.w	r8, #44	; 0x2c
    35ae:	fb08 7e00 	mla	lr, r8, r0, r7
    35b2:	fa0f fc81 	sxth.w	ip, r1
    35b6:	f8de 6004 	ldr.w	r6, [lr, #4]
{
    35ba:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    35bc:	eb06 00cc 	add.w	r0, r6, ip, lsl #3
	if (last >= user->count_user_op) {
    35c0:	f816 603c 	ldrb.w	r6, [r6, ip, lsl #3]
	last = user->last + 1;
    35c4:	78c4      	ldrb	r4, [r0, #3]
    35c6:	1c65      	adds	r5, r4, #1
    35c8:	b2ed      	uxtb	r5, r5
		last = 0U;
    35ca:	42ae      	cmp	r6, r5
    35cc:	bf98      	it	ls
    35ce:	2500      	movls	r5, #0
	if (last == user->first) {
    35d0:	7846      	ldrb	r6, [r0, #1]
    35d2:	42ae      	cmp	r6, r5
    35d4:	d02d      	beq.n	3632 <ticker_update+0x8e>
	user_op = &user->user_op[user->last];
    35d6:	f8d0 a004 	ldr.w	sl, [r0, #4]
    35da:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    35de:	ea4f 1c04 	mov.w	ip, r4, lsl #4
    35e2:	eb0a 040c 	add.w	r4, sl, ip
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    35e6:	2604      	movs	r6, #4
    35e8:	f80a 600c 	strb.w	r6, [sl, ip]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    35ec:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    35ee:	9b08      	ldr	r3, [sp, #32]
    35f0:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    35f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    35f4:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    35f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    35f8:	6123      	str	r3, [r4, #16]
	user_op->params.update.lazy = lazy;
    35fa:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    35fe:	82a3      	strh	r3, [r4, #20]
	user_op->params.update.force = force;
    3600:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    3604:	75a3      	strb	r3, [r4, #22]
	user_op->status = TICKER_STATUS_BUSY;
    3606:	2302      	movs	r3, #2
    3608:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    360a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    360c:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    360e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    3610:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    3612:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    3614:	70c5      	strb	r5, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3616:	f8de 3020 	ldr.w	r3, [lr, #32]
    361a:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    361e:	4608      	mov	r0, r1
    3620:	4798      	blx	r3
    3622:	fb09 7308 	mla	r3, r9, r8, r7
    3626:	2200      	movs	r2, #0
    3628:	4631      	mov	r1, r6
    362a:	47a8      	blx	r5
	return user_op->status;
    362c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    362e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    3632:	2001      	movs	r0, #1
}
    3634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3638:	20000198 	.word	0x20000198

0000363c <ticker_stop>:
{
    363c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3640:	f8df 906c 	ldr.w	r9, [pc, #108]	; 36b0 <ticker_stop+0x74>
    3644:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    3648:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    364c:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    364e:	f8de 0004 	ldr.w	r0, [lr, #4]
    3652:	b20e      	sxth	r6, r1
    3654:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    3658:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    365c:	78fc      	ldrb	r4, [r7, #3]
    365e:	1c65      	adds	r5, r4, #1
    3660:	b2ed      	uxtb	r5, r5
		last = 0U;
    3662:	42a8      	cmp	r0, r5
    3664:	bf98      	it	ls
    3666:	2500      	movls	r5, #0
	if (last == user->first) {
    3668:	7878      	ldrb	r0, [r7, #1]
    366a:	42a8      	cmp	r0, r5
    366c:	d01d      	beq.n	36aa <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    366e:	6878      	ldr	r0, [r7, #4]
    3670:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3674:	0124      	lsls	r4, r4, #4
    3676:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    3678:	f04f 0c05 	mov.w	ip, #5
    367c:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    3680:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    3682:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    3684:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    3686:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    3688:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    368a:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    368c:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    368e:	f8de 3020 	ldr.w	r3, [lr, #32]
    3692:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    3696:	4608      	mov	r0, r1
    3698:	4798      	blx	r3
    369a:	fb08 930a 	mla	r3, r8, sl, r9
    369e:	2200      	movs	r2, #0
    36a0:	2104      	movs	r1, #4
    36a2:	47a0      	blx	r4
	return user_op->status;
    36a4:	6a70      	ldr	r0, [r6, #36]	; 0x24
    36a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    36aa:	2001      	movs	r0, #1
}
    36ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    36b0:	20000198 	.word	0x20000198

000036b4 <ticker_next_slot_get>:
{
    36b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    36b8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 3734 <ticker_next_slot_get+0x80>
    36bc:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    36c0:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    36c2:	fb0a 8000 	mla	r0, sl, r0, r8
    36c6:	fa0f fe81 	sxth.w	lr, r1
    36ca:	6845      	ldr	r5, [r0, #4]
    36cc:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    36d0:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    36d4:	78fc      	ldrb	r4, [r7, #3]
    36d6:	1c66      	adds	r6, r4, #1
    36d8:	b2f6      	uxtb	r6, r6
		last = 0U;
    36da:	42b5      	cmp	r5, r6
    36dc:	bf98      	it	ls
    36de:	2600      	movls	r6, #0
	if (last == user->first) {
    36e0:	787d      	ldrb	r5, [r7, #1]
    36e2:	42b5      	cmp	r5, r6
    36e4:	d023      	beq.n	372e <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    36e6:	f8d7 c004 	ldr.w	ip, [r7, #4]
    36ea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    36ee:	0125      	lsls	r5, r4, #4
    36f0:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    36f4:	f04f 0e02 	mov.w	lr, #2
    36f8:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    36fc:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    36fe:	9b08      	ldr	r3, [sp, #32]
    3700:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    3702:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3704:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    3706:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    3708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    370a:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    370c:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    370e:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    3712:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    3714:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3716:	6a45      	ldr	r5, [r0, #36]	; 0x24
    3718:	6a03      	ldr	r3, [r0, #32]
    371a:	4608      	mov	r0, r1
    371c:	4798      	blx	r3
    371e:	fb09 830a 	mla	r3, r9, sl, r8
    3722:	2200      	movs	r2, #0
    3724:	2104      	movs	r1, #4
    3726:	47a8      	blx	r5
	return user_op->status;
    3728:	6a60      	ldr	r0, [r4, #36]	; 0x24
    372a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    372e:	2001      	movs	r0, #1
}
    3730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3734:	20000198 	.word	0x20000198

00003738 <ticker_job_idle_get>:
{
    3738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    373c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 37ac <ticker_job_idle_get+0x74>
    3740:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    3744:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    3748:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    374a:	f8de 0004 	ldr.w	r0, [lr, #4]
    374e:	b20e      	sxth	r6, r1
    3750:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    3754:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    3758:	78fc      	ldrb	r4, [r7, #3]
    375a:	1c65      	adds	r5, r4, #1
    375c:	b2ed      	uxtb	r5, r5
		last = 0U;
    375e:	42a8      	cmp	r0, r5
    3760:	bf98      	it	ls
    3762:	2500      	movls	r5, #0
	if (last == user->first) {
    3764:	7878      	ldrb	r0, [r7, #1]
    3766:	42a8      	cmp	r0, r5
    3768:	d01d      	beq.n	37a6 <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    376a:	6878      	ldr	r0, [r7, #4]
    376c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3770:	0124      	lsls	r4, r4, #4
    3772:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    3774:	f04f 0c01 	mov.w	ip, #1
    3778:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    377c:	20ff      	movs	r0, #255	; 0xff
    377e:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    3780:	2002      	movs	r0, #2
    3782:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    3784:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    3786:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    3788:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    378a:	f8de 3020 	ldr.w	r3, [lr, #32]
    378e:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    3792:	4608      	mov	r0, r1
    3794:	4798      	blx	r3
    3796:	fb08 930a 	mla	r3, r8, sl, r9
    379a:	2200      	movs	r2, #0
    379c:	2104      	movs	r1, #4
    379e:	47a0      	blx	r4
	return user_op->status;
    37a0:	6a70      	ldr	r0, [r6, #36]	; 0x24
    37a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    37a6:	2001      	movs	r0, #1
}
    37a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    37ac:	20000198 	.word	0x20000198

000037b0 <ticker_job_sched>:
{
    37b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    37b4:	4c08      	ldr	r4, [pc, #32]	; (37d8 <ticker_job_sched+0x28>)
    37b6:	252c      	movs	r5, #44	; 0x2c
    37b8:	fb05 4300 	mla	r3, r5, r0, r4
{
    37bc:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    37be:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    37c0:	6a1b      	ldr	r3, [r3, #32]
    37c2:	4608      	mov	r0, r1
    37c4:	4798      	blx	r3
    37c6:	fb06 4305 	mla	r3, r6, r5, r4
    37ca:	46bc      	mov	ip, r7
    37cc:	2200      	movs	r2, #0
    37ce:	2104      	movs	r1, #4
}
    37d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    37d4:	4760      	bx	ip
    37d6:	bf00      	nop
    37d8:	20000198 	.word	0x20000198

000037dc <ticker_ticks_now_get>:
	return cntr_cnt_get();
    37dc:	f002 bd5e 	b.w	629c <cntr_cnt_get>

000037e0 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    37e0:	1a40      	subs	r0, r0, r1
}
    37e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    37e6:	4770      	bx	lr

000037e8 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    37e8:	b508      	push	{r3, lr}
    37ea:	4603      	mov	r3, r0
	if (addr_type > 1) {
    37ec:	2b01      	cmp	r3, #1
{
    37ee:	4608      	mov	r0, r1
	if (addr_type > 1) {
    37f0:	d80e      	bhi.n	3810 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    37f2:	b133      	cbz	r3, 3802 <ll_addr_get+0x1a>
		if (bdaddr) {
    37f4:	b119      	cbz	r1, 37fe <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    37f6:	2206      	movs	r2, #6
    37f8:	4906      	ldr	r1, [pc, #24]	; (3814 <ll_addr_get+0x2c>)
    37fa:	f7fe fb7b 	bl	1ef4 <memcpy>
		}

		return rnd_addr;
    37fe:	4805      	ldr	r0, [pc, #20]	; (3814 <ll_addr_get+0x2c>)
    3800:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    3802:	b119      	cbz	r1, 380c <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    3804:	2206      	movs	r2, #6
    3806:	4904      	ldr	r1, [pc, #16]	; (3818 <ll_addr_get+0x30>)
    3808:	f7fe fb74 	bl	1ef4 <memcpy>
	}

	return pub_addr;
    380c:	4802      	ldr	r0, [pc, #8]	; (3818 <ll_addr_get+0x30>)
}
    380e:	bd08      	pop	{r3, pc}
		return NULL;
    3810:	2000      	movs	r0, #0
    3812:	bd08      	pop	{r3, pc}
    3814:	200001ca 	.word	0x200001ca
    3818:	200001c4 	.word	0x200001c4

0000381c <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    381c:	b570      	push	{r4, r5, r6, lr}
    381e:	4606      	mov	r6, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
	    ll_adv_is_enabled(0)) {
    3820:	2000      	movs	r0, #0
{
    3822:	460d      	mov	r5, r1
	    ll_adv_is_enabled(0)) {
    3824:	f001 fef6 	bl	5614 <ll_adv_is_enabled>
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
    3828:	4604      	mov	r4, r0
    382a:	b948      	cbnz	r0, 3840 <ll_addr_set+0x24>
	    (ll_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    382c:	2206      	movs	r2, #6
    382e:	4629      	mov	r1, r5
	if (addr_type) {
    3830:	b126      	cbz	r6, 383c <ll_addr_set+0x20>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    3832:	4804      	ldr	r0, [pc, #16]	; (3844 <ll_addr_set+0x28>)
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    3834:	f7fe fb5e 	bl	1ef4 <memcpy>
	}

	return 0;
}
    3838:	4620      	mov	r0, r4
    383a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    383c:	4802      	ldr	r0, [pc, #8]	; (3848 <ll_addr_set+0x2c>)
    383e:	e7f9      	b.n	3834 <ll_addr_set+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
    3840:	240c      	movs	r4, #12
    3842:	e7f9      	b.n	3838 <ll_addr_set+0x1c>
    3844:	200001ca 	.word	0x200001ca
    3848:	200001c4 	.word	0x200001c4

0000384c <ll_tx_pwr_lvl_get>:
	/* TODO: check for active connection */

	/* TODO: check type here for current or maximum */

	/* TODO: Support TX Power Level other than 0dBm */
	*tx_pwr_lvl = 0;
    384c:	2000      	movs	r0, #0
    384e:	7010      	strb	r0, [r2, #0]

	return 0;
}
    3850:	4770      	bx	lr

00003852 <ll_tx_pwr_get>:

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    3852:	2300      	movs	r3, #0
    3854:	7003      	strb	r3, [r0, #0]
	*max = 0;
    3856:	700b      	strb	r3, [r1, #0]
    3858:	4770      	bx	lr
	...

0000385c <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    385c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    385e:	4802      	ldr	r0, [pc, #8]	; (3868 <_hci_driver_init+0xc>)
    3860:	f7fe fd46 	bl	22f0 <bt_hci_driver_register>

	return 0;
}
    3864:	2000      	movs	r0, #0
    3866:	bd08      	pop	{r3, pc}
    3868:	0000921c 	.word	0x0000921c

0000386c <hci_driver_send>:
{
    386c:	b513      	push	{r0, r1, r4, lr}
	if (!buf->len) {
    386e:	8983      	ldrh	r3, [r0, #12]
{
    3870:	4604      	mov	r4, r0
	if (!buf->len) {
    3872:	b1a3      	cbz	r3, 389e <hci_driver_send+0x32>
	switch (type) {
    3874:	7d03      	ldrb	r3, [r0, #20]
    3876:	b993      	cbnz	r3, 389e <hci_driver_send+0x32>
	void *node_rx = NULL;
    3878:	a902      	add	r1, sp, #8
    387a:	f841 3d04 	str.w	r3, [r1, #-4]!
	evt = hci_cmd_handle(buf, &node_rx);
    387e:	f000 f91d 	bl	3abc <hci_cmd_handle>
	if (evt) {
    3882:	b130      	cbz	r0, 3892 <hci_driver_send+0x26>
		bt_recv_prio(evt);
    3884:	f7fe fcee 	bl	2264 <bt_recv_prio>
		if (node_rx) {
    3888:	9901      	ldr	r1, [sp, #4]
    388a:	b111      	cbz	r1, 3892 <hci_driver_send+0x26>
			k_fifo_put(&recv_fifo, node_rx);
    388c:	4805      	ldr	r0, [pc, #20]	; (38a4 <hci_driver_send+0x38>)
    388e:	f004 fa8f 	bl	7db0 <k_queue_append>
		net_buf_unref(buf);
    3892:	4620      	mov	r0, r4
    3894:	f003 fa02 	bl	6c9c <net_buf_unref>
	return err;
    3898:	2000      	movs	r0, #0
}
    389a:	b002      	add	sp, #8
    389c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    389e:	f06f 0015 	mvn.w	r0, #21
    38a2:	e7fa      	b.n	389a <hci_driver_send+0x2e>
    38a4:	20002ab8 	.word	0x20002ab8

000038a8 <recv_thread>:
{
    38a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    38aa:	4d1c      	ldr	r5, [pc, #112]	; (391c <recv_thread+0x74>)
		radio_rx_fc_set(node_rx->hdr.handle, 0);
    38ac:	2600      	movs	r6, #0
    38ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    38b2:	4628      	mov	r0, r5
    38b4:	f004 faa0 	bl	7df8 <_impl_k_queue_get>
		if (node_rx && !buf) {
    38b8:	4604      	mov	r4, r0
    38ba:	b318      	cbz	r0, 3904 <recv_thread+0x5c>
	s8_t class = hci_get_class(node_rx);
    38bc:	f000 fc9c 	bl	41f8 <hci_get_class>
	switch (class) {
    38c0:	2802      	cmp	r0, #2
    38c2:	9401      	str	r4, [sp, #4]
    38c4:	d821      	bhi.n	390a <recv_thread+0x62>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    38c6:	2801      	cmp	r0, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    38c8:	bf0e      	itee	eq
    38ca:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    38cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    38d0:	2001      	movne	r0, #1
    38d2:	f7fe ff45 	bl	2760 <bt_buf_get_rx>
    38d6:	4604      	mov	r4, r0
		if (buf) {
    38d8:	b118      	cbz	r0, 38e2 <recv_thread+0x3a>
			hci_evt_encode(node_rx, buf);
    38da:	4601      	mov	r1, r0
    38dc:	9801      	ldr	r0, [sp, #4]
    38de:	f000 fbcf 	bl	4080 <hci_evt_encode>
		radio_rx_fc_set(node_rx->hdr.handle, 0);
    38e2:	9b01      	ldr	r3, [sp, #4]
    38e4:	2100      	movs	r1, #0
    38e6:	88d8      	ldrh	r0, [r3, #6]
    38e8:	f001 ff38 	bl	575c <radio_rx_fc_set>
	node_rx->hdr.next = NULL;
    38ec:	a802      	add	r0, sp, #8
    38ee:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    38f2:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    38f4:	f001 ff16 	bl	5724 <ll_rx_mem_release>
		if (buf) {
    38f8:	b124      	cbz	r4, 3904 <recv_thread+0x5c>
			if (buf->len) {
    38fa:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    38fc:	4620      	mov	r0, r4
			if (buf->len) {
    38fe:	b153      	cbz	r3, 3916 <recv_thread+0x6e>
				bt_recv(buf);
    3900:	f7fe fc88 	bl	2214 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    3904:	f004 fcc0 	bl	8288 <_impl_k_yield>
    3908:	e7d1      	b.n	38ae <recv_thread+0x6>
		LL_ASSERT(0);
    390a:	4040      	eors	r0, r0
    390c:	f380 8811 	msr	BASEPRI, r0
    3910:	f04f 0004 	mov.w	r0, #4
    3914:	df02      	svc	2
				net_buf_unref(buf);
    3916:	f003 f9c1 	bl	6c9c <net_buf_unref>
    391a:	e7f3      	b.n	3904 <recv_thread+0x5c>
    391c:	20002ab8 	.word	0x20002ab8

00003920 <prio_recv_thread>:
{
    3920:	b537      	push	{r0, r1, r2, r4, r5, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    3922:	4c0c      	ldr	r4, [pc, #48]	; (3954 <prio_recv_thread+0x34>)
			k_fifo_put(&recv_fifo, node_rx);
    3924:	4d0c      	ldr	r5, [pc, #48]	; (3958 <prio_recv_thread+0x38>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    3926:	f10d 0102 	add.w	r1, sp, #2
    392a:	a801      	add	r0, sp, #4
    392c:	f001 fe94 	bl	5658 <ll_rx_get>
    3930:	2800      	cmp	r0, #0
    3932:	d1f8      	bne.n	3926 <prio_recv_thread+0x6>
		if (node_rx) {
    3934:	9b01      	ldr	r3, [sp, #4]
    3936:	b133      	cbz	r3, 3946 <prio_recv_thread+0x26>
			ll_rx_dequeue();
    3938:	f001 fec6 	bl	56c8 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    393c:	9901      	ldr	r1, [sp, #4]
    393e:	4628      	mov	r0, r5
    3940:	f004 fa36 	bl	7db0 <k_queue_append>
    3944:	e7ef      	b.n	3926 <prio_recv_thread+0x6>
    3946:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    394a:	4620      	mov	r0, r4
    394c:	f004 fcfc 	bl	8348 <_impl_k_sem_take>
    3950:	e7e9      	b.n	3926 <prio_recv_thread+0x6>
    3952:	bf00      	nop
    3954:	20002a8c 	.word	0x20002a8c
    3958:	20002ab8 	.word	0x20002ab8

0000395c <hci_driver_open>:
{
    395c:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    395e:	4814      	ldr	r0, [pc, #80]	; (39b0 <hci_driver_open+0x54>)
{
    3960:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    3962:	f002 f8e9 	bl	5b38 <ll_init>
	if (err) {
    3966:	4604      	mov	r4, r0
    3968:	b9f8      	cbnz	r0, 39aa <hci_driver_open+0x4e>
	hci_init(NULL);
    396a:	f000 fc57 	bl	421c <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    396e:	f06f 0309 	mvn.w	r3, #9
    3972:	9303      	str	r3, [sp, #12]
    3974:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    3978:	4b0e      	ldr	r3, [pc, #56]	; (39b4 <hci_driver_open+0x58>)
    397a:	490f      	ldr	r1, [pc, #60]	; (39b8 <hci_driver_open+0x5c>)
    397c:	9405      	str	r4, [sp, #20]
    397e:	9404      	str	r4, [sp, #16]
    3980:	9402      	str	r4, [sp, #8]
    3982:	9401      	str	r4, [sp, #4]
    3984:	9400      	str	r4, [sp, #0]
    3986:	480d      	ldr	r0, [pc, #52]	; (39bc <hci_driver_open+0x60>)
    3988:	f004 fd88 	bl	849c <_impl_k_thread_create>
    398c:	f06f 0307 	mvn.w	r3, #7
    3990:	9303      	str	r3, [sp, #12]
    3992:	9405      	str	r4, [sp, #20]
    3994:	9404      	str	r4, [sp, #16]
    3996:	9402      	str	r4, [sp, #8]
    3998:	9401      	str	r4, [sp, #4]
    399a:	9400      	str	r4, [sp, #0]
    399c:	4b08      	ldr	r3, [pc, #32]	; (39c0 <hci_driver_open+0x64>)
    399e:	4909      	ldr	r1, [pc, #36]	; (39c4 <hci_driver_open+0x68>)
    39a0:	4809      	ldr	r0, [pc, #36]	; (39c8 <hci_driver_open+0x6c>)
    39a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    39a6:	f004 fd79 	bl	849c <_impl_k_thread_create>
}
    39aa:	4620      	mov	r0, r4
    39ac:	b006      	add	sp, #24
    39ae:	bd10      	pop	{r4, pc}
    39b0:	20002a8c 	.word	0x20002a8c
    39b4:	00003921 	.word	0x00003921
    39b8:	20001110 	.word	0x20001110
    39bc:	200001d0 	.word	0x200001d0
    39c0:	000038a9 	.word	0x000038a9
    39c4:	200012d0 	.word	0x200012d0
    39c8:	2000023c 	.word	0x2000023c

000039cc <sys_put_le32>:
	dst[1] = val >> 8;
    39cc:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    39d0:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    39d2:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    39d4:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    39d6:	0a00      	lsrs	r0, r0, #8
    39d8:	704b      	strb	r3, [r1, #1]
    39da:	70c8      	strb	r0, [r1, #3]
    39dc:	4770      	bx	lr

000039de <sys_get_le64>:
{
    39de:	4603      	mov	r3, r0
}
    39e0:	6800      	ldr	r0, [r0, #0]
    39e2:	6859      	ldr	r1, [r3, #4]
    39e4:	4770      	bx	lr

000039e6 <meta_evt>:
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    39e6:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
    39e8:	f100 0408 	add.w	r4, r0, #8
{
    39ec:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    39ee:	4620      	mov	r0, r4
    39f0:	2102      	movs	r1, #2
{
    39f2:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    39f4:	f003 f984 	bl	6d00 <net_buf_simple_add>
	hdr->evt = evt;
    39f8:	233e      	movs	r3, #62	; 0x3e
    39fa:	7003      	strb	r3, [r0, #0]
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    39fc:	1c6b      	adds	r3, r5, #1
	hdr->len = len;
    39fe:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
    3a00:	2101      	movs	r1, #1
    3a02:	4620      	mov	r0, r4
    3a04:	f003 f97c 	bl	6d00 <net_buf_simple_add>
	me->subevent = subevt;
    3a08:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    3a0a:	4629      	mov	r1, r5
    3a0c:	4620      	mov	r0, r4
}
    3a0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    3a12:	f003 b975 	b.w	6d00 <net_buf_simple_add>
	...

00003a18 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    3a18:	b570      	push	{r4, r5, r6, lr}
    3a1a:	4604      	mov	r4, r0
    3a1c:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3a1e:	4b13      	ldr	r3, [pc, #76]	; (3a6c <le_remote_feat_complete+0x54>)
{
    3a20:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3a22:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a26:	2200      	movs	r2, #0
    3a28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    3a2c:	4313      	orrs	r3, r2
{
    3a2e:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3a30:	d01b      	beq.n	3a6a <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    3a32:	4b0f      	ldr	r3, [pc, #60]	; (3a70 <le_remote_feat_complete+0x58>)
    3a34:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a38:	2300      	movs	r3, #0
    3a3a:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3a3e:	4313      	orrs	r3, r2
    3a40:	d013      	beq.n	3a6a <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    3a42:	220b      	movs	r2, #11
    3a44:	2104      	movs	r1, #4
    3a46:	f7ff ffce 	bl	39e6 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    3a4a:	2208      	movs	r2, #8
	sep->status = status;
    3a4c:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    3a4e:	f8a0 6001 	strh.w	r6, [r0, #1]
    3a52:	3003      	adds	r0, #3
	if (!status) {
    3a54:	b924      	cbnz	r4, 3a60 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    3a56:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    3a58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    3a5c:	f7fe ba4a 	b.w	1ef4 <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    3a60:	2100      	movs	r1, #0
}
    3a62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    3a66:	f7fe ba71 	b.w	1f4c <memset>
    3a6a:	bd70      	pop	{r4, r5, r6, pc}
    3a6c:	200028d0 	.word	0x200028d0
    3a70:	200028d8 	.word	0x200028d8

00003a74 <cmd_complete>:
{
    3a74:	b538      	push	{r3, r4, r5, lr}
    3a76:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    3a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    3a7c:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    3a7e:	f7fe fe7f 	bl	2780 <bt_buf_get_cmd_complete>
	hdr = net_buf_add(buf, sizeof(*hdr));
    3a82:	2102      	movs	r1, #2
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    3a84:	6020      	str	r0, [r4, #0]
	hdr = net_buf_add(buf, sizeof(*hdr));
    3a86:	3008      	adds	r0, #8
    3a88:	f003 f93a 	bl	6d00 <net_buf_simple_add>
	hdr->evt = evt;
    3a8c:	230e      	movs	r3, #14
    3a8e:	7003      	strb	r3, [r0, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    3a90:	1ceb      	adds	r3, r5, #3
	hdr->len = len;
    3a92:	7043      	strb	r3, [r0, #1]
	cc = net_buf_add(*buf, sizeof(*cc));
    3a94:	6820      	ldr	r0, [r4, #0]
    3a96:	2103      	movs	r1, #3
    3a98:	3008      	adds	r0, #8
    3a9a:	f003 f931 	bl	6d00 <net_buf_simple_add>
	cc->ncmd = 1;
    3a9e:	2301      	movs	r3, #1
    3aa0:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    3aa2:	4b05      	ldr	r3, [pc, #20]	; (3ab8 <cmd_complete+0x44>)
    3aa4:	881b      	ldrh	r3, [r3, #0]
    3aa6:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    3aaa:	6820      	ldr	r0, [r4, #0]
    3aac:	4629      	mov	r1, r5
    3aae:	3008      	adds	r0, #8
}
    3ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    3ab4:	f003 b924 	b.w	6d00 <net_buf_simple_add>
    3ab8:	200002a8 	.word	0x200002a8

00003abc <hci_cmd_handle>:
{
    3abc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    3abe:	8981      	ldrh	r1, [r0, #12]
{
    3ac0:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    3ac2:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    3ac4:	2902      	cmp	r1, #2
{
    3ac6:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    3ac8:	950c      	str	r5, [sp, #48]	; 0x30
	if (cmd->len < sizeof(*chdr)) {
    3aca:	d802      	bhi.n	3ad2 <hci_cmd_handle+0x16>
		return NULL;
    3acc:	2000      	movs	r0, #0
}
    3ace:	b013      	add	sp, #76	; 0x4c
    3ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    3ad2:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    3ad4:	4ec9      	ldr	r6, [pc, #804]	; (3dfc <hci_cmd_handle+0x340>)
    3ad6:	781a      	ldrb	r2, [r3, #0]
    3ad8:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    3ada:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    3adc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    3ae0:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    3ae2:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    3ae4:	d8f2      	bhi.n	3acc <hci_cmd_handle+0x10>
	net_buf_pull(cmd, sizeof(*chdr));
    3ae6:	2103      	movs	r1, #3
    3ae8:	f104 0008 	add.w	r0, r4, #8
    3aec:	f003 f917 	bl	6d1e <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    3af0:	8833      	ldrh	r3, [r6, #0]
    3af2:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    3af6:	0a9b      	lsrs	r3, r3, #10
    3af8:	2b04      	cmp	r3, #4
    3afa:	d05f      	beq.n	3bbc <hci_cmd_handle+0x100>
    3afc:	d807      	bhi.n	3b0e <hci_cmd_handle+0x52>
    3afe:	2b03      	cmp	r3, #3
    3b00:	d024      	beq.n	3b4c <hci_cmd_handle+0x90>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    3b02:	2101      	movs	r1, #1
    3b04:	a80c      	add	r0, sp, #48	; 0x30
    3b06:	f7ff ffb5 	bl	3a74 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    3b0a:	2301      	movs	r3, #1
    3b0c:	e0f1      	b.n	3cf2 <hci_cmd_handle+0x236>
	switch (BT_OGF(_opcode)) {
    3b0e:	2b08      	cmp	r3, #8
    3b10:	f000 80d5 	beq.w	3cbe <hci_cmd_handle+0x202>
    3b14:	2b3f      	cmp	r3, #63	; 0x3f
    3b16:	d1f4      	bne.n	3b02 <hci_cmd_handle+0x46>
	switch (ocf) {
    3b18:	3a01      	subs	r2, #1
    3b1a:	2a09      	cmp	r2, #9
    3b1c:	d8f1      	bhi.n	3b02 <hci_cmd_handle+0x46>
    3b1e:	a301      	add	r3, pc, #4	; (adr r3, 3b24 <hci_cmd_handle+0x68>)
    3b20:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    3b24:	00003e9b 	.word	0x00003e9b
    3b28:	00003ec9 	.word	0x00003ec9
    3b2c:	00003ef1 	.word	0x00003ef1
    3b30:	00003b03 	.word	0x00003b03
    3b34:	00003b03 	.word	0x00003b03
    3b38:	00003f3d 	.word	0x00003f3d
    3b3c:	00003b03 	.word	0x00003b03
    3b40:	00003f07 	.word	0x00003f07
    3b44:	00003f47 	.word	0x00003f47
    3b48:	00003fb3 	.word	0x00003fb3
	switch (ocf) {
    3b4c:	2a03      	cmp	r2, #3
    3b4e:	d014      	beq.n	3b7a <hci_cmd_handle+0xbe>
    3b50:	d808      	bhi.n	3b64 <hci_cmd_handle+0xa8>
    3b52:	2a01      	cmp	r2, #1
    3b54:	d1d5      	bne.n	3b02 <hci_cmd_handle+0x46>
	event_mask = sys_get_le64(cmd->events);
    3b56:	68a0      	ldr	r0, [r4, #8]
    3b58:	f7ff ff41 	bl	39de <sys_get_le64>
    3b5c:	4ba8      	ldr	r3, [pc, #672]	; (3e00 <hci_cmd_handle+0x344>)
    3b5e:	e9c3 0100 	strd	r0, r1, [r3]
    3b62:	e003      	b.n	3b6c <hci_cmd_handle+0xb0>
	switch (ocf) {
    3b64:	2a2d      	cmp	r2, #45	; 0x2d
    3b66:	d017      	beq.n	3b98 <hci_cmd_handle+0xdc>
    3b68:	2a63      	cmp	r2, #99	; 0x63
    3b6a:	d1ca      	bne.n	3b02 <hci_cmd_handle+0x46>
	ccst = cmd_complete(evt, sizeof(*ccst));
    3b6c:	2101      	movs	r1, #1
    3b6e:	a80c      	add	r0, sp, #48	; 0x30
    3b70:	f7ff ff80 	bl	3a74 <cmd_complete>
	ccst->status = 0x00;
    3b74:	7005      	strb	r5, [r0, #0]
	return evt;
    3b76:	980c      	ldr	r0, [sp, #48]	; 0x30
    3b78:	e7a9      	b.n	3ace <hci_cmd_handle+0x12>
	event_mask = DEFAULT_EVENT_MASK;
    3b7a:	4ba1      	ldr	r3, [pc, #644]	; (3e00 <hci_cmd_handle+0x344>)
    3b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3b80:	f641 71ff 	movw	r1, #8191	; 0x1fff
    3b84:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    3b88:	4b9e      	ldr	r3, [pc, #632]	; (3e04 <hci_cmd_handle+0x348>)
    3b8a:	201f      	movs	r0, #31
    3b8c:	2100      	movs	r1, #0
    3b8e:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    3b92:	f001 fce7 	bl	5564 <ll_reset>
    3b96:	e7e9      	b.n	3b6c <hci_cmd_handle+0xb0>
    3b98:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    3b9a:	2104      	movs	r1, #4
    3b9c:	a80c      	add	r0, sp, #48	; 0x30
	handle = sys_le16_to_cpu(cmd->handle);
    3b9e:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    3ba0:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    3ba2:	f7ff ff67 	bl	3a74 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    3ba6:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    3ba8:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    3baa:	1cc2      	adds	r2, r0, #3
    3bac:	4639      	mov	r1, r7
    3bae:	4630      	mov	r0, r6
    3bb0:	f7ff fe4c 	bl	384c <ll_tx_pwr_lvl_get>
	rp->handle = sys_cpu_to_le16(handle);
    3bb4:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = status;
    3bb8:	7020      	strb	r0, [r4, #0]
    3bba:	e7dc      	b.n	3b76 <hci_cmd_handle+0xba>
	switch (ocf) {
    3bbc:	3a01      	subs	r2, #1
    3bbe:	2a08      	cmp	r2, #8
    3bc0:	d89f      	bhi.n	3b02 <hci_cmd_handle+0x46>
    3bc2:	a301      	add	r3, pc, #4	; (adr r3, 3bc8 <hci_cmd_handle+0x10c>)
    3bc4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    3bc8:	00003bed 	.word	0x00003bed
    3bcc:	00003c17 	.word	0x00003c17
    3bd0:	00003c8b 	.word	0x00003c8b
    3bd4:	00003b03 	.word	0x00003b03
    3bd8:	00003b03 	.word	0x00003b03
    3bdc:	00003b03 	.word	0x00003b03
    3be0:	00003b03 	.word	0x00003b03
    3be4:	00003b03 	.word	0x00003b03
    3be8:	00003ca7 	.word	0x00003ca7
	rp = cmd_complete(evt, sizeof(*rp));
    3bec:	2109      	movs	r1, #9
    3bee:	a80c      	add	r0, sp, #48	; 0x30
    3bf0:	f7ff ff40 	bl	3a74 <cmd_complete>
	rp->status = 0x00;
    3bf4:	2300      	movs	r3, #0
    3bf6:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    3bf8:	7083      	strb	r3, [r0, #2]
    3bfa:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(CONFIG_BT_CTLR_COMPANY_ID);
    3bfc:	f06f 030e 	mvn.w	r3, #14
    3c00:	7143      	strb	r3, [r0, #5]
    3c02:	2305      	movs	r3, #5
	rp->hci_version = LL_VERSION_NUMBER;
    3c04:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(CONFIG_BT_CTLR_COMPANY_ID);
    3c06:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(CONFIG_BT_CTLR_SUBVERSION_NUMBER);
    3c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = LL_VERSION_NUMBER;
    3c0c:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
    3c0e:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(CONFIG_BT_CTLR_SUBVERSION_NUMBER);
    3c10:	71c3      	strb	r3, [r0, #7]
    3c12:	7203      	strb	r3, [r0, #8]
    3c14:	e7af      	b.n	3b76 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3c16:	2141      	movs	r1, #65	; 0x41
    3c18:	a80c      	add	r0, sp, #48	; 0x30
    3c1a:	f7ff ff2b 	bl	3a74 <cmd_complete>
	rp->status = 0x00;
    3c1e:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3c20:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    3c22:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    3c24:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    3c28:	f7fe f990 	bl	1f4c <memset>
	rp->commands[2] |= BIT(7);
    3c2c:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[27] |= BIT(6) | BIT(7);
    3c2e:	7f21      	ldrb	r1, [r4, #28]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    3c30:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[2] |= BIT(7);
    3c32:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3c36:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    3c38:	79a3      	ldrb	r3, [r4, #6]
    3c3a:	f063 033f 	orn	r3, r3, #63	; 0x3f
    3c3e:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    3c40:	7ae3      	ldrb	r3, [r4, #11]
    3c42:	f043 0304 	orr.w	r3, r3, #4
    3c46:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    3c48:	7be3      	ldrb	r3, [r4, #15]
    3c4a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    3c4e:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    3c50:	7c23      	ldrb	r3, [r4, #16]
    3c52:	f043 0302 	orr.w	r3, r3, #2
    3c56:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    3c58:	7de3      	ldrb	r3, [r4, #23]
    3c5a:	f043 0304 	orr.w	r3, r3, #4
    3c5e:	75e3      	strb	r3, [r4, #23]
	rp->commands[26] |= BIT(6) | BIT(7);
    3c60:	7ee3      	ldrb	r3, [r4, #27]
	rp->commands[27] |= BIT(6) | BIT(7);
    3c62:	f061 013c 	orn	r1, r1, #60	; 0x3c
	rp->commands[26] |= BIT(0) | BIT(1);
    3c66:	f063 033c 	orn	r3, r3, #60	; 0x3c
	rp->commands[27] |= BIT(6) | BIT(7);
    3c6a:	7721      	strb	r1, [r4, #28]
	rp->commands[26] |= BIT(0) | BIT(1);
    3c6c:	76e3      	strb	r3, [r4, #27]
	rp->commands[28] |= BIT(3);
    3c6e:	7f61      	ldrb	r1, [r4, #29]
	rp->commands[38] |= BIT(7);
    3c70:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
    3c74:	f041 0108 	orr.w	r1, r1, #8
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    3c78:	f062 0208 	orn	r2, r2, #8
	rp->commands[38] |= BIT(7);
    3c7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
    3c80:	7761      	strb	r1, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    3c82:	76a2      	strb	r2, [r4, #26]
	rp->commands[38] |= BIT(7);
    3c84:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    3c88:	e775      	b.n	3b76 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3c8a:	2109      	movs	r1, #9
    3c8c:	a80c      	add	r0, sp, #48	; 0x30
    3c8e:	f7ff fef1 	bl	3a74 <cmd_complete>
	rp->status = 0x00;
    3c92:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3c94:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    3c96:	2208      	movs	r2, #8
	rp->status = 0x00;
    3c98:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    3c9c:	f7fe f956 	bl	1f4c <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    3ca0:	2360      	movs	r3, #96	; 0x60
    3ca2:	7163      	strb	r3, [r4, #5]
    3ca4:	e767      	b.n	3b76 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3ca6:	2107      	movs	r1, #7
    3ca8:	a80c      	add	r0, sp, #48	; 0x30
    3caa:	f7ff fee3 	bl	3a74 <cmd_complete>
	rp->status = 0x00;
    3cae:	4601      	mov	r1, r0
    3cb0:	2300      	movs	r3, #0
    3cb2:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    3cb6:	4618      	mov	r0, r3
    3cb8:	f7ff fd96 	bl	37e8 <ll_addr_get>
    3cbc:	e75b      	b.n	3b76 <hci_cmd_handle+0xba>
	switch (ocf) {
    3cbe:	2a0a      	cmp	r2, #10
    3cc0:	f000 80e5 	beq.w	3e8e <hci_cmd_handle+0x3d2>
    3cc4:	d829      	bhi.n	3d1a <hci_cmd_handle+0x25e>
    3cc6:	2a05      	cmp	r2, #5
    3cc8:	f000 8083 	beq.w	3dd2 <hci_cmd_handle+0x316>
    3ccc:	d813      	bhi.n	3cf6 <hci_cmd_handle+0x23a>
    3cce:	2a02      	cmp	r2, #2
    3cd0:	d061      	beq.n	3d96 <hci_cmd_handle+0x2da>
    3cd2:	2a03      	cmp	r2, #3
    3cd4:	d06b      	beq.n	3dae <hci_cmd_handle+0x2f2>
    3cd6:	2a01      	cmp	r2, #1
    3cd8:	f47f af13 	bne.w	3b02 <hci_cmd_handle+0x46>
	le_event_mask = sys_get_le64(cmd->events);
    3cdc:	68a0      	ldr	r0, [r4, #8]
    3cde:	f7ff fe7e 	bl	39de <sys_get_le64>
    3ce2:	4b48      	ldr	r3, [pc, #288]	; (3e04 <hci_cmd_handle+0x348>)
    3ce4:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    3ce8:	2101      	movs	r1, #1
    3cea:	a80c      	add	r0, sp, #48	; 0x30
    3cec:	f7ff fec2 	bl	3a74 <cmd_complete>
	ccst->status = 0x00;
    3cf0:	2300      	movs	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    3cf2:	7003      	strb	r3, [r0, #0]
    3cf4:	e73f      	b.n	3b76 <hci_cmd_handle+0xba>
	switch (ocf) {
    3cf6:	2a07      	cmp	r2, #7
    3cf8:	f000 8153 	beq.w	3fa2 <hci_cmd_handle+0x4e6>
    3cfc:	f0c0 80a8 	bcc.w	3e50 <hci_cmd_handle+0x394>
    3d00:	2a08      	cmp	r2, #8
    3d02:	f000 80bd 	beq.w	3e80 <hci_cmd_handle+0x3c4>
    3d06:	2a09      	cmp	r2, #9
    3d08:	f47f aefb 	bne.w	3b02 <hci_cmd_handle+0x46>
    3d0c:	68a3      	ldr	r3, [r4, #8]
	status = ll_adv_scan_rsp_set(0, cmd->len, &cmd->data[0]);
    3d0e:	2000      	movs	r0, #0
    3d10:	1c5a      	adds	r2, r3, #1
    3d12:	7819      	ldrb	r1, [r3, #0]
    3d14:	f002 f935 	bl	5f82 <ll_adv_scan_rsp_set>
    3d18:	e05f      	b.n	3dda <hci_cmd_handle+0x31e>
	switch (ocf) {
    3d1a:	2a12      	cmp	r2, #18
    3d1c:	d078      	beq.n	3e10 <hci_cmd_handle+0x354>
    3d1e:	d810      	bhi.n	3d42 <hci_cmd_handle+0x286>
    3d20:	2a10      	cmp	r2, #16
    3d22:	d061      	beq.n	3de8 <hci_cmd_handle+0x32c>
    3d24:	d870      	bhi.n	3e08 <hci_cmd_handle+0x34c>
    3d26:	2a0f      	cmp	r2, #15
    3d28:	f47f aeeb 	bne.w	3b02 <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    3d2c:	2102      	movs	r1, #2
    3d2e:	a80c      	add	r0, sp, #48	; 0x30
    3d30:	f7ff fea0 	bl	3a74 <cmd_complete>
	rp->status = 0x00;
    3d34:	2300      	movs	r3, #0
    3d36:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    3d38:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    3d3a:	f002 f9d7 	bl	60ec <ll_wl_size_get>
    3d3e:	7060      	strb	r0, [r4, #1]
    3d40:	e719      	b.n	3b76 <hci_cmd_handle+0xba>
	switch (ocf) {
    3d42:	2a18      	cmp	r2, #24
    3d44:	d068      	beq.n	3e18 <hci_cmd_handle+0x35c>
    3d46:	d815      	bhi.n	3d74 <hci_cmd_handle+0x2b8>
    3d48:	2a17      	cmp	r2, #23
    3d4a:	f47f aeda 	bne.w	3b02 <hci_cmd_handle+0x46>
    3d4e:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    3d50:	2300      	movs	r3, #0
    3d52:	aa0d      	add	r2, sp, #52	; 0x34
    3d54:	f100 0110 	add.w	r1, r0, #16
    3d58:	f002 fad8 	bl	630c <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    3d5c:	2111      	movs	r1, #17
    3d5e:	a80c      	add	r0, sp, #48	; 0x30
    3d60:	f7ff fe88 	bl	3a74 <cmd_complete>
	rp->status = 0x00;
    3d64:	2300      	movs	r3, #0
    3d66:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    3d6a:	2210      	movs	r2, #16
    3d6c:	a90d      	add	r1, sp, #52	; 0x34
	memcpy(rp->info, build_info, sizeof(build_info));
    3d6e:	f7fe f8c1 	bl	1ef4 <memcpy>
    3d72:	e700      	b.n	3b76 <hci_cmd_handle+0xba>
	switch (ocf) {
    3d74:	2a1c      	cmp	r2, #28
    3d76:	d05a      	beq.n	3e2e <hci_cmd_handle+0x372>
    3d78:	2a4b      	cmp	r2, #75	; 0x4b
    3d7a:	f47f aec2 	bne.w	3b02 <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    3d7e:	2103      	movs	r1, #3
    3d80:	a80c      	add	r0, sp, #48	; 0x30
    3d82:	f7ff fe77 	bl	3a74 <cmd_complete>
	rp->status = 0x00;
    3d86:	4601      	mov	r1, r0
    3d88:	2300      	movs	r3, #0
    3d8a:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    3d8e:	3001      	adds	r0, #1
    3d90:	f7ff fd5f 	bl	3852 <ll_tx_pwr_get>
    3d94:	e6ef      	b.n	3b76 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3d96:	2104      	movs	r1, #4
    3d98:	a80c      	add	r0, sp, #48	; 0x30
    3d9a:	f7ff fe6b 	bl	3a74 <cmd_complete>
	rp->status = 0x00;
    3d9e:	2300      	movs	r3, #0
    3da0:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
    3da2:	221b      	movs	r2, #27
    3da4:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    3da6:	2303      	movs	r3, #3
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
    3da8:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    3daa:	70c3      	strb	r3, [r0, #3]
    3dac:	e6e3      	b.n	3b76 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3dae:	2109      	movs	r1, #9
    3db0:	a80c      	add	r0, sp, #48	; 0x30
    3db2:	f7ff fe5f 	bl	3a74 <cmd_complete>
	rp->status = 0x00;
    3db6:	2500      	movs	r5, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3db8:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    3dba:	2208      	movs	r2, #8
	rp->status = 0x00;
    3dbc:	f800 5b01 	strb.w	r5, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    3dc0:	4629      	mov	r1, r5
    3dc2:	f7fe f8c3 	bl	1f4c <memset>
	rp->features[1] = (LL_FEAT >> 8)  & 0xFF;
    3dc6:	2340      	movs	r3, #64	; 0x40
    3dc8:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (LL_FEAT >> 16)  & 0xFF;
    3dca:	2301      	movs	r3, #1
	rp->features[0] = LL_FEAT & 0xFF;
    3dcc:	7065      	strb	r5, [r4, #1]
	rp->features[2] = (LL_FEAT >> 16)  & 0xFF;
    3dce:	70e3      	strb	r3, [r4, #3]
    3dd0:	e6d1      	b.n	3b76 <hci_cmd_handle+0xba>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    3dd2:	68a1      	ldr	r1, [r4, #8]
    3dd4:	2001      	movs	r0, #1
    3dd6:	f7ff fd21 	bl	381c <ll_addr_set>
	status = ll_adv_enable(0, cmd->enable);
    3dda:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    3ddc:	2101      	movs	r1, #1
    3dde:	a80c      	add	r0, sp, #48	; 0x30
    3de0:	f7ff fe48 	bl	3a74 <cmd_complete>
	ccst->status = status;
    3de4:	7004      	strb	r4, [r0, #0]
    3de6:	e6c6      	b.n	3b76 <hci_cmd_handle+0xba>
	ccst = cmd_complete(evt, sizeof(*ccst));
    3de8:	2101      	movs	r1, #1
    3dea:	a80c      	add	r0, sp, #48	; 0x30
    3dec:	f7ff fe42 	bl	3a74 <cmd_complete>
    3df0:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    3df2:	f002 f97d 	bl	60f0 <ll_wl_clear>
    3df6:	7020      	strb	r0, [r4, #0]
    3df8:	e6bd      	b.n	3b76 <hci_cmd_handle+0xba>
    3dfa:	bf00      	nop
    3dfc:	200002a8 	.word	0x200002a8
    3e00:	200028d0 	.word	0x200028d0
    3e04:	200028d8 	.word	0x200028d8
	status = ll_wl_add(&cmd->addr);
    3e08:	68a0      	ldr	r0, [r4, #8]
    3e0a:	f002 f987 	bl	611c <ll_wl_add>
    3e0e:	e7e4      	b.n	3dda <hci_cmd_handle+0x31e>
	status = ll_wl_remove(&cmd->addr);
    3e10:	68a0      	ldr	r0, [r4, #8]
    3e12:	f002 f9bb 	bl	618c <ll_wl_remove>
    3e16:	e7e0      	b.n	3dda <hci_cmd_handle+0x31e>
	rp = cmd_complete(evt, sizeof(*rp));
    3e18:	2109      	movs	r1, #9
    3e1a:	a80c      	add	r0, sp, #48	; 0x30
    3e1c:	f7ff fe2a 	bl	3a74 <cmd_complete>
	rp->status = 0x00;
    3e20:	2300      	movs	r3, #0
    3e22:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    3e26:	2108      	movs	r1, #8
    3e28:	f000 fa0a 	bl	4240 <bt_rand>
    3e2c:	e6a3      	b.n	3b76 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3e2e:	2109      	movs	r1, #9
    3e30:	a80c      	add	r0, sp, #48	; 0x30
    3e32:	f7ff fe1f 	bl	3a74 <cmd_complete>
	rp->status = 0x00;
    3e36:	4601      	mov	r1, r0
    3e38:	2200      	movs	r2, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3e3a:	4604      	mov	r4, r0
	rp->status = 0x00;
    3e3c:	f801 2b01 	strb.w	r2, [r1], #1
	sys_put_le32(val, dst);
    3e40:	2003      	movs	r0, #3
    3e42:	f7ff fdc3 	bl	39cc <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    3e46:	1d61      	adds	r1, r4, #5
    3e48:	4610      	mov	r0, r2
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    3e4a:	f7ff fdbf 	bl	39cc <sys_put_le32>
    3e4e:	e692      	b.n	3b76 <hci_cmd_handle+0xba>
    3e50:	68a0      	ldr	r0, [r4, #8]
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    3e52:	2100      	movs	r1, #0
    3e54:	7903      	ldrb	r3, [r0, #4]
    3e56:	8802      	ldrh	r2, [r0, #0]
    3e58:	910a      	str	r1, [sp, #40]	; 0x28
    3e5a:	9109      	str	r1, [sp, #36]	; 0x24
    3e5c:	9108      	str	r1, [sp, #32]
    3e5e:	9107      	str	r1, [sp, #28]
    3e60:	9106      	str	r1, [sp, #24]
    3e62:	9105      	str	r1, [sp, #20]
    3e64:	7b84      	ldrb	r4, [r0, #14]
    3e66:	9404      	str	r4, [sp, #16]
    3e68:	7b44      	ldrb	r4, [r0, #13]
    3e6a:	9403      	str	r4, [sp, #12]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    3e6c:	1dc4      	adds	r4, r0, #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    3e6e:	9402      	str	r4, [sp, #8]
    3e70:	7984      	ldrb	r4, [r0, #6]
    3e72:	9401      	str	r4, [sp, #4]
    3e74:	7940      	ldrb	r0, [r0, #5]
    3e76:	9000      	str	r0, [sp, #0]
    3e78:	4608      	mov	r0, r1
    3e7a:	f001 fee5 	bl	5c48 <ll_adv_params_set>
    3e7e:	e7ac      	b.n	3dda <hci_cmd_handle+0x31e>
    3e80:	68a3      	ldr	r3, [r4, #8]
	status = ll_adv_data_set(0, cmd->len, &cmd->data[0]);
    3e82:	2000      	movs	r0, #0
    3e84:	1c5a      	adds	r2, r3, #1
    3e86:	7819      	ldrb	r1, [r3, #0]
    3e88:	f002 f822 	bl	5ed0 <ll_adv_data_set>
    3e8c:	e7a5      	b.n	3dda <hci_cmd_handle+0x31e>
	status = ll_adv_enable(0, cmd->enable);
    3e8e:	68a3      	ldr	r3, [r4, #8]
    3e90:	4628      	mov	r0, r5
    3e92:	7819      	ldrb	r1, [r3, #0]
    3e94:	f002 f8bc 	bl	6010 <ll_adv_enable>
    3e98:	e79f      	b.n	3dda <hci_cmd_handle+0x31e>
	rp = cmd_complete(evt, sizeof(*rp));
    3e9a:	210d      	movs	r1, #13
    3e9c:	a80c      	add	r0, sp, #48	; 0x30
    3e9e:	f7ff fde9 	bl	3a74 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    3ea2:	2202      	movs	r2, #2
    3ea4:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    3ea6:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    3ea8:	2201      	movs	r2, #1
    3eaa:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    3eac:	220d      	movs	r2, #13
	rp->status = 0x00;
    3eae:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    3eb0:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    3eb2:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    3eb4:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    3eb6:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    3eb8:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    3eba:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    3ebc:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    3ebe:	7242      	strb	r2, [r0, #9]
    3ec0:	7283      	strb	r3, [r0, #10]
    3ec2:	72c3      	strb	r3, [r0, #11]
    3ec4:	7303      	strb	r3, [r0, #12]
    3ec6:	e656      	b.n	3b76 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3ec8:	2141      	movs	r1, #65	; 0x41
    3eca:	a80c      	add	r0, sp, #48	; 0x30
    3ecc:	f7ff fdd2 	bl	3a74 <cmd_complete>
	rp->status = 0x00;
    3ed0:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3ed2:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    3ed4:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    3ed6:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    3eda:	f7fe f837 	bl	1f4c <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    3ede:	7863      	ldrb	r3, [r4, #1]
    3ee0:	f063 0358 	orn	r3, r3, #88	; 0x58
    3ee4:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    3ee6:	78a3      	ldrb	r3, [r4, #2]
    3ee8:	f043 0303 	orr.w	r3, r3, #3
    3eec:	70a3      	strb	r3, [r4, #2]
    3eee:	e642      	b.n	3b76 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3ef0:	2109      	movs	r1, #9
    3ef2:	a80c      	add	r0, sp, #48	; 0x30
    3ef4:	f7ff fdbe 	bl	3a74 <cmd_complete>
	rp->status = 0x00;
    3ef8:	2100      	movs	r1, #0
    3efa:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    3efe:	2208      	movs	r2, #8
		(void)memset(rp->er, 0x00, sizeof(rp->er));
    3f00:	f7fe f824 	bl	1f4c <memset>
    3f04:	e637      	b.n	3b76 <hci_cmd_handle+0xba>
	const char build_info[] = HCI_VS_BUILD_INFO;
    3f06:	4b5d      	ldr	r3, [pc, #372]	; (407c <hci_cmd_handle+0x5c0>)
    3f08:	aa0d      	add	r2, sp, #52	; 0x34
    3f0a:	f103 0610 	add.w	r6, r3, #16
    3f0e:	4615      	mov	r5, r2
    3f10:	6818      	ldr	r0, [r3, #0]
    3f12:	6859      	ldr	r1, [r3, #4]
    3f14:	4614      	mov	r4, r2
    3f16:	c403      	stmia	r4!, {r0, r1}
    3f18:	3308      	adds	r3, #8
    3f1a:	42b3      	cmp	r3, r6
    3f1c:	4622      	mov	r2, r4
    3f1e:	d1f7      	bne.n	3f10 <hci_cmd_handle+0x454>
    3f20:	8819      	ldrh	r1, [r3, #0]
    3f22:	789b      	ldrb	r3, [r3, #2]
    3f24:	8021      	strh	r1, [r4, #0]
    3f26:	70a3      	strb	r3, [r4, #2]
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    3f28:	2114      	movs	r1, #20
    3f2a:	a80c      	add	r0, sp, #48	; 0x30
    3f2c:	f7ff fda2 	bl	3a74 <cmd_complete>
	rp->status = 0x00;
    3f30:	2300      	movs	r3, #0
    3f32:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    3f36:	2213      	movs	r2, #19
    3f38:	4629      	mov	r1, r5
    3f3a:	e718      	b.n	3d6e <hci_cmd_handle+0x2b2>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    3f3c:	68a1      	ldr	r1, [r4, #8]
    3f3e:	2000      	movs	r0, #0
    3f40:	f7ff fc6c 	bl	381c <ll_addr_set>
    3f44:	e6d0      	b.n	3ce8 <hci_cmd_handle+0x22c>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    3f46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3f4a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    3f4e:	3201      	adds	r2, #1
    3f50:	d106      	bne.n	3f60 <hci_cmd_handle+0x4a4>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    3f52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    3f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    3f5a:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    3f5c:	4293      	cmp	r3, r2
    3f5e:	d020      	beq.n	3fa2 <hci_cmd_handle+0x4e6>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    3f60:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    3f64:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    3f68:	07db      	lsls	r3, r3, #31
    3f6a:	d51a      	bpl.n	3fa2 <hci_cmd_handle+0x4e6>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    3f6c:	2118      	movs	r1, #24
    3f6e:	a80c      	add	r0, sp, #48	; 0x30
    3f70:	f7ff fd80 	bl	3a74 <cmd_complete>
		rp->status = 0x00;
    3f74:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    3f76:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    3f78:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    3f7a:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    3f7c:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    3f7e:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    3f82:	1ca1      	adds	r1, r4, #2
    3f84:	f7ff fd22 	bl	39cc <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    3f88:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    3f8c:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    3f8e:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    3f92:	f063 033f 	orn	r3, r3, #63	; 0x3f
    3f96:	71e3      	strb	r3, [r4, #7]
		(void)memset(addr->ir, 0x00, sizeof(addr->ir));
    3f98:	2210      	movs	r2, #16
    3f9a:	4631      	mov	r1, r6
    3f9c:	f104 0008 	add.w	r0, r4, #8
    3fa0:	e7ae      	b.n	3f00 <hci_cmd_handle+0x444>
	rp = cmd_complete(evt, sizeof(*rp));
    3fa2:	2102      	movs	r1, #2
    3fa4:	a80c      	add	r0, sp, #48	; 0x30
    3fa6:	f7ff fd65 	bl	3a74 <cmd_complete>
	rp->status = 0x00;
    3faa:	2300      	movs	r3, #0
    3fac:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    3fae:	7043      	strb	r3, [r0, #1]
    3fb0:	e5e1      	b.n	3b76 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3fb2:	2121      	movs	r1, #33	; 0x21
    3fb4:	a80c      	add	r0, sp, #48	; 0x30
    3fb6:	f7ff fd5d 	bl	3a74 <cmd_complete>
	rp->status = 0x00;
    3fba:	4603      	mov	r3, r0
    3fbc:	2200      	movs	r2, #0
    3fbe:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    3fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    3fc6:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    3fc8:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    3fcc:	3101      	adds	r1, #1
    3fce:	d04b      	beq.n	4068 <hci_cmd_handle+0x5ac>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    3fd0:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    3fd4:	3101      	adds	r1, #1
    3fd6:	d047      	beq.n	4068 <hci_cmd_handle+0x5ac>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    3fd8:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    3fdc:	3101      	adds	r1, #1
    3fde:	d043      	beq.n	4068 <hci_cmd_handle+0x5ac>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    3fe0:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    3fe4:	3101      	adds	r1, #1
    3fe6:	d03f      	beq.n	4068 <hci_cmd_handle+0x5ac>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    3fe8:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    3fec:	4619      	mov	r1, r3
    3fee:	f7ff fced 	bl	39cc <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    3ff2:	1d61      	adds	r1, r4, #5
    3ff4:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    3ff8:	f7ff fce8 	bl	39cc <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    3ffc:	f104 0109 	add.w	r1, r4, #9
    4000:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    4004:	f7ff fce2 	bl	39cc <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    4008:	f104 010d 	add.w	r1, r4, #13
    400c:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    4010:	f7ff fcdc 	bl	39cc <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    4014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4018:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    401c:	3301      	adds	r3, #1
    401e:	f104 0311 	add.w	r3, r4, #17
    4022:	d027      	beq.n	4074 <hci_cmd_handle+0x5b8>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    4024:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    4028:	3101      	adds	r1, #1
    402a:	d023      	beq.n	4074 <hci_cmd_handle+0x5b8>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    402c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    4030:	3101      	adds	r1, #1
    4032:	d01f      	beq.n	4074 <hci_cmd_handle+0x5b8>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    4034:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    4038:	3101      	adds	r1, #1
    403a:	d01b      	beq.n	4074 <hci_cmd_handle+0x5b8>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    403c:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    4040:	4619      	mov	r1, r3
    4042:	f7ff fcc3 	bl	39cc <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    4046:	f104 0115 	add.w	r1, r4, #21
    404a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    404e:	f7ff fcbd 	bl	39cc <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    4052:	f104 0119 	add.w	r1, r4, #25
    4056:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    405a:	f7ff fcb7 	bl	39cc <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    405e:	f104 011d 	add.w	r1, r4, #29
    4062:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    4066:	e6f0      	b.n	3e4a <hci_cmd_handle+0x38e>
		(void)memset(rp->ir, 0x00, sizeof(rp->ir));
    4068:	2210      	movs	r2, #16
    406a:	2100      	movs	r1, #0
    406c:	4618      	mov	r0, r3
    406e:	f7fd ff6d 	bl	1f4c <memset>
    4072:	e7cf      	b.n	4014 <hci_cmd_handle+0x558>
		(void)memset(rp->er, 0x00, sizeof(rp->er));
    4074:	2210      	movs	r2, #16
    4076:	2100      	movs	r1, #0
    4078:	4618      	mov	r0, r3
    407a:	e741      	b.n	3f00 <hci_cmd_handle+0x444>
    407c:	0000923b 	.word	0x0000923b

00004080 <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    4080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4084:	460b      	mov	r3, r1
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    4086:	7901      	ldrb	r1, [r0, #4]
    4088:	2902      	cmp	r1, #2
{
    408a:	b093      	sub	sp, #76	; 0x4c
    408c:	4604      	mov	r4, r0
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    408e:	d065      	beq.n	415c <hci_evt_encode+0xdc>
	switch (node_rx->hdr.type) {
    4090:	2907      	cmp	r1, #7
    4092:	f040 809b 	bne.w	41cc <hci_evt_encode+0x14c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4096:	4a50      	ldr	r2, [pc, #320]	; (41d8 <hci_evt_encode+0x158>)
    4098:	e9d2 0100 	ldrd	r0, r1, [r2]
    409c:	2000      	movs	r0, #0
    409e:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
    40a2:	ea50 0201 	orrs.w	r2, r0, r1
    40a6:	f104 050a 	add.w	r5, r4, #10
    40aa:	d008      	beq.n	40be <hci_evt_encode+0x3e>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    40ac:	4a4b      	ldr	r2, [pc, #300]	; (41dc <hci_evt_encode+0x15c>)
    40ae:	e9d2 0100 	ldrd	r0, r1, [r2]
    40b2:	2100      	movs	r1, #0
    40b4:	f400 2080 	and.w	r0, r0, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    40b8:	ea50 0201 	orrs.w	r2, r0, r1
    40bc:	d13d      	bne.n	413a <hci_evt_encode+0xba>
		addr.type = adv->tx_addr;
    40be:	7a23      	ldrb	r3, [r4, #8]
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    40c0:	2206      	movs	r2, #6
		addr.type = adv->tx_addr;
    40c2:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    40c6:	4629      	mov	r1, r5
    40c8:	f10d 0019 	add.w	r0, sp, #25
		addr.type = adv->tx_addr;
    40cc:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    40d0:	f7fd ff10 	bl	1ef4 <memcpy>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    40d4:	f89d 3018 	ldrb.w	r3, [sp, #24]
    40d8:	ac08      	add	r4, sp, #32
    40da:	2b03      	cmp	r3, #3
    40dc:	d827      	bhi.n	412e <hci_evt_encode+0xae>
    40de:	e8df f003 	tbb	[pc, r3]
    40e2:	2002      	.short	0x2002
    40e4:	2422      	.short	0x2422
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    40e6:	493e      	ldr	r1, [pc, #248]	; (41e0 <hci_evt_encode+0x160>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    40e8:	4620      	mov	r0, r4
    40ea:	f7fd fed7 	bl	1e9c <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    40ee:	f89d 2019 	ldrb.w	r2, [sp, #25]
    40f2:	9204      	str	r2, [sp, #16]
    40f4:	f89d 201a 	ldrb.w	r2, [sp, #26]
    40f8:	9203      	str	r2, [sp, #12]
    40fa:	f89d 201b 	ldrb.w	r2, [sp, #27]
    40fe:	9202      	str	r2, [sp, #8]
    4100:	f89d 201c 	ldrb.w	r2, [sp, #28]
    4104:	9201      	str	r2, [sp, #4]
    4106:	f89d 201d 	ldrb.w	r2, [sp, #29]
    410a:	9200      	str	r2, [sp, #0]
    410c:	f89d 301e 	ldrb.w	r3, [sp, #30]
    4110:	9405      	str	r4, [sp, #20]
    4112:	4a34      	ldr	r2, [pc, #208]	; (41e4 <hci_evt_encode+0x164>)
    4114:	211b      	movs	r1, #27
    4116:	a80b      	add	r0, sp, #44	; 0x2c
    4118:	f7fc ff48 	bl	fac <snprintk>
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    411c:	b013      	add	sp, #76	; 0x4c
    411e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		strcpy(type, "random");
    4122:	4931      	ldr	r1, [pc, #196]	; (41e8 <hci_evt_encode+0x168>)
    4124:	e7e0      	b.n	40e8 <hci_evt_encode+0x68>
		strcpy(type, "public id");
    4126:	4931      	ldr	r1, [pc, #196]	; (41ec <hci_evt_encode+0x16c>)
    4128:	e7de      	b.n	40e8 <hci_evt_encode+0x68>
		strcpy(type, "random id");
    412a:	4931      	ldr	r1, [pc, #196]	; (41f0 <hci_evt_encode+0x170>)
    412c:	e7dc      	b.n	40e8 <hci_evt_encode+0x68>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    412e:	4a31      	ldr	r2, [pc, #196]	; (41f4 <hci_evt_encode+0x174>)
    4130:	210a      	movs	r1, #10
    4132:	4620      	mov	r0, r4
    4134:	f7fc ff3a 	bl	fac <snprintk>
    4138:	e7d9      	b.n	40ee <hci_evt_encode+0x6e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    413a:	2208      	movs	r2, #8
    413c:	2113      	movs	r1, #19
    413e:	4618      	mov	r0, r3
    4140:	f7ff fc51 	bl	39e6 <meta_evt>
	sep->handle = 0;
    4144:	2300      	movs	r3, #0
    4146:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    4148:	7a23      	ldrb	r3, [r4, #8]
    414a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    414e:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    4150:	2206      	movs	r2, #6
    4152:	4629      	mov	r1, r5
    4154:	3002      	adds	r0, #2
    4156:	f7fd fecd 	bl	1ef4 <memcpy>
    415a:	e7df      	b.n	411c <hci_evt_encode+0x9c>
	switch (pdu_data->llctrl.opcode) {
    415c:	7ac5      	ldrb	r5, [r0, #11]
    415e:	88c6      	ldrh	r6, [r0, #6]
    4160:	2d09      	cmp	r5, #9
    4162:	d00a      	beq.n	417a <hci_evt_encode+0xfa>
    4164:	2d0c      	cmp	r5, #12
    4166:	d00f      	beq.n	4188 <hci_evt_encode+0x108>
    4168:	2d07      	cmp	r5, #7
    416a:	d12f      	bne.n	41cc <hci_evt_encode+0x14c>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    416c:	7b02      	ldrb	r2, [r0, #12]
    416e:	2a0e      	cmp	r2, #14
    4170:	d1d4      	bne.n	411c <hci_evt_encode+0x9c>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    4172:	4632      	mov	r2, r6
    4174:	2100      	movs	r1, #0
    4176:	201a      	movs	r0, #26
    4178:	e003      	b.n	4182 <hci_evt_encode+0x102>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    417a:	f100 0108 	add.w	r1, r0, #8
    417e:	4632      	mov	r2, r6
    4180:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    4182:	f7ff fc49 	bl	3a18 <le_remote_feat_complete>
    4186:	e7c9      	b.n	411c <hci_evt_encode+0x9c>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    4188:	4a13      	ldr	r2, [pc, #76]	; (41d8 <hci_evt_encode+0x158>)
    418a:	e9d2 8900 	ldrd	r8, r9, [r2]
    418e:	f04f 0900 	mov.w	r9, #0
    4192:	f408 6800 	and.w	r8, r8, #2048	; 0x800
    4196:	ea58 0209 	orrs.w	r2, r8, r9
    419a:	d0bf      	beq.n	411c <hci_evt_encode+0x9c>
	hdr = net_buf_add(buf, sizeof(*hdr));
    419c:	f103 0708 	add.w	r7, r3, #8
    41a0:	4638      	mov	r0, r7
    41a2:	f002 fdad 	bl	6d00 <net_buf_simple_add>
	hdr->len = len;
    41a6:	2108      	movs	r1, #8
	hdr->evt = evt;
    41a8:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    41aa:	7041      	strb	r1, [r0, #1]
	ep = net_buf_add(buf, sizeof(*ep));
    41ac:	4638      	mov	r0, r7
    41ae:	f002 fda7 	bl	6d00 <net_buf_simple_add>
	ep->status = 0x00;
    41b2:	2300      	movs	r3, #0
    41b4:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    41b6:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    41ba:	7b23      	ldrb	r3, [r4, #12]
    41bc:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    41be:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    41c2:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    41c4:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    41c8:	80c3      	strh	r3, [r0, #6]
    41ca:	e7a7      	b.n	411c <hci_evt_encode+0x9c>
		LL_ASSERT(0);
    41cc:	4040      	eors	r0, r0
    41ce:	f380 8811 	msr	BASEPRI, r0
    41d2:	f04f 0004 	mov.w	r0, #4
    41d6:	df02      	svc	2
    41d8:	200028d0 	.word	0x200028d0
    41dc:	200028d8 	.word	0x200028d8
    41e0:	0000924e 	.word	0x0000924e
    41e4:	00009277 	.word	0x00009277
    41e8:	00009255 	.word	0x00009255
    41ec:	0000925c 	.word	0x0000925c
    41f0:	00009266 	.word	0x00009266
    41f4:	00009270 	.word	0x00009270

000041f8 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    41f8:	7903      	ldrb	r3, [r0, #4]
    41fa:	2b02      	cmp	r3, #2
    41fc:	d005      	beq.n	420a <hci_get_class+0x12>

		switch (node_rx->hdr.type) {
    41fe:	2b07      	cmp	r3, #7
#endif /* CONFIG_BT_CTLR_PHY */
			return HCI_CLASS_EVT_CONNECTION;
#endif /* CONFIG_BT_CONN */

		default:
			return -1;
    4200:	bf0c      	ite	eq
    4202:	2001      	moveq	r0, #1
    4204:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    4208:	4770      	bx	lr
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    420a:	7a03      	ldrb	r3, [r0, #8]
    420c:	f003 0303 	and.w	r3, r3, #3
    4210:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    4212:	bf0c      	ite	eq
    4214:	2002      	moveq	r0, #2
    4216:	2003      	movne	r0, #3
	}
}
    4218:	4770      	bx	lr
	...

0000421c <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    421c:	4b06      	ldr	r3, [pc, #24]	; (4238 <hci_init+0x1c>)
    421e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4222:	f641 71ff 	movw	r1, #8191	; 0x1fff
    4226:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    422a:	4b04      	ldr	r3, [pc, #16]	; (423c <hci_init+0x20>)
    422c:	201f      	movs	r0, #31
    422e:	2100      	movs	r1, #0
    4230:	e9c3 0100 	strd	r0, r1, [r3]
    4234:	4770      	bx	lr
    4236:	bf00      	nop
    4238:	200028d0 	.word	0x200028d0
    423c:	200028d8 	.word	0x200028d8

00004240 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    4240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4242:	4607      	mov	r7, r0
    4244:	460e      	mov	r6, r1
	u8_t *buf8 = buf;

	while (len) {
    4246:	460c      	mov	r4, r1
    4248:	1b35      	subs	r5, r6, r4
    424a:	443d      	add	r5, r7
    424c:	b18c      	cbz	r4, 4272 <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    424e:	f7fd f849 	bl	12e4 <sys_rand32_get>

		if (len >= sizeof(v)) {
    4252:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    4254:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    4256:	d907      	bls.n	4268 <bt_rand+0x28>
			memcpy(buf8, &v, sizeof(v));
    4258:	2204      	movs	r2, #4
    425a:	eb0d 0102 	add.w	r1, sp, r2
    425e:	4628      	mov	r0, r5
    4260:	f7fd fe48 	bl	1ef4 <memcpy>

			buf8 += sizeof(v);
			len -= sizeof(v);
    4264:	3c04      	subs	r4, #4
    4266:	e7ef      	b.n	4248 <bt_rand+0x8>
		} else {
			memcpy(buf8, &v, len);
    4268:	4622      	mov	r2, r4
    426a:	a901      	add	r1, sp, #4
    426c:	4628      	mov	r0, r5
    426e:	f7fd fe41 	bl	1ef4 <memcpy>
			break;
		}
	}

	return 0;
}
    4272:	2000      	movs	r0, #0
    4274:	b003      	add	sp, #12
    4276:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004278 <cpu_sleep>:
 * SPDX-License-Identifier: Apache-2.0
 */

static inline void cpu_sleep(void)
{
	__WFE();
    4278:	bf20      	wfe
	__SEV();
    427a:	bf40      	sev
	__WFE();
    427c:	bf20      	wfe
    427e:	4770      	bx	lr

00004280 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    4280:	6008      	str	r0, [r1, #0]
    4282:	4770      	bx	lr

00004284 <mayfly_xtal_start>:
static void mayfly_xtal_start(void *params)
{
	ARG_UNUSED(params);

	/* turn on 16MHz clock, non-blocking mode. */
	clock_control_on(_radio.hf_clock, NULL);
    4284:	4b02      	ldr	r3, [pc, #8]	; (4290 <mayfly_xtal_start+0xc>)
    4286:	6818      	ldr	r0, [r3, #0]
    4288:	6843      	ldr	r3, [r0, #4]
    428a:	2100      	movs	r1, #0
    428c:	681b      	ldr	r3, [r3, #0]
    428e:	4718      	bx	r3
    4290:	200002ac 	.word	0x200002ac

00004294 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    4294:	b918      	cbnz	r0, 429e <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    4296:	680b      	ldr	r3, [r1, #0]
    4298:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    429c:	600b      	str	r3, [r1, #0]
    429e:	4770      	bx	lr

000042a0 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    42a0:	b918      	cbnz	r0, 42aa <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    42a2:	680b      	ldr	r3, [r1, #0]
    42a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    42a8:	600b      	str	r3, [r1, #0]
    42aa:	4770      	bx	lr

000042ac <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_PHY */
#endif /* CONFIG_BT_CONN */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    42ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    42b0:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    42b2:	4294      	cmp	r4, r2
{
    42b4:	4681      	mov	r9, r0
    42b6:	460f      	mov	r7, r1
    42b8:	4690      	mov	r8, r2
	if (_first == last) {
    42ba:	d03d      	beq.n	4338 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0U;
	*handle = _radio.pkt_release[_first].handle;
    42bc:	4e1f      	ldr	r6, [pc, #124]	; (433c <tx_cmplt_get+0x90>)
    42be:	f8d6 3168 	ldr.w	r3, [r6, #360]	; 0x168
    42c2:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    42c6:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
    42c8:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    42ca:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    42ce:	f506 7aae 	add.w	sl, r6, #348	; 0x15c
		if (*handle != _radio.pkt_release[_first].handle) {
    42d2:	b222      	sxth	r2, r4
    42d4:	f8d6 0168 	ldr.w	r0, [r6, #360]	; 0x168
    42d8:	f8b9 e000 	ldrh.w	lr, [r9]
    42dc:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    42e0:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    42e4:	4596      	cmp	lr, r2
    42e6:	d120      	bne.n	432a <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    42e8:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    42ea:	2801      	cmp	r0, #1
    42ec:	f020 0303 	bic.w	r3, r0, #3
    42f0:	d90a      	bls.n	4308 <tx_cmplt_get+0x5c>
    42f2:	b1f3      	cbz	r3, 4332 <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    42f4:	1d02      	adds	r2, r0, #4
    42f6:	d01c      	beq.n	4332 <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    42f8:	7942      	ldrb	r2, [r0, #5]
    42fa:	b1d2      	cbz	r2, 4332 <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    42fc:	7902      	ldrb	r2, [r0, #4]
    42fe:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    4302:	3a01      	subs	r2, #1
    4304:	2a01      	cmp	r2, #1
    4306:	d814      	bhi.n	4332 <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    4308:	2201      	movs	r2, #1
			cmplt++;
    430a:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    430c:	604a      	str	r2, [r1, #4]
			cmplt++;
    430e:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    4310:	b113      	cbz	r3, 4318 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    4312:	4651      	mov	r1, sl
    4314:	f7fe fa97 	bl	2846 <mem_release>
		}

		_first = _first + 1;
    4318:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    431a:	f896 216c 	ldrb.w	r2, [r6, #364]	; 0x16c
		_first = _first + 1;
    431e:	b2e4      	uxtb	r4, r4
			_first = 0U;
    4320:	42a2      	cmp	r2, r4
    4322:	bf08      	it	eq
    4324:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    4326:	4544      	cmp	r4, r8
    4328:	d1d3      	bne.n	42d2 <tx_cmplt_get+0x26>

	*first = _first;
    432a:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    432c:	4628      	mov	r0, r5
    432e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    4332:	f8c1 b004 	str.w	fp, [r1, #4]
    4336:	e7eb      	b.n	4310 <tx_cmplt_get+0x64>
		return 0;
    4338:	2500      	movs	r5, #0
    433a:	e7f7      	b.n	432c <tx_cmplt_get+0x80>
    433c:	200002ac 	.word	0x200002ac

00004340 <connection_get>:
{
    4340:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    4342:	4b09      	ldr	r3, [pc, #36]	; (4368 <connection_get+0x28>)
    4344:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    4348:	4282      	cmp	r2, r0
{
    434a:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    434c:	d90a      	bls.n	4364 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    434e:	4602      	mov	r2, r0
    4350:	f44f 7182 	mov.w	r1, #260	; 0x104
    4354:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    4358:	f7fe fa8a 	bl	2870 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    435c:	b110      	cbz	r0, 4364 <connection_get+0x24>
    435e:	8c03      	ldrh	r3, [r0, #32]
    4360:	42a3      	cmp	r3, r4
    4362:	d000      	beq.n	4366 <connection_get+0x26>
	return 0;
    4364:	2000      	movs	r0, #0
}
    4366:	bd10      	pop	{r4, pc}
    4368:	200002ac 	.word	0x200002ac

0000436c <role_disable>:
{
    436c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4370:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    4372:	2402      	movs	r4, #2
	switch (ticker_id_primary) {
    4374:	2805      	cmp	r0, #5
{
    4376:	4605      	mov	r5, r0
    4378:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    437a:	9402      	str	r4, [sp, #8]
	switch (ticker_id_primary) {
    437c:	d00e      	beq.n	439c <role_disable+0x30>
    437e:	2806      	cmp	r0, #6
    4380:	f000 8092 	beq.w	44a8 <role_disable+0x13c>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    4384:	f240 808a 	bls.w	449c <role_disable+0x130>
			conn_handle = ticker_id_primary -
    4388:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    438a:	b280      	uxth	r0, r0
    438c:	f7ff ffd8 	bl	4340 <connection_get>
			if (!conn) {
    4390:	2800      	cmp	r0, #0
    4392:	f000 80dd 	beq.w	4550 <role_disable+0x1e4>
			ticks_active_to_start =
    4396:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    439a:	e010      	b.n	43be <role_disable+0x52>
		ticks_xtal_to_start =
    439c:	4b6d      	ldr	r3, [pc, #436]	; (4554 <role_disable+0x1e8>)
    439e:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    43a0:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    43a4:	ab02      	add	r3, sp, #8
    43a6:	9300      	str	r3, [sp, #0]
    43a8:	460a      	mov	r2, r1
    43aa:	4b6b      	ldr	r3, [pc, #428]	; (4558 <role_disable+0x1ec>)
    43ac:	2103      	movs	r1, #3
    43ae:	2000      	movs	r0, #0
    43b0:	f7ff f944 	bl	363c <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    43b4:	2802      	cmp	r0, #2
    43b6:	d06a      	beq.n	448e <role_disable+0x122>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    43b8:	9b02      	ldr	r3, [sp, #8]
    43ba:	2b00      	cmp	r3, #0
    43bc:	d16b      	bne.n	4496 <role_disable+0x12a>
	LL_ASSERT(!_radio.ticker_id_stop);
    43be:	4c65      	ldr	r4, [pc, #404]	; (4554 <role_disable+0x1e8>)
    43c0:	7ca3      	ldrb	r3, [r4, #18]
    43c2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    43c6:	2b00      	cmp	r3, #0
    43c8:	d168      	bne.n	449c <role_disable+0x130>
	ret_cb = TICKER_STATUS_BUSY;
    43ca:	ab06      	add	r3, sp, #24
    43cc:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    43ce:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    43d0:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    43d4:	2103      	movs	r1, #3
    43d6:	9300      	str	r3, [sp, #0]
    43d8:	462a      	mov	r2, r5
    43da:	4b5f      	ldr	r3, [pc, #380]	; (4558 <role_disable+0x1ec>)
    43dc:	f7ff f92e 	bl	363c <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    43e0:	2802      	cmp	r0, #2
    43e2:	d067      	beq.n	44b4 <role_disable+0x148>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    43e4:	9b02      	ldr	r3, [sp, #8]
    43e6:	2b00      	cmp	r3, #0
    43e8:	d145      	bne.n	4476 <role_disable+0x10a>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    43ea:	7c23      	ldrb	r3, [r4, #16]
    43ec:	429d      	cmp	r5, r3
    43ee:	d002      	beq.n	43f6 <role_disable+0x8a>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    43f0:	7c63      	ldrb	r3, [r4, #17]
    43f2:	429d      	cmp	r5, r3
    43f4:	d13b      	bne.n	446e <role_disable+0x102>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    43f6:	ab06      	add	r3, sp, #24
    43f8:	2202      	movs	r2, #2
    43fa:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    43fe:	2200      	movs	r2, #0
    4400:	9300      	str	r3, [sp, #0]
    4402:	2103      	movs	r1, #3
    4404:	4b54      	ldr	r3, [pc, #336]	; (4558 <role_disable+0x1ec>)
    4406:	4610      	mov	r0, r2
    4408:	f7ff f918 	bl	363c <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    440c:	2802      	cmp	r0, #2
    440e:	d107      	bne.n	4420 <role_disable+0xb4>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4410:	2201      	movs	r2, #1
    4412:	4611      	mov	r1, r2
    4414:	2003      	movs	r0, #3
    4416:	f7fe fa89 	bl	292c <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    441a:	9b03      	ldr	r3, [sp, #12]
    441c:	2b02      	cmp	r3, #2
    441e:	d03d      	beq.n	449c <role_disable+0x130>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    4420:	9803      	ldr	r0, [sp, #12]
    4422:	2800      	cmp	r0, #0
    4424:	d162      	bne.n	44ec <role_disable+0x180>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    4426:	2302      	movs	r3, #2
    4428:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    442a:	7c23      	ldrb	r3, [r4, #16]
    442c:	2b00      	cmp	r3, #0
    442e:	d035      	beq.n	449c <role_disable+0x130>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4430:	ab04      	add	r3, sp, #16
		_radio.ticker_id_prepare = 0U;
    4432:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4434:	2201      	movs	r2, #1
    4436:	9300      	str	r3, [sp, #0]
    4438:	2103      	movs	r1, #3
    443a:	4b47      	ldr	r3, [pc, #284]	; (4558 <role_disable+0x1ec>)
    443c:	f7ff f8fe 	bl	363c <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    4440:	2802      	cmp	r0, #2
    4442:	d107      	bne.n	4454 <role_disable+0xe8>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4444:	2201      	movs	r2, #1
    4446:	4611      	mov	r1, r2
    4448:	2003      	movs	r0, #3
    444a:	f7fe fa6f 	bl	292c <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    444e:	9b04      	ldr	r3, [sp, #16]
    4450:	2b02      	cmp	r3, #2
    4452:	d023      	beq.n	449c <role_disable+0x130>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    4454:	9a04      	ldr	r2, [sp, #16]
    4456:	2a00      	cmp	r2, #0
    4458:	d13a      	bne.n	44d0 <role_disable+0x164>
			ticks_xtal_to_start &= ~XON_BITMASK;
    445a:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    445e:	45b0      	cmp	r8, r6
    4460:	d942      	bls.n	44e8 <role_disable+0x17c>
				ret = mayfly_enqueue(
    4462:	4b3e      	ldr	r3, [pc, #248]	; (455c <role_disable+0x1f0>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4464:	4611      	mov	r1, r2
    4466:	2003      	movs	r0, #3
    4468:	f7fe fa88 	bl	297c <mayfly_enqueue>
			LL_ASSERT(!ret);
    446c:	b9b0      	cbnz	r0, 449c <role_disable+0x130>
	if (!_radio.ticker_id_stop) {
    446e:	7ca3      	ldrb	r3, [r4, #18]
    4470:	b90b      	cbnz	r3, 4476 <role_disable+0x10a>
		ret_cb = TICKER_STATUS_FAILURE;
    4472:	2301      	movs	r3, #1
    4474:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0U;
    4476:	2300      	movs	r3, #0
    4478:	74a3      	strb	r3, [r4, #18]
	return ret_cb ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    447a:	9b02      	ldr	r3, [sp, #8]
    447c:	2b00      	cmp	r3, #0
    447e:	bf14      	ite	ne
    4480:	200c      	movne	r0, #12
    4482:	2000      	moveq	r0, #0
}
    4484:	b006      	add	sp, #24
    4486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				cpu_sleep();
    448a:	f7ff fef5 	bl	4278 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    448e:	9b02      	ldr	r3, [sp, #8]
    4490:	2b02      	cmp	r3, #2
    4492:	d0fa      	beq.n	448a <role_disable+0x11e>
    4494:	e790      	b.n	43b8 <role_disable+0x4c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    4496:	9b02      	ldr	r3, [sp, #8]
    4498:	2b01      	cmp	r3, #1
    449a:	d090      	beq.n	43be <role_disable+0x52>
		LL_ASSERT(0);
    449c:	4040      	eors	r0, r0
    449e:	f380 8811 	msr	BASEPRI, r0
    44a2:	f04f 0004 	mov.w	r0, #4
    44a6:	df02      	svc	2
		ticks_xtal_to_start =
    44a8:	4b2a      	ldr	r3, [pc, #168]	; (4554 <role_disable+0x1e8>)
    44aa:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
		ticks_active_to_start =
    44ae:	f8d3 80d4 	ldr.w	r8, [r3, #212]	; 0xd4
		break;
    44b2:	e784      	b.n	43be <role_disable+0x52>
		if (_radio.ticker_id_event == ticker_id_primary) {
    44b4:	7c63      	ldrb	r3, [r4, #17]
    44b6:	429d      	cmp	r5, r3
    44b8:	d104      	bne.n	44c4 <role_disable+0x158>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    44ba:	2201      	movs	r2, #1
    44bc:	4611      	mov	r1, r2
    44be:	2003      	movs	r0, #3
    44c0:	f7fe fa34 	bl	292c <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    44c4:	9b02      	ldr	r3, [sp, #8]
    44c6:	2b02      	cmp	r3, #2
    44c8:	d18c      	bne.n	43e4 <role_disable+0x78>
			cpu_sleep();
    44ca:	f7ff fed5 	bl	4278 <cpu_sleep>
    44ce:	e7f9      	b.n	44c4 <role_disable+0x158>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    44d0:	9b04      	ldr	r3, [sp, #16]
    44d2:	2b01      	cmp	r3, #1
    44d4:	d1e2      	bne.n	449c <role_disable+0x130>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    44d6:	2200      	movs	r2, #0
    44d8:	4611      	mov	r1, r2
    44da:	4b20      	ldr	r3, [pc, #128]	; (455c <role_disable+0x1f0>)
    44dc:	2003      	movs	r0, #3
    44de:	f7fe fa4d 	bl	297c <mayfly_enqueue>
			LL_ASSERT(!ret);
    44e2:	4602      	mov	r2, r0
    44e4:	2800      	cmp	r0, #0
    44e6:	d1d9      	bne.n	449c <role_disable+0x130>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    44e8:	4b1d      	ldr	r3, [pc, #116]	; (4560 <role_disable+0x1f4>)
    44ea:	e7bb      	b.n	4464 <role_disable+0xf8>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    44ec:	9d03      	ldr	r5, [sp, #12]
    44ee:	2d01      	cmp	r5, #1
    44f0:	d1d4      	bne.n	449c <role_disable+0x130>
		if (ticker_id_stop != TICKER_NULL) {
    44f2:	2fff      	cmp	r7, #255	; 0xff
    44f4:	d019      	beq.n	452a <role_disable+0x1be>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    44f6:	ab06      	add	r3, sp, #24
    44f8:	2202      	movs	r2, #2
    44fa:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    44fe:	2103      	movs	r1, #3
    4500:	9300      	str	r3, [sp, #0]
    4502:	463a      	mov	r2, r7
    4504:	4b14      	ldr	r3, [pc, #80]	; (4558 <role_disable+0x1ec>)
    4506:	2000      	movs	r0, #0
    4508:	f7ff f898 	bl	363c <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    450c:	2802      	cmp	r0, #2
    450e:	d107      	bne.n	4520 <role_disable+0x1b4>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4510:	462a      	mov	r2, r5
    4512:	4629      	mov	r1, r5
    4514:	2003      	movs	r0, #3
    4516:	f7fe fa09 	bl	292c <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    451a:	9b05      	ldr	r3, [sp, #20]
    451c:	2b02      	cmp	r3, #2
    451e:	d0bd      	beq.n	449c <role_disable+0x130>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    4520:	9b05      	ldr	r3, [sp, #20]
    4522:	b113      	cbz	r3, 452a <role_disable+0x1be>
    4524:	9b05      	ldr	r3, [sp, #20]
    4526:	2b01      	cmp	r3, #1
    4528:	d1b8      	bne.n	449c <role_disable+0x130>
		if (_radio.role != ROLE_NONE) {
    452a:	7d23      	ldrb	r3, [r4, #20]
    452c:	2b00      	cmp	r3, #0
    452e:	d09e      	beq.n	446e <role_disable+0x102>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    4530:	4b0c      	ldr	r3, [pc, #48]	; (4564 <role_disable+0x1f8>)
    4532:	2204      	movs	r2, #4
    4534:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4536:	2200      	movs	r2, #0
    4538:	4611      	mov	r1, r2
    453a:	2003      	movs	r0, #3
    453c:	f7fe fa1e 	bl	297c <mayfly_enqueue>
			LL_ASSERT(!ret);
    4540:	2800      	cmp	r0, #0
    4542:	d1ab      	bne.n	449c <role_disable+0x130>
			while (_radio.role != ROLE_NONE) {
    4544:	7d23      	ldrb	r3, [r4, #20]
    4546:	2b00      	cmp	r3, #0
    4548:	d091      	beq.n	446e <role_disable+0x102>
				cpu_sleep();
    454a:	f7ff fe95 	bl	4278 <cpu_sleep>
    454e:	e7f9      	b.n	4544 <role_disable+0x1d8>
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    4550:	4620      	mov	r0, r4
    4552:	e797      	b.n	4484 <role_disable+0x118>
    4554:	200002ac 	.word	0x200002ac
    4558:	00004281 	.word	0x00004281
    455c:	20002900 	.word	0x20002900
    4560:	20002970 	.word	0x20002970
    4564:	20002920 	.word	0x20002920

00004568 <packet_tx_enqueue>:
{
    4568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    456c:	4c33      	ldr	r4, [pc, #204]	; (463c <packet_tx_enqueue+0xd4>)
{
    456e:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    4570:	2500      	movs	r5, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    4572:	b12e      	cbz	r6, 4580 <packet_tx_enqueue+0x18>
    4574:	f894 316d 	ldrb.w	r3, [r4, #365]	; 0x16d
    4578:	f894 216e 	ldrb.w	r2, [r4, #366]	; 0x16e
    457c:	429a      	cmp	r2, r3
    457e:	d101      	bne.n	4584 <packet_tx_enqueue+0x1c>
    4580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    4584:	f894 816d 	ldrb.w	r8, [r4, #365]	; 0x16d
    4588:	f8d4 9164 	ldr.w	r9, [r4, #356]	; 0x164
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    458c:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    4590:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    4594:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4598:	f44f 7182 	mov.w	r1, #260	; 0x104
		node_tx_new = pdu_data_q_tx->node_tx;
    459c:	685f      	ldr	r7, [r3, #4]
		node_tx_new->next = NULL;
    459e:	603d      	str	r5, [r7, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    45a0:	f7fe f966 	bl	2870 <mem_get>
		if (conn->handle == pdu_data_q_tx->handle) {
    45a4:	f839 1038 	ldrh.w	r1, [r9, r8, lsl #3]
    45a8:	8c03      	ldrh	r3, [r0, #32]
    45aa:	428b      	cmp	r3, r1
    45ac:	d11f      	bne.n	45ee <packet_tx_enqueue+0x86>
			if (conn->pkt_tx_data == 0) {
    45ae:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
    45b2:	b943      	cbnz	r3, 45c6 <packet_tx_enqueue+0x5e>
				if (conn->pkt_tx_head == 0) {
    45b4:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
				conn->pkt_tx_data = node_tx_new;
    45b8:	f8c0 70f8 	str.w	r7, [r0, #248]	; 0xf8
				if (conn->pkt_tx_head == 0) {
    45bc:	b91b      	cbnz	r3, 45c6 <packet_tx_enqueue+0x5e>
					conn->pkt_tx_head = node_tx_new;
    45be:	f8c0 70ec 	str.w	r7, [r0, #236]	; 0xec
					conn->pkt_tx_last = NULL;
    45c2:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
			if (conn->pkt_tx_last) {
    45c6:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
    45ca:	b103      	cbz	r3, 45ce <packet_tx_enqueue+0x66>
				conn->pkt_tx_last->next = node_tx_new;
    45cc:	601f      	str	r7, [r3, #0]
			conn->pkt_tx_last = node_tx_new;
    45ce:	f8c0 70fc 	str.w	r7, [r0, #252]	; 0xfc
		first = _radio.packet_tx_first + 1;
    45d2:	f894 316d 	ldrb.w	r3, [r4, #365]	; 0x16d
		if (first == _radio.packet_tx_count) {
    45d6:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
		first = _radio.packet_tx_first + 1;
    45da:	3301      	adds	r3, #1
    45dc:	b2db      	uxtb	r3, r3
			first = 0U;
    45de:	429a      	cmp	r2, r3
    45e0:	bf08      	it	eq
    45e2:	2300      	moveq	r3, #0
    45e4:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    45e6:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
    45ea:	b2f6      	uxtb	r6, r6
    45ec:	e7c1      	b.n	4572 <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    45ee:	793b      	ldrb	r3, [r7, #4]
    45f0:	f365 0301 	bfi	r3, r5, #0, #2
    45f4:	713b      	strb	r3, [r7, #4]
	last = _radio.packet_release_last + 1;
    45f6:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
	if (last == _radio.packet_tx_count) {
    45fa:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
	last = _radio.packet_release_last + 1;
    45fe:	3301      	adds	r3, #1
    4600:	b2db      	uxtb	r3, r3
		last = 0U;
    4602:	429a      	cmp	r2, r3
    4604:	bf08      	it	eq
    4606:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    4608:	f894 216f 	ldrb.w	r2, [r4, #367]	; 0x16f
    460c:	429a      	cmp	r2, r3
    460e:	d105      	bne.n	461c <packet_tx_enqueue+0xb4>
    4610:	4040      	eors	r0, r0
    4612:	f380 8811 	msr	BASEPRI, r0
    4616:	f04f 0004 	mov.w	r0, #4
    461a:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    461c:	f894 0170 	ldrb.w	r0, [r4, #368]	; 0x170
    4620:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
    4624:	f822 1030 	strh.w	r1, [r2, r0, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    4628:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
    462c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    4630:	6057      	str	r7, [r2, #4]
	_radio.packet_release_last = last;
    4632:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
	radio_event_callback();
    4636:	f001 fa79 	bl	5b2c <radio_event_callback>
    463a:	e7ca      	b.n	45d2 <packet_tx_enqueue+0x6a>
    463c:	200002ac 	.word	0x200002ac

00004640 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    4640:	4b04      	ldr	r3, [pc, #16]	; (4654 <ticker_job_disable+0x14>)
    4642:	7d5b      	ldrb	r3, [r3, #21]
    4644:	b123      	cbz	r3, 4650 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    4646:	2101      	movs	r1, #1
    4648:	2200      	movs	r2, #0
    464a:	4608      	mov	r0, r1
    464c:	f7fe b96e 	b.w	292c <mayfly_enable>
    4650:	4770      	bx	lr
    4652:	bf00      	nop
    4654:	200002ac 	.word	0x200002ac

00004658 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    4658:	2806      	cmp	r0, #6
{
    465a:	b510      	push	{r4, lr}
    465c:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    465e:	d90a      	bls.n	4676 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4660:	4b09      	ldr	r3, [pc, #36]	; (4688 <hdr_conn_get+0x30>)
    4662:	1fc2      	subs	r2, r0, #7
    4664:	b292      	uxth	r2, r2
    4666:	f44f 7182 	mov.w	r1, #260	; 0x104
    466a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    466e:	f7fe f8ff 	bl	2870 <mem_get>
    4672:	6020      	str	r0, [r4, #0]
    4674:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    4676:	2805      	cmp	r0, #5
    4678:	d004      	beq.n	4684 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    467a:	2806      	cmp	r0, #6
	return NULL;
    467c:	4803      	ldr	r0, [pc, #12]	; (468c <hdr_conn_get+0x34>)
    467e:	bf18      	it	ne
    4680:	2000      	movne	r0, #0
    4682:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    4684:	4802      	ldr	r0, [pc, #8]	; (4690 <hdr_conn_get+0x38>)
}
    4686:	bd10      	pop	{r4, pc}
    4688:	200002ac 	.word	0x200002ac
    468c:	2000037c 	.word	0x2000037c
    4690:	200002c4 	.word	0x200002c4

00004694 <mayfly_xtal_retain.part.7>:
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    4694:	b508      	push	{r3, lr}
			s_xtal_retained = 0U;
    4696:	4b0a      	ldr	r3, [pc, #40]	; (46c0 <mayfly_xtal_retain.part.7+0x2c>)
    4698:	2200      	movs	r2, #0
    469a:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
    469c:	b168      	cbz	r0, 46ba <mayfly_xtal_retain.part.7+0x26>
    469e:	2801      	cmp	r0, #1
    46a0:	d105      	bne.n	46ae <mayfly_xtal_retain.part.7+0x1a>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    46a2:	4b08      	ldr	r3, [pc, #32]	; (46c4 <mayfly_xtal_retain.part.7+0x30>)
			retval = mayfly_enqueue(caller_id,
    46a4:	2200      	movs	r2, #0
    46a6:	4611      	mov	r1, r2
    46a8:	f7fe f968 	bl	297c <mayfly_enqueue>
			LL_ASSERT(!retval);
    46ac:	b138      	cbz	r0, 46be <mayfly_xtal_retain.part.7+0x2a>
    46ae:	4040      	eors	r0, r0
    46b0:	f380 8811 	msr	BASEPRI, r0
    46b4:	f04f 0004 	mov.w	r0, #4
    46b8:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    46ba:	4b03      	ldr	r3, [pc, #12]	; (46c8 <mayfly_xtal_retain.part.7+0x34>)
    46bc:	e7f2      	b.n	46a4 <mayfly_xtal_retain.part.7+0x10>
    46be:	bd08      	pop	{r3, pc}
    46c0:	20000490 	.word	0x20000490
    46c4:	20002960 	.word	0x20002960
    46c8:	20002950 	.word	0x20002950

000046cc <isr.part.22>:
		LL_ASSERT(0);
    46cc:	4040      	eors	r0, r0
    46ce:	f380 8811 	msr	BASEPRI, r0
    46d2:	f04f 0004 	mov.w	r0, #4
    46d6:	df02      	svc	2

000046d8 <chan_set.part.21>:
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
    46d8:	4040      	eors	r0, r0
    46da:	f380 8811 	msr	BASEPRI, r0
    46de:	f04f 0004 	mov.w	r0, #4
    46e2:	df02      	svc	2

000046e4 <chan_set>:
	switch (chan) {
    46e4:	2826      	cmp	r0, #38	; 0x26
{
    46e6:	b510      	push	{r4, lr}
    46e8:	4604      	mov	r4, r0
	switch (chan) {
    46ea:	d00b      	beq.n	4704 <chan_set+0x20>
    46ec:	2827      	cmp	r0, #39	; 0x27
    46ee:	d00b      	beq.n	4708 <chan_set+0x24>
    46f0:	2825      	cmp	r0, #37	; 0x25
    46f2:	d10b      	bne.n	470c <chan_set+0x28>
		radio_freq_chan_set(2);
    46f4:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    46f6:	f001 ff27 	bl	6548 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    46fa:	4620      	mov	r0, r4
}
    46fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    4700:	f001 bf28 	b.w	6554 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    4704:	201a      	movs	r0, #26
    4706:	e7f6      	b.n	46f6 <chan_set+0x12>
		radio_freq_chan_set(80);
    4708:	2050      	movs	r0, #80	; 0x50
    470a:	e7f4      	b.n	46f6 <chan_set+0x12>
		if (chan < 11) {
    470c:	280a      	cmp	r0, #10
    470e:	d802      	bhi.n	4716 <chan_set+0x32>
			radio_freq_chan_set(4 + (2 * chan));
    4710:	3002      	adds	r0, #2
    4712:	0040      	lsls	r0, r0, #1
    4714:	e7ef      	b.n	46f6 <chan_set+0x12>
		} else if (chan < 40) {
    4716:	2827      	cmp	r0, #39	; 0x27
    4718:	d801      	bhi.n	471e <chan_set+0x3a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    471a:	3003      	adds	r0, #3
    471c:	e7f9      	b.n	4712 <chan_set+0x2e>
    471e:	f7ff ffdb 	bl	46d8 <chan_set.part.21>
	...

00004724 <adv_setup>:
{
    4724:	b538      	push	{r3, r4, r5, lr}
	if (_radio.advertiser.adv_data.first !=
    4726:	4c2a      	ldr	r4, [pc, #168]	; (47d0 <adv_setup+0xac>)
    4728:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    472c:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
    4730:	429a      	cmp	r2, r3
    4732:	d006      	beq.n	4742 <adv_setup+0x1e>
		first = _radio.advertiser.adv_data.first + 1;
    4734:	3301      	adds	r3, #1
    4736:	b2db      	uxtb	r3, r3
			first = 0U;
    4738:	2b02      	cmp	r3, #2
    473a:	bf08      	it	eq
    473c:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    473e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	if (_radio.advertiser.scan_data.first != _radio.
    4742:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    4746:	f894 20c9 	ldrb.w	r2, [r4, #201]	; 0xc9
    474a:	429a      	cmp	r2, r3
    474c:	d006      	beq.n	475c <adv_setup+0x38>
		first = _radio.advertiser.scan_data.first + 1;
    474e:	3301      	adds	r3, #1
    4750:	b2db      	uxtb	r3, r3
			first = 0U;
    4752:	2b02      	cmp	r3, #2
    4754:	bf08      	it	eq
    4756:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    4758:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	pdu = (void *)_radio.advertiser.adv_data.data
    475c:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    4760:	232a      	movs	r3, #42	; 0x2a
    4762:	2527      	movs	r5, #39	; 0x27
    4764:	fb15 3502 	smlabb	r5, r5, r2, r3
	radio_pkt_tx_set(pdu);
    4768:	1960      	adds	r0, r4, r5
    476a:	f001 ff51 	bl	6610 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    476e:	5d63      	ldrb	r3, [r4, r5]
    4770:	f003 030f 	and.w	r3, r3, #15
    4774:	2b02      	cmp	r3, #2
    4776:	d023      	beq.n	47c0 <adv_setup+0x9c>
    4778:	2b07      	cmp	r3, #7
    477a:	d021      	beq.n	47c0 <adv_setup+0x9c>
		_radio.state = STATE_TX;
    477c:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    477e:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    4780:	7563      	strb	r3, [r4, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
    4782:	f002 f847 	bl	6814 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    4786:	2000      	movs	r0, #0
    4788:	f001 ffb2 	bl	66f0 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    478c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    4790:	f3c3 0202 	ubfx	r2, r3, #0, #3
    4794:	b2d3      	uxtb	r3, r2
    4796:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    4798:	2000      	movs	r0, #0
    479a:	f011 0f01 	tst.w	r1, #1
    479e:	f100 0501 	add.w	r5, r0, #1
    47a2:	d012      	beq.n	47ca <adv_setup+0xa6>
		(_radio.advertiser.chan_map_current - 1);
    47a4:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    47a6:	4013      	ands	r3, r2
    47a8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    47ac:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    47ae:	f363 0202 	bfi	r2, r3, #0, #3
    47b2:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    47b6:	3025      	adds	r0, #37	; 0x25
}
    47b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	chan_set(37 + chan);
    47bc:	f7ff bf92 	b.w	46e4 <chan_set>
		_radio.state = STATE_CLOSE;
    47c0:	2303      	movs	r3, #3
    47c2:	7563      	strb	r3, [r4, #21]
		radio_switch_complete_and_disable();
    47c4:	f001 ffaa 	bl	671c <radio_switch_complete_and_disable>
    47c8:	e7e0      	b.n	478c <adv_setup+0x68>
		bitmap >>= 1;
    47ca:	0849      	lsrs	r1, r1, #1
    47cc:	4628      	mov	r0, r5
    47ce:	e7e4      	b.n	479a <adv_setup+0x76>
    47d0:	200002ac 	.word	0x200002ac

000047d4 <prepare_normal_set>:
{
    47d4:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    47d6:	6804      	ldr	r4, [r0, #0]
    47d8:	2c00      	cmp	r4, #0
{
    47da:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    47dc:	da19      	bge.n	4812 <prepare_normal_set+0x3e>
		u32_t ticks_prepare_to_start =
    47de:	6843      	ldr	r3, [r0, #4]
    47e0:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    47e2:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    47e4:	429d      	cmp	r5, r3
    47e6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    47ea:	bf38      	it	cc
    47ec:	1ae4      	subcc	r4, r4, r3
		ticker_status =
    47ee:	4b0a      	ldr	r3, [pc, #40]	; (4818 <prepare_normal_set+0x44>)
    47f0:	9305      	str	r3, [sp, #20]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    47f2:	bf28      	it	cs
    47f4:	1b64      	subcs	r4, r4, r5
		ticker_status =
    47f6:	2300      	movs	r3, #0
    47f8:	9304      	str	r3, [sp, #16]
    47fa:	9303      	str	r3, [sp, #12]
    47fc:	9302      	str	r3, [sp, #8]
    47fe:	4618      	mov	r0, r3
    4800:	9401      	str	r4, [sp, #4]
    4802:	9400      	str	r4, [sp, #0]
    4804:	f7fe fece 	bl	35a4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4808:	f030 0302 	bics.w	r3, r0, #2
    480c:	d001      	beq.n	4812 <prepare_normal_set+0x3e>
    480e:	f7ff ff63 	bl	46d8 <chan_set.part.21>
}
    4812:	b009      	add	sp, #36	; 0x24
    4814:	bd30      	pop	{r4, r5, pc}
    4816:	bf00      	nop
    4818:	000042a1 	.word	0x000042a1

0000481c <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    481c:	b2c0      	uxtb	r0, r0
{
    481e:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    4820:	1f03      	subs	r3, r0, #4
    4822:	2b01      	cmp	r3, #1
    4824:	d901      	bls.n	482a <mayfly_radio_stop+0xe>
    4826:	f7ff ff57 	bl	46d8 <chan_set.part.21>
	radio_used = ((_radio.state != STATE_NONE) &&
    482a:	4a08      	ldr	r2, [pc, #32]	; (484c <mayfly_radio_stop+0x30>)
    482c:	7d53      	ldrb	r3, [r2, #21]
		      (_radio.state != STATE_STOP) &&
    482e:	b13b      	cbz	r3, 4840 <mayfly_radio_stop+0x24>
	radio_used = ((_radio.state != STATE_NONE) &&
    4830:	3b04      	subs	r3, #4
    4832:	2b01      	cmp	r3, #1
    4834:	d904      	bls.n	4840 <mayfly_radio_stop+0x24>
			_radio.state = state;
    4836:	7550      	strb	r0, [r2, #21]
}
    4838:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
    483c:	f001 bf02 	b.w	6644 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    4840:	f001 ff32 	bl	66a8 <radio_is_idle>
    4844:	2800      	cmp	r0, #0
    4846:	d0f7      	beq.n	4838 <mayfly_radio_stop+0x1c>
}
    4848:	bd08      	pop	{r3, pc}
    484a:	bf00      	nop
    484c:	200002ac 	.word	0x200002ac

00004850 <mayfly_radio_active>:
{
    4850:	b508      	push	{r3, lr}
    4852:	4a0a      	ldr	r2, [pc, #40]	; (487c <mayfly_radio_active+0x2c>)
		if (s_active++) {
    4854:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    4856:	b138      	cbz	r0, 4868 <mayfly_radio_active+0x18>
		if (s_active++) {
    4858:	1c59      	adds	r1, r3, #1
    485a:	7011      	strb	r1, [r2, #0]
    485c:	b963      	cbnz	r3, 4878 <mayfly_radio_active+0x28>
		radio_active_callback(1);
    485e:	2001      	movs	r0, #1
}
    4860:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
    4864:	f001 b960 	b.w	5b28 <radio_active_callback>
		LL_ASSERT(s_active);
    4868:	b90b      	cbnz	r3, 486e <mayfly_radio_active+0x1e>
    486a:	f7ff ff35 	bl	46d8 <chan_set.part.21>
		if (--s_active) {
    486e:	3b01      	subs	r3, #1
    4870:	b2db      	uxtb	r3, r3
    4872:	7013      	strb	r3, [r2, #0]
    4874:	2b00      	cmp	r3, #0
    4876:	d0f3      	beq.n	4860 <mayfly_radio_active+0x10>
    4878:	bd08      	pop	{r3, pc}
    487a:	bf00      	nop
    487c:	2000044c 	.word	0x2000044c

00004880 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    4880:	2000      	movs	r0, #0
    4882:	f7ff bfe5 	b.w	4850 <mayfly_radio_active>
	...

00004888 <event_stop>:
	s_mfy_radio_stop.param = context;
    4888:	4a06      	ldr	r2, [pc, #24]	; (48a4 <event_stop+0x1c>)
{
    488a:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    488c:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    488e:	4613      	mov	r3, r2
    4890:	2200      	movs	r2, #0
    4892:	4611      	mov	r1, r2
    4894:	4610      	mov	r0, r2
    4896:	f7fe f871 	bl	297c <mayfly_enqueue>
	LL_ASSERT(!retval);
    489a:	b108      	cbz	r0, 48a0 <event_stop+0x18>
    489c:	f7ff ff1c 	bl	46d8 <chan_set.part.21>
    48a0:	bd08      	pop	{r3, pc}
    48a2:	bf00      	nop
    48a4:	20002910 	.word	0x20002910

000048a8 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    48a8:	2200      	movs	r2, #0
{
    48aa:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    48ac:	4611      	mov	r1, r2
    48ae:	4b04      	ldr	r3, [pc, #16]	; (48c0 <event_xtal+0x18>)
    48b0:	4610      	mov	r0, r2
    48b2:	f7fe f863 	bl	297c <mayfly_enqueue>
	LL_ASSERT(!retval);
    48b6:	b108      	cbz	r0, 48bc <event_xtal+0x14>
    48b8:	f7ff ff0e 	bl	46d8 <chan_set.part.21>
    48bc:	bd08      	pop	{r3, pc}
    48be:	bf00      	nop
    48c0:	20002930 	.word	0x20002930

000048c4 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    48c4:	2200      	movs	r2, #0
{
    48c6:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    48c8:	4611      	mov	r1, r2
    48ca:	4b04      	ldr	r3, [pc, #16]	; (48dc <event_active+0x18>)
    48cc:	4610      	mov	r0, r2
    48ce:	f7fe f855 	bl	297c <mayfly_enqueue>
	LL_ASSERT(!retval);
    48d2:	b108      	cbz	r0, 48d8 <event_active+0x14>
    48d4:	f7ff ff00 	bl	46d8 <chan_set.part.21>
    48d8:	bd08      	pop	{r3, pc}
    48da:	bf00      	nop
    48dc:	200028e0 	.word	0x200028e0

000048e0 <ticker_success_assert>:
{
    48e0:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    48e2:	b108      	cbz	r0, 48e8 <ticker_success_assert+0x8>
    48e4:	f7ff fef8 	bl	46d8 <chan_set.part.21>
    48e8:	bd08      	pop	{r3, pc}
	...

000048ec <ticker_update_adv_assert>:
{
    48ec:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    48ee:	b128      	cbz	r0, 48fc <ticker_update_adv_assert+0x10>
    48f0:	4b03      	ldr	r3, [pc, #12]	; (4900 <ticker_update_adv_assert+0x14>)
    48f2:	7c9b      	ldrb	r3, [r3, #18]
    48f4:	2b05      	cmp	r3, #5
    48f6:	d001      	beq.n	48fc <ticker_update_adv_assert+0x10>
    48f8:	f7ff feee 	bl	46d8 <chan_set.part.21>
    48fc:	bd08      	pop	{r3, pc}
    48fe:	bf00      	nop
    4900:	200002ac 	.word	0x200002ac

00004904 <adv_scan_configure.constprop.25>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    4904:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    4906:	ad02      	add	r5, sp, #8
    4908:	4b10      	ldr	r3, [pc, #64]	; (494c <adv_scan_configure.constprop.25+0x48>)
    490a:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    490e:	4604      	mov	r4, r0
	radio_reset();
    4910:	f001 fdea 	bl	64e8 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    4914:	2000      	movs	r0, #0
    4916:	f001 fe11 	bl	653c <radio_tx_power_set>
	radio_isr_set(isr, NULL);
    491a:	2100      	movs	r1, #0
    491c:	480c      	ldr	r0, [pc, #48]	; (4950 <adv_scan_configure.constprop.25+0x4c>)
    491e:	f001 fda1 	bl	6464 <radio_isr_set>
	radio_phy_set(phy, flags);
    4922:	2101      	movs	r1, #1
    4924:	4620      	mov	r0, r4
    4926:	f001 fdf9 	bl	651c <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    492a:	4628      	mov	r0, r5
    492c:	f001 fe24 	bl	6578 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    4930:	0062      	lsls	r2, r4, #1
    4932:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    4936:	2125      	movs	r1, #37	; 0x25
    4938:	2008      	movs	r0, #8
    493a:	f001 fe35 	bl	65a8 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    493e:	4905      	ldr	r1, [pc, #20]	; (4954 <adv_scan_configure.constprop.25+0x50>)
    4940:	f240 605b 	movw	r0, #1627	; 0x65b
    4944:	f001 feba 	bl	66bc <radio_crc_configure>
}
    4948:	b003      	add	sp, #12
    494a:	bd30      	pop	{r4, r5, pc}
    494c:	8e89bed6 	.word	0x8e89bed6
    4950:	00004d39 	.word	0x00004d39
    4954:	00555555 	.word	0x00555555

00004958 <event_common_prepare.constprop.26>:
static void event_common_prepare(u32_t ticks_at_expire,
    4958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    495c:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    495e:	681d      	ldr	r5, [r3, #0]
static void event_common_prepare(u32_t ticks_at_expire,
    4960:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    4962:	2c00      	cmp	r4, #0
static void event_common_prepare(u32_t ticks_at_expire,
    4964:	4681      	mov	r9, r0
    4966:	910b      	str	r1, [sp, #44]	; 0x2c
    4968:	4690      	mov	r8, r2
    496a:	469b      	mov	fp, r3
    496c:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    4970:	da03      	bge.n	497a <event_common_prepare.constprop.26+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    4972:	9c16      	ldr	r4, [sp, #88]	; 0x58
    4974:	42ac      	cmp	r4, r5
    4976:	bf38      	it	cc
    4978:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    497a:	42a5      	cmp	r5, r4
    497c:	4f4e      	ldr	r7, [pc, #312]	; (4ab8 <event_common_prepare.constprop.26+0x160>)
    497e:	d21b      	bcs.n	49b8 <event_common_prepare.constprop.26+0x60>
		ticker_status =
    4980:	f241 6313 	movw	r3, #5651	; 0x1613
    4984:	9308      	str	r3, [sp, #32]
    4986:	4b4d      	ldr	r3, [pc, #308]	; (4abc <event_common_prepare.constprop.26+0x164>)
    4988:	9305      	str	r3, [sp, #20]
    498a:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    498c:	1b63      	subs	r3, r4, r5
		ticker_status =
    498e:	9300      	str	r3, [sp, #0]
    4990:	9707      	str	r7, [sp, #28]
    4992:	464b      	mov	r3, r9
    4994:	9106      	str	r1, [sp, #24]
    4996:	9104      	str	r1, [sp, #16]
    4998:	9103      	str	r1, [sp, #12]
    499a:	9102      	str	r1, [sp, #8]
    499c:	9101      	str	r1, [sp, #4]
    499e:	2201      	movs	r2, #1
    49a0:	4608      	mov	r0, r1
    49a2:	f7fe fdaf 	bl	3504 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    49a6:	f030 0302 	bics.w	r3, r0, #2
    49aa:	d02b      	beq.n	4a04 <event_common_prepare.constprop.26+0xac>
		LL_ASSERT(!retval);
    49ac:	4040      	eors	r0, r0
    49ae:	f380 8811 	msr	BASEPRI, r0
    49b2:	f04f 0004 	mov.w	r0, #4
    49b6:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    49b8:	d91d      	bls.n	49f6 <event_common_prepare.constprop.26+0x9e>
		event_active(0, 0, 0, NULL);
    49ba:	2300      	movs	r3, #0
    49bc:	461a      	mov	r2, r3
    49be:	4619      	mov	r1, r3
    49c0:	4618      	mov	r0, r3
    49c2:	f7ff ff7f 	bl	48c4 <event_active>
		ticker_status =
    49c6:	f241 6328 	movw	r3, #5672	; 0x1628
    49ca:	2100      	movs	r1, #0
    49cc:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    49ce:	1b2c      	subs	r4, r5, r4
		ticker_status =
    49d0:	4b3b      	ldr	r3, [pc, #236]	; (4ac0 <event_common_prepare.constprop.26+0x168>)
    49d2:	9305      	str	r3, [sp, #20]
    49d4:	9707      	str	r7, [sp, #28]
    49d6:	464b      	mov	r3, r9
    49d8:	9106      	str	r1, [sp, #24]
    49da:	9104      	str	r1, [sp, #16]
    49dc:	9103      	str	r1, [sp, #12]
    49de:	9102      	str	r1, [sp, #8]
    49e0:	9101      	str	r1, [sp, #4]
    49e2:	9400      	str	r4, [sp, #0]
    49e4:	2201      	movs	r2, #1
    49e6:	4608      	mov	r0, r1
    49e8:	f7fe fd8c 	bl	3504 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    49ec:	f030 0302 	bics.w	r3, r0, #2
    49f0:	d1dc      	bne.n	49ac <event_common_prepare.constprop.26+0x54>
    49f2:	462c      	mov	r4, r5
    49f4:	e00b      	b.n	4a0e <event_common_prepare.constprop.26+0xb6>
		event_active(0, 0, 0, NULL);
    49f6:	2300      	movs	r3, #0
    49f8:	461a      	mov	r2, r3
    49fa:	4619      	mov	r1, r3
    49fc:	4618      	mov	r0, r3
    49fe:	f7ff ff61 	bl	48c4 <event_active>
		event_xtal(0, 0, 0, NULL);
    4a02:	2300      	movs	r3, #0
    4a04:	461a      	mov	r2, r3
    4a06:	4619      	mov	r1, r3
    4a08:	4618      	mov	r0, r3
    4a0a:	f7ff ff4d 	bl	48a8 <event_xtal>
	_radio.remainder_anchor = remainder;
    4a0e:	4e2d      	ldr	r6, [pc, #180]	; (4ac4 <event_common_prepare.constprop.26+0x16c>)
    4a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4a12:	60f3      	str	r3, [r6, #12]
	ticker_status =
    4a14:	f44f 53b2 	mov.w	r3, #5696	; 0x1640
    4a18:	2200      	movs	r2, #0
    4a1a:	9308      	str	r3, [sp, #32]
    4a1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4a1e:	9206      	str	r2, [sp, #24]
    4a20:	9305      	str	r3, [sp, #20]
    4a22:	9204      	str	r2, [sp, #16]
    4a24:	9203      	str	r2, [sp, #12]
    4a26:	9202      	str	r2, [sp, #8]
    4a28:	9201      	str	r2, [sp, #4]
    4a2a:	4611      	mov	r1, r2
    4a2c:	4610      	mov	r0, r2
    4a2e:	9707      	str	r7, [sp, #28]
    4a30:	9400      	str	r4, [sp, #0]
    4a32:	464b      	mov	r3, r9
    4a34:	f7fe fd66 	bl	3504 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4a38:	f030 0202 	bics.w	r2, r0, #2
    4a3c:	d1b6      	bne.n	49ac <event_common_prepare.constprop.26+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    4a3e:	2305      	movs	r3, #5
    4a40:	4611      	mov	r1, r2
    4a42:	4610      	mov	r0, r2
    4a44:	f7ff ff20 	bl	4888 <event_stop>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    4a48:	f8d6 317c 	ldr.w	r3, [r6, #380]	; 0x17c
    4a4c:	429d      	cmp	r5, r3
    4a4e:	d022      	beq.n	4a96 <event_common_prepare.constprop.26+0x13e>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    4a50:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    4a54:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    4a58:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    4a5a:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    4a5c:	bfbc      	itt	lt
    4a5e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    4a62:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    4a66:	f8d8 3000 	ldr.w	r3, [r8]
    4a6a:	f8d6 217c 	ldr.w	r2, [r6, #380]	; 0x17c
		ticker_status =
    4a6e:	9402      	str	r4, [sp, #8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    4a70:	4293      	cmp	r3, r2
    4a72:	bf38      	it	cc
    4a74:	4613      	movcc	r3, r2
		ticker_status =
    4a76:	2100      	movs	r1, #0
    4a78:	f241 626e 	movw	r2, #5742	; 0x166e
    4a7c:	9206      	str	r2, [sp, #24]
    4a7e:	9301      	str	r3, [sp, #4]
    4a80:	9300      	str	r3, [sp, #0]
    4a82:	9104      	str	r1, [sp, #16]
    4a84:	4623      	mov	r3, r4
    4a86:	9103      	str	r1, [sp, #12]
    4a88:	4652      	mov	r2, sl
    4a8a:	4608      	mov	r0, r1
    4a8c:	f7fe fd8a 	bl	35a4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4a90:	f030 0302 	bics.w	r3, r0, #2
    4a94:	d18a      	bne.n	49ac <event_common_prepare.constprop.26+0x54>
	packet_tx_enqueue(0xFF);
    4a96:	20ff      	movs	r0, #255	; 0xff
    4a98:	f7ff fd66 	bl	4568 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    4a9c:	4b0a      	ldr	r3, [pc, #40]	; (4ac8 <event_common_prepare.constprop.26+0x170>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4a9e:	2201      	movs	r2, #1
    4aa0:	4611      	mov	r1, r2
    4aa2:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    4aa4:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4aa8:	f7fd ff68 	bl	297c <mayfly_enqueue>
		LL_ASSERT(!retval);
    4aac:	2800      	cmp	r0, #0
    4aae:	f47f af7d 	bne.w	49ac <event_common_prepare.constprop.26+0x54>
}
    4ab2:	b00d      	add	sp, #52	; 0x34
    4ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ab8:	000048e1 	.word	0x000048e1
    4abc:	000048c5 	.word	0x000048c5
    4ac0:	000048a9 	.word	0x000048a9
    4ac4:	200002ac 	.word	0x200002ac
    4ac8:	20002980 	.word	0x20002980

00004acc <radio_event_adv_prepare>:
{
    4acc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    4ace:	4a09      	ldr	r2, [pc, #36]	; (4af4 <radio_event_adv_prepare+0x28>)
    4ad0:	7c13      	ldrb	r3, [r2, #16]
    4ad2:	b10b      	cbz	r3, 4ad8 <radio_event_adv_prepare+0xc>
    4ad4:	f7ff fe00 	bl	46d8 <chan_set.part.21>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    4ad8:	2305      	movs	r3, #5
	event_common_prepare(ticks_at_expire, remainder,
    4ada:	4c07      	ldr	r4, [pc, #28]	; (4af8 <radio_event_adv_prepare+0x2c>)
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    4adc:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    4ade:	9402      	str	r4, [sp, #8]
    4ae0:	9301      	str	r3, [sp, #4]
    4ae2:	6a13      	ldr	r3, [r2, #32]
    4ae4:	9300      	str	r3, [sp, #0]
    4ae6:	f102 031c 	add.w	r3, r2, #28
    4aea:	3218      	adds	r2, #24
    4aec:	f7ff ff34 	bl	4958 <event_common_prepare.constprop.26>
}
    4af0:	b004      	add	sp, #16
    4af2:	bd10      	pop	{r4, pc}
    4af4:	200002ac 	.word	0x200002ac
    4af8:	00005255 	.word	0x00005255

00004afc <packet_rx_allocate.constprop.28>:
static void packet_rx_allocate(u8_t max)
    4afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    4b00:	4d21      	ldr	r5, [pc, #132]	; (4b88 <packet_rx_allocate.constprop.28+0x8c>)
	acquire = _radio.packet_rx_acquire + 1;
    4b02:	f895 413a 	ldrb.w	r4, [r5, #314]	; 0x13a
	if (acquire == _radio.packet_rx_count) {
    4b06:	f895 3138 	ldrb.w	r3, [r5, #312]	; 0x138
	if (max > _radio.link_rx_data_quota) {
    4b0a:	f895 914c 	ldrb.w	r9, [r5, #332]	; 0x14c
	acquire = _radio.packet_rx_acquire + 1;
    4b0e:	3401      	adds	r4, #1
    4b10:	b2e4      	uxtb	r4, r4
		acquire = 0U;
    4b12:	42a3      	cmp	r3, r4
    4b14:	bf08      	it	eq
    4b16:	2400      	moveq	r4, #0
		link = mem_acquire(&_radio.link_rx_free);
    4b18:	f505 77a0 	add.w	r7, r5, #320	; 0x140
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    4b1c:	f505 7894 	add.w	r8, r5, #296	; 0x128
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    4b20:	f1b9 0f00 	cmp.w	r9, #0
    4b24:	d003      	beq.n	4b2e <packet_rx_allocate.constprop.28+0x32>
    4b26:	f895 3139 	ldrb.w	r3, [r5, #313]	; 0x139
    4b2a:	429c      	cmp	r4, r3
    4b2c:	d101      	bne.n	4b32 <packet_rx_allocate.constprop.28+0x36>
    4b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    4b32:	4638      	mov	r0, r7
    4b34:	f7fd fe6d 	bl	2812 <mem_acquire>
		if (!link) {
    4b38:	4606      	mov	r6, r0
    4b3a:	2800      	cmp	r0, #0
    4b3c:	d0f7      	beq.n	4b2e <packet_rx_allocate.constprop.28+0x32>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    4b3e:	4640      	mov	r0, r8
    4b40:	f7fd fe67 	bl	2812 <mem_acquire>
		if (!node_rx) {
    4b44:	b928      	cbnz	r0, 4b52 <packet_rx_allocate.constprop.28+0x56>
			mem_release(link, &_radio.link_rx_free);
    4b46:	4630      	mov	r0, r6
    4b48:	4910      	ldr	r1, [pc, #64]	; (4b8c <packet_rx_allocate.constprop.28+0x90>)
}
    4b4a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    4b4e:	f7fd be7a 	b.w	2846 <mem_release>
		node_rx->hdr.link = link;
    4b52:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    4b54:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
    4b58:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    4b5c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    4b60:	f885 413a 	strb.w	r4, [r5, #314]	; 0x13a
		if (acquire == _radio.packet_rx_count) {
    4b64:	f895 3138 	ldrb.w	r3, [r5, #312]	; 0x138
		acquire = _radio.packet_rx_acquire + 1;
    4b68:	3401      	adds	r4, #1
    4b6a:	b2e4      	uxtb	r4, r4
			acquire = 0U;
    4b6c:	42a3      	cmp	r3, r4
    4b6e:	bf08      	it	eq
    4b70:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    4b72:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
    4b76:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    4b7a:	3b01      	subs	r3, #1
    4b7c:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
    4b80:	fa5f f989 	uxtb.w	r9, r9
    4b84:	e7cc      	b.n	4b20 <packet_rx_allocate.constprop.28+0x24>
    4b86:	bf00      	nop
    4b88:	200002ac 	.word	0x200002ac
    4b8c:	200003ec 	.word	0x200003ec

00004b90 <common_init>:
{
    4b90:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
    4b92:	4c2e      	ldr	r4, [pc, #184]	; (4c4c <common_init+0xbc>)
    4b94:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    4b98:	2a00      	cmp	r2, #0
    4b9a:	d037      	beq.n	4c0c <common_init+0x7c>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    4b9c:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    4ba0:	f44f 7182 	mov.w	r1, #260	; 0x104
    4ba4:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    4ba8:	f7fd fe0c 	bl	27c4 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    4bac:	4b28      	ldr	r3, [pc, #160]	; (4c50 <common_init+0xc0>)
    4bae:	f894 2132 	ldrb.w	r2, [r4, #306]	; 0x132
    4bb2:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    4bb6:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    4bba:	f7fd fe03 	bl	27c4 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    4bbe:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
    4bc2:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    4bc6:	4b23      	ldr	r3, [pc, #140]	; (4c54 <common_init+0xc4>)
    4bc8:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    4bcc:	440a      	add	r2, r1
    4bce:	2108      	movs	r1, #8
    4bd0:	f7fd fdf8 	bl	27c4 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    4bd4:	4b20      	ldr	r3, [pc, #128]	; (4c58 <common_init+0xc8>)
    4bd6:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    4bda:	2202      	movs	r2, #2
    4bdc:	2124      	movs	r1, #36	; 0x24
    4bde:	f7fd fdf1 	bl	27c4 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    4be2:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    4be6:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    4bea:	4b1c      	ldr	r3, [pc, #112]	; (4c5c <common_init+0xcc>)
    4bec:	f8b4 1160 	ldrh.w	r1, [r4, #352]	; 0x160
    4bf0:	3a01      	subs	r2, #1
    4bf2:	b292      	uxth	r2, r2
    4bf4:	f7fd fde6 	bl	27c4 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    4bf8:	4816      	ldr	r0, [pc, #88]	; (4c54 <common_init+0xc4>)
    4bfa:	f7fd fe0a 	bl	2812 <mem_acquire>
	LL_ASSERT(link);
    4bfe:	b940      	cbnz	r0, 4c12 <common_init+0x82>
    4c00:	4040      	eors	r0, r0
    4c02:	f380 8811 	msr	BASEPRI, r0
    4c06:	f04f 0004 	mov.w	r0, #4
    4c0a:	df02      	svc	2
		_radio.conn_free = NULL;
    4c0c:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    4c10:	e7cc      	b.n	4bac <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    4c12:	4a13      	ldr	r2, [pc, #76]	; (4c60 <common_init+0xd0>)
    4c14:	1f11      	subs	r1, r2, #4
    4c16:	f7fd fe3d 	bl	2894 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    4c1a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    4c1e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    4c22:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[0] = 0xFF;
    4c26:	23ff      	movs	r3, #255	; 0xff
    4c28:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    4c2c:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
	_radio.data_chan_map[2] = 0xFF;
    4c30:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    4c34:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
	_radio.data_chan_map[4] = 0x1F;
    4c38:	231f      	movs	r3, #31
    4c3a:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	_radio.data_chan_count = 37U;
    4c3e:	2325      	movs	r3, #37	; 0x25
    4c40:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
}
    4c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    4c48:	f7ff bf58 	b.w	4afc <packet_rx_allocate.constprop.28>
    4c4c:	200002ac 	.word	0x200002ac
    4c50:	200003d4 	.word	0x200003d4
    4c54:	200003ec 	.word	0x200003ec
    4c58:	20000400 	.word	0x20000400
    4c5c:	20000408 	.word	0x20000408
    4c60:	200003f4 	.word	0x200003f4

00004c64 <isr_rx_scan_report.isra.16>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
    4c64:	b570      	push	{r4, r5, r6, lr}
	if (_radio.packet_rx_acquire >=
    4c66:	4c32      	ldr	r4, [pc, #200]	; (4d30 <isr_rx_scan_report.isra.16+0xcc>)
    4c68:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	    _radio.packet_rx_last) {
    4c6c:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
	if (_radio.packet_rx_acquire >=
    4c70:	4293      	cmp	r3, r2
			_radio.packet_rx_last +
    4c72:	bf38      	it	cc
    4c74:	f894 1138 	ldrbcc.w	r1, [r4, #312]	; 0x138
			_radio.packet_rx_last);
    4c78:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
			_radio.packet_rx_last +
    4c7c:	bf38      	it	cc
    4c7e:	185b      	addcc	r3, r3, r1
    4c80:	1a9b      	subs	r3, r3, r2
    4c82:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
    4c84:	2b02      	cmp	r3, #2
    4c86:	d950      	bls.n	4d2a <isr_rx_scan_report.isra.16+0xc6>
	return _radio.packet_rx[_radio.packet_rx_last];
    4c88:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
    4c8c:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    4c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	if (node_rx == 0) {
    4c94:	2b00      	cmp	r3, #0
    4c96:	d048      	beq.n	4d2a <isr_rx_scan_report.isra.16+0xc6>
	node_rx->hdr.handle = 0xffff;
    4c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4c9c:	80da      	strh	r2, [r3, #6]
	} else if (_radio.scanner.phy) {
    4c9e:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
    4ca2:	0751      	lsls	r1, r2, #29
    4ca4:	d009      	beq.n	4cba <isr_rx_scan_report.isra.16+0x56>
		switch (_radio.scanner.phy) {
    4ca6:	f002 0207 	and.w	r2, r2, #7
    4caa:	2a01      	cmp	r2, #1
    4cac:	d003      	beq.n	4cb6 <isr_rx_scan_report.isra.16+0x52>
    4cae:	2a04      	cmp	r2, #4
    4cb0:	d019      	beq.n	4ce6 <isr_rx_scan_report.isra.16+0x82>
    4cb2:	f7ff fd0b 	bl	46cc <isr.part.22>
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    4cb6:	2205      	movs	r2, #5
			node_rx->hdr.type = NODE_RX_TYPE_EXT_CODED_REPORT;
    4cb8:	711a      	strb	r2, [r3, #4]
				      pdu_adv_rx->len];
    4cba:	7a5d      	ldrb	r5, [r3, #9]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    4cbc:	f103 0608 	add.w	r6, r3, #8
	extra = &((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    4cc0:	3502      	adds	r5, #2
	*extra = (rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    4cc2:	b190      	cbz	r0, 4cea <isr_rx_scan_report.isra.16+0x86>
    4cc4:	f001 fd42 	bl	674c <radio_rssi_get>
    4cc8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    4ccc:	5570      	strb	r0, [r6, r5]
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    4cce:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
    4cd2:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
    4cd6:	429a      	cmp	r2, r3
    4cd8:	d109      	bne.n	4cee <isr_rx_scan_report.isra.16+0x8a>
	LL_ASSERT(link);
    4cda:	4040      	eors	r0, r0
    4cdc:	f380 8811 	msr	BASEPRI, r0
    4ce0:	f04f 0004 	mov.w	r0, #4
    4ce4:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_CODED_REPORT;
    4ce6:	2206      	movs	r2, #6
    4ce8:	e7e6      	b.n	4cb8 <isr_rx_scan_report.isra.16+0x54>
	*extra = (rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    4cea:	207f      	movs	r0, #127	; 0x7f
    4cec:	e7ee      	b.n	4ccc <isr_rx_scan_report.isra.16+0x68>
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    4cee:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
    4cf2:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    4cf6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	node_rx->hdr.packet_release_last = _radio.packet_release_last;
    4cfa:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
	link = node_rx->hdr.link;
    4cfe:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.packet_release_last = _radio.packet_release_last;
    4d00:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    4d02:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
	if (last == _radio.packet_rx_count) {
    4d06:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
	last = _radio.packet_rx_last + 1;
    4d0a:	3301      	adds	r3, #1
    4d0c:	b2db      	uxtb	r3, r3
		last = 0U;
    4d0e:	429a      	cmp	r2, r3
    4d10:	bf08      	it	eq
    4d12:	2300      	moveq	r3, #0
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    4d14:	4a07      	ldr	r2, [pc, #28]	; (4d34 <isr_rx_scan_report.isra.16+0xd0>)
	_radio.packet_rx_last = last;
    4d16:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    4d1a:	f7fd fdbe 	bl	289a <memq_enqueue>
	LL_ASSERT(link);
    4d1e:	2800      	cmp	r0, #0
    4d20:	d0db      	beq.n	4cda <isr_rx_scan_report.isra.16+0x76>
	radio_event_callback();
    4d22:	f000 ff03 	bl	5b2c <radio_event_callback>
	return 0;
    4d26:	2000      	movs	r0, #0
    4d28:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    4d2a:	2001      	movs	r0, #1
}
    4d2c:	bd70      	pop	{r4, r5, r6, pc}
    4d2e:	bf00      	nop
    4d30:	200002ac 	.word	0x200002ac
    4d34:	200003f4 	.word	0x200003f4

00004d38 <isr>:
{
    4d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d3c:	b08a      	sub	sp, #40	; 0x28
	trx_done = radio_is_done();
    4d3e:	f001 fca9 	bl	6694 <radio_is_done>
    4d42:	b2c5      	uxtb	r5, r0
	if (trx_done) {
    4d44:	b335      	cbz	r5, 4d94 <isr+0x5c>
		crc_ok = radio_crc_is_valid();
    4d46:	f001 fcc5 	bl	66d4 <radio_crc_is_valid>
    4d4a:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
    4d4e:	f001 fd41 	bl	67d4 <radio_filter_has_match>
    4d52:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
    4d54:	f001 fd48 	bl	67e8 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    4d58:	f001 fe4c 	bl	69f4 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
    4d5c:	f001 fe38 	bl	69d0 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
    4d60:	f001 fd02 	bl	6768 <radio_rssi_is_ready>
    4d64:	b2c6      	uxtb	r6, r0
	switch (_radio.state) {
    4d66:	4cca      	ldr	r4, [pc, #808]	; (5090 <isr+0x358>)
	radio_status_reset();
    4d68:	f001 fc7e 	bl	6668 <radio_status_reset>
	radio_tmr_status_reset();
    4d6c:	f001 fd42 	bl	67f4 <radio_tmr_status_reset>
	radio_filter_status_reset();
    4d70:	f001 fd28 	bl	67c4 <radio_filter_status_reset>
	radio_ar_status_reset();
    4d74:	f001 fe32 	bl	69dc <radio_ar_status_reset>
	radio_rssi_status_reset();
    4d78:	f001 fcee 	bl	6758 <radio_rssi_status_reset>
	switch (_radio.state) {
    4d7c:	7d63      	ldrb	r3, [r4, #21]
    4d7e:	2b05      	cmp	r3, #5
    4d80:	f200 8238 	bhi.w	51f4 <isr+0x4bc>
    4d84:	e8df f013 	tbh	[pc, r3, lsl #1]
    4d88:	00a1005e 	.word	0x00a1005e
    4d8c:	01a8000a 	.word	0x01a8000a
    4d90:	01a801a8 	.word	0x01a801a8
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
    4d94:	462e      	mov	r6, r5
    4d96:	462f      	mov	r7, r5
    4d98:	46a8      	mov	r8, r5
    4d9a:	e7e4      	b.n	4d66 <isr+0x2e>
	_radio.state = STATE_RX;
    4d9c:	2301      	movs	r3, #1
    4d9e:	7563      	strb	r3, [r4, #21]
	hcto = radio_tmr_tifs_base_get()
    4da0:	f001 fddc 	bl	695c <radio_tmr_tifs_base_get>
    4da4:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    4da6:	2096      	movs	r0, #150	; 0x96
    4da8:	f001 fd34 	bl	6814 <radio_tmr_tifs_set>
	switch (_radio.role) {
    4dac:	7d23      	ldrb	r3, [r4, #20]
    4dae:	3b01      	subs	r3, #1
    4db0:	35c3      	adds	r5, #195	; 0xc3
    4db2:	2b03      	cmp	r3, #3
    4db4:	d811      	bhi.n	4dda <isr+0xa2>
    4db6:	e8df f003 	tbb	[pc, r3]
    4dba:	2402      	.short	0x2402
    4dbc:	4848      	.short	0x4848
		radio_switch_complete_and_tx(0, 0, 0, 0);
    4dbe:	2300      	movs	r3, #0
    4dc0:	461a      	mov	r2, r3
    4dc2:	4619      	mov	r1, r3
    4dc4:	4618      	mov	r0, r3
    4dc6:	f001 fc9f 	bl	6708 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    4dca:	f001 fc8d 	bl	66e8 <radio_pkt_scratch_get>
    4dce:	f001 fc19 	bl	6604 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    4dd2:	f001 fc55 	bl	6680 <radio_is_ready>
    4dd6:	4604      	mov	r4, r0
    4dd8:	b128      	cbz	r0, 4de6 <isr+0xae>
	LL_ASSERT(!retval);
    4dda:	4040      	eors	r0, r0
    4ddc:	f380 8811 	msr	BASEPRI, r0
    4de0:	f04f 0004 	mov.w	r0, #4
    4de4:	df02      	svc	2
		hcto += radio_rx_chain_delay_get(0, 0);
    4de6:	4601      	mov	r1, r0
    4de8:	f001 fc1a 	bl	6620 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    4dec:	4621      	mov	r1, r4
		hcto += addr_us_get(0);
    4dee:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    4df0:	4620      	mov	r0, r4
    4df2:	f001 fc13 	bl	661c <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    4df6:	1a28      	subs	r0, r5, r0
    4df8:	f001 fd9c 	bl	6934 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    4dfc:	f001 fda6 	bl	694c <radio_tmr_end_capture>
    4e00:	e020      	b.n	4e44 <isr+0x10c>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    4e02:	2300      	movs	r3, #0
    4e04:	4619      	mov	r1, r3
    4e06:	461a      	mov	r2, r3
    4e08:	4618      	mov	r0, r3
    4e0a:	f001 fc7d 	bl	6708 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    4e0e:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
    4e12:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
		radio_pkt_rx_set(_radio.packet_rx
    4e16:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    4e1a:	3008      	adds	r0, #8
    4e1c:	f001 fbf2 	bl	6604 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    4e20:	f001 fc2e 	bl	6680 <radio_is_ready>
    4e24:	4604      	mov	r4, r0
    4e26:	2800      	cmp	r0, #0
    4e28:	d1d7      	bne.n	4dda <isr+0xa2>
		hcto += radio_rx_chain_delay_get(0, 0);
    4e2a:	4601      	mov	r1, r0
    4e2c:	f001 fbf8 	bl	6620 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    4e30:	4621      	mov	r1, r4
		hcto += addr_us_get(0);
    4e32:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    4e34:	4620      	mov	r0, r4
    4e36:	f001 fbf1 	bl	661c <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    4e3a:	1a28      	subs	r0, r5, r0
    4e3c:	f001 fd7a 	bl	6934 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    4e40:	f001 fc7a 	bl	6738 <radio_rssi_measure>
}
    4e44:	b00a      	add	sp, #40	; 0x28
    4e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		radio_switch_complete_and_tx(0, 0, 0, 0);
    4e4a:	2300      	movs	r3, #0
    4e4c:	461a      	mov	r2, r3
    4e4e:	4619      	mov	r1, r3
    4e50:	4618      	mov	r0, r3
    4e52:	f001 fc59 	bl	6708 <radio_switch_complete_and_tx>
		rx_packet_set(_radio.conn_curr,	(void *)
    4e56:	f8d4 6114 	ldr.w	r6, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    4e5a:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
    4e5e:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	radio_phy_set(phy, 0);
    4e62:	2100      	movs	r1, #0
    4e64:	4608      	mov	r0, r1
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    4e66:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
	radio_phy_set(phy, 0);
    4e6a:	f001 fb57 	bl	651c <radio_phy_set>
	if (conn->enc_rx) {
    4e6e:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    4e72:	06d8      	lsls	r0, r3, #27
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    4e74:	f104 0408 	add.w	r4, r4, #8
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    4e78:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_rx) {
    4e7c:	d51f      	bpl.n	4ebe <isr+0x186>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    4e7e:	211f      	movs	r1, #31
    4e80:	2008      	movs	r0, #8
    4e82:	f001 fb91 	bl	65a8 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    4e86:	4622      	mov	r2, r4
    4e88:	2100      	movs	r1, #0
    4e8a:	f106 00a9 	add.w	r0, r6, #169	; 0xa9
    4e8e:	f001 fd6b 	bl	6968 <radio_ccm_rx_pkt_set>
		radio_pkt_rx_set(pdu_data_rx);
    4e92:	f001 fbb7 	bl	6604 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    4e96:	f001 fbf3 	bl	6680 <radio_is_ready>
    4e9a:	4604      	mov	r4, r0
    4e9c:	2800      	cmp	r0, #0
    4e9e:	d19c      	bne.n	4dda <isr+0xa2>
		hcto += radio_rx_chain_delay_get(0, 0);
    4ea0:	4601      	mov	r1, r0
    4ea2:	f001 fbbd 	bl	6620 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    4ea6:	4621      	mov	r1, r4
		hcto += addr_us_get(0);
    4ea8:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    4eaa:	4620      	mov	r0, r4
    4eac:	f001 fbb6 	bl	661c <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    4eb0:	1a28      	subs	r0, r5, r0
    4eb2:	f001 fd3f 	bl	6934 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    4eb6:	2001      	movs	r0, #1
    4eb8:	f7ff fb56 	bl	4568 <packet_tx_enqueue>
    4ebc:	e7c2      	b.n	4e44 <isr+0x10c>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    4ebe:	2008      	movs	r0, #8
    4ec0:	211b      	movs	r1, #27
    4ec2:	f001 fb71 	bl	65a8 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    4ec6:	4620      	mov	r0, r4
    4ec8:	e7e3      	b.n	4e92 <isr+0x15a>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    4eca:	b925      	cbnz	r5, 4ed6 <isr+0x19e>
		_radio.state = STATE_CLOSE;
    4ecc:	2303      	movs	r3, #3
    4ece:	7563      	strb	r3, [r4, #21]
		radio_disable();
    4ed0:	f001 fbb8 	bl	6644 <radio_disable>
    4ed4:	e7b6      	b.n	4e44 <isr+0x10c>
	switch (_radio.role) {
    4ed6:	7d23      	ldrb	r3, [r4, #20]
    4ed8:	b2db      	uxtb	r3, r3
    4eda:	2b01      	cmp	r3, #1
    4edc:	d05e      	beq.n	4f9c <isr+0x264>
    4ede:	2b02      	cmp	r3, #2
    4ee0:	f47f af7b 	bne.w	4dda <isr+0xa2>
		if (crc_ok &&
    4ee4:	f1b8 0f00 	cmp.w	r8, #0
    4ee8:	f000 8097 	beq.w	501a <isr+0x2e2>
	return ((_radio.scanner.filter_policy & 0x01) == 0) ||
    4eec:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    4ef0:	06db      	lsls	r3, r3, #27
    4ef2:	d502      	bpl.n	4efa <isr+0x1c2>
		if (crc_ok &&
    4ef4:	2f00      	cmp	r7, #0
    4ef6:	f000 8090 	beq.w	501a <isr+0x2e2>
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    4efa:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
    4efe:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    4f02:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    4f06:	7a2b      	ldrb	r3, [r5, #8]
    4f08:	f013 020f 	ands.w	r2, r3, #15
    4f0c:	d002      	beq.n	4f14 <isr+0x1dc>
    4f0e:	2a06      	cmp	r2, #6
    4f10:	f040 808e 	bne.w	5030 <isr+0x2f8>
		 (_radio.scanner.type != 0) &&
    4f14:	f894 10e1 	ldrb.w	r1, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    4f18:	070f      	lsls	r7, r1, #28
    4f1a:	d57a      	bpl.n	5012 <isr+0x2da>
		 (_radio.scanner.type != 0) &&
    4f1c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    4f20:	2900      	cmp	r1, #0
    4f22:	d176      	bne.n	5012 <isr+0x2da>
		err = isr_rx_scan_report(rssi_ready,
    4f24:	4630      	mov	r0, r6
    4f26:	f7ff fe9d 	bl	4c64 <isr_rx_scan_report.isra.16>
		if (err) {
    4f2a:	4607      	mov	r7, r0
    4f2c:	2800      	cmp	r0, #0
    4f2e:	d174      	bne.n	501a <isr+0x2e2>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    4f30:	f001 fbda 	bl	66e8 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    4f34:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    4f36:	4957      	ldr	r1, [pc, #348]	; (5094 <isr+0x35c>)
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    4f38:	2203      	movs	r2, #3
    4f3a:	f362 0303 	bfi	r3, r2, #0, #4
    4f3e:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    4f40:	7a2a      	ldrb	r2, [r5, #8]
    4f42:	b2db      	uxtb	r3, r3
    4f44:	f3c2 1280 	ubfx	r2, r2, #6, #1
    4f48:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    4f4c:	220c      	movs	r2, #12
    4f4e:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    4f50:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
    4f54:	09d2      	lsrs	r2, r2, #7
    4f56:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    4f5a:	4606      	mov	r6, r0
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    4f5c:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    4f5e:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    4f62:	f7fc ffc7 	bl	1ef4 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    4f66:	2206      	movs	r2, #6
    4f68:	f105 010a 	add.w	r1, r5, #10
    4f6c:	f106 0008 	add.w	r0, r6, #8
    4f70:	f7fc ffc0 	bl	1ef4 <memcpy>
		_radio.scanner.state = 1;
    4f74:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    4f78:	f043 0302 	orr.w	r3, r3, #2
    4f7c:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    4f80:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    4f82:	2302      	movs	r3, #2
    4f84:	7563      	strb	r3, [r4, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
    4f86:	f001 fc45 	bl	6814 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    4f8a:	4638      	mov	r0, r7
    4f8c:	f001 fbb0 	bl	66f0 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    4f90:	4630      	mov	r0, r6
    4f92:	f001 fb3d 	bl	6610 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    4f96:	f001 fcd9 	bl	694c <radio_tmr_end_capture>
    4f9a:	e034      	b.n	5006 <isr+0x2ce>
		if (crc_ok) {
    4f9c:	f1b8 0f00 	cmp.w	r8, #0
    4fa0:	d094      	beq.n	4ecc <isr+0x194>
	pdu_adv = (void *)radio_pkt_scratch_get();
    4fa2:	f001 fba1 	bl	66e8 <radio_pkt_scratch_get>
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    4fa6:	7802      	ldrb	r2, [r0, #0]
    4fa8:	f002 030f 	and.w	r3, r2, #15
    4fac:	2b03      	cmp	r3, #3
    4fae:	d18d      	bne.n	4ecc <isr+0x194>
    4fb0:	7843      	ldrb	r3, [r0, #1]
    4fb2:	2b0c      	cmp	r3, #12
    4fb4:	d18a      	bne.n	4ecc <isr+0x194>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    4fb6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		(devmatch_ok)) &&
    4fba:	0659      	lsls	r1, r3, #25
    4fbc:	d501      	bpl.n	4fc2 <isr+0x28a>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    4fbe:	2f00      	cmp	r7, #0
    4fc0:	d084      	beq.n	4ecc <isr+0x194>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    4fc2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    4fc6:	2527      	movs	r5, #39	; 0x27
    4fc8:	212a      	movs	r1, #42	; 0x2a
    4fca:	fb15 1303 	smlabb	r3, r5, r3, r1
    4fce:	18e6      	adds	r6, r4, r3
	return (adv->tx_addr == sr->rx_addr) &&
    4fd0:	5ce3      	ldrb	r3, [r4, r3]
    4fd2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4fd6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    4fda:	f47f af77 	bne.w	4ecc <isr+0x194>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    4fde:	f100 0108 	add.w	r1, r0, #8
    4fe2:	2206      	movs	r2, #6
    4fe4:	1cb0      	adds	r0, r6, #2
    4fe6:	f7fc ff70 	bl	1eca <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    4fea:	2800      	cmp	r0, #0
    4fec:	f47f af6e 	bne.w	4ecc <isr+0x194>
		_radio.state = STATE_CLOSE;
    4ff0:	2303      	movs	r3, #3
    4ff2:	7563      	strb	r3, [r4, #21]
		radio_switch_complete_and_disable();
    4ff4:	f001 fb92 	bl	671c <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    4ff8:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    4ffc:	fb05 4000 	mla	r0, r5, r0, r4
    5000:	307a      	adds	r0, #122	; 0x7a
    5002:	f001 fb05 	bl	6610 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    5006:	f001 fb3b 	bl	6680 <radio_is_ready>
    500a:	2800      	cmp	r0, #0
    500c:	f43f af1a 	beq.w	4e44 <isr+0x10c>
    5010:	e6e3      	b.n	4dda <isr+0xa2>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    5012:	b96a      	cbnz	r2, 5030 <isr+0x2f8>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    5014:	7a6b      	ldrb	r3, [r5, #9]
    5016:	2b00      	cmp	r3, #0
    5018:	d156      	bne.n	50c8 <isr+0x390>
			_radio.state = STATE_CLOSE;
    501a:	2303      	movs	r3, #3
    501c:	7563      	strb	r3, [r4, #21]
			radio_disable();
    501e:	f001 fb11 	bl	6644 <radio_disable>
			_radio.scanner.state = 0U;
    5022:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    5026:	f36f 0341 	bfc	r3, #1, #1
    502a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    502e:	e709      	b.n	4e44 <isr+0x10c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    5030:	2a01      	cmp	r2, #1
    5032:	d00d      	beq.n	5050 <isr+0x318>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    5034:	7a2b      	ldrb	r3, [r5, #8]
					&dir_report))) ||
    5036:	f003 020b 	and.w	r2, r3, #11
    503a:	2a02      	cmp	r2, #2
    503c:	d0ea      	beq.n	5014 <isr+0x2dc>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    503e:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    5042:	2b07      	cmp	r3, #7
    5044:	d128      	bne.n	5098 <isr+0x360>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    5046:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    504a:	0759      	lsls	r1, r3, #29
    504c:	d1e2      	bne.n	5014 <isr+0x2dc>
    504e:	e7e4      	b.n	501a <isr+0x2e2>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    5050:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    5054:	09db      	lsrs	r3, r3, #7
    5056:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    505a:	d00f      	beq.n	507c <isr+0x344>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    505c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    5060:	f3c3 1301 	ubfx	r3, r3, #4, #2
    5064:	0798      	lsls	r0, r3, #30
    5066:	d5e5      	bpl.n	5034 <isr+0x2fc>
    5068:	f995 3008 	ldrsb.w	r3, [r5, #8]
    506c:	2b00      	cmp	r3, #0
    506e:	dae1      	bge.n	5034 <isr+0x2fc>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    5070:	7d6b      	ldrb	r3, [r5, #21]
    5072:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5076:	2b40      	cmp	r3, #64	; 0x40
    5078:	d0cc      	beq.n	5014 <isr+0x2dc>
    507a:	e7db      	b.n	5034 <isr+0x2fc>
		(memcmp(&_radio.scanner.init_addr[0],
    507c:	2206      	movs	r2, #6
    507e:	f105 0110 	add.w	r1, r5, #16
    5082:	4804      	ldr	r0, [pc, #16]	; (5094 <isr+0x35c>)
    5084:	f7fc ff21 	bl	1eca <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    5088:	2800      	cmp	r0, #0
    508a:	d1e7      	bne.n	505c <isr+0x324>
    508c:	e7c2      	b.n	5014 <isr+0x2dc>
    508e:	bf00      	nop
    5090:	200002ac 	.word	0x200002ac
    5094:	2000038e 	.word	0x2000038e
		   (_radio.scanner.phy)) ||
    5098:	2b04      	cmp	r3, #4
    509a:	d1be      	bne.n	501a <isr+0x2e2>
		   (_radio.scanner.state != 0) &&
    509c:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    50a0:	079a      	lsls	r2, r3, #30
    50a2:	d5ba      	bpl.n	501a <isr+0x2e2>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    50a4:	f001 fb20 	bl	66e8 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    50a8:	7a2b      	ldrb	r3, [r5, #8]
    50aa:	7802      	ldrb	r2, [r0, #0]
    50ac:	f3c3 1380 	ubfx	r3, r3, #6, #1
    50b0:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    50b4:	d1b1      	bne.n	501a <isr+0x2e2>
		(memcmp(&sreq->scan_req.adv_addr[0],
    50b6:	2206      	movs	r2, #6
    50b8:	f105 010a 	add.w	r1, r5, #10
    50bc:	3008      	adds	r0, #8
    50be:	f7fc ff04 	bl	1eca <memcmp>
		   (_radio.scanner.state != 0) &&
    50c2:	2800      	cmp	r0, #0
    50c4:	d0a6      	beq.n	5014 <isr+0x2dc>
    50c6:	e7a8      	b.n	501a <isr+0x2e2>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    50c8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    50cc:	2b00      	cmp	r3, #0
    50ce:	d1a4      	bne.n	501a <isr+0x2e2>
		err = isr_rx_scan_report(rssi_ready,
    50d0:	4630      	mov	r0, r6
    50d2:	f7ff fdc7 	bl	4c64 <isr_rx_scan_report.isra.16>
    50d6:	e7a0      	b.n	501a <isr+0x2e2>
	switch (_radio.role) {
    50d8:	7d22      	ldrb	r2, [r4, #20]
    50da:	b2d2      	uxtb	r2, r2
    50dc:	2a01      	cmp	r2, #1
    50de:	d01f      	beq.n	5120 <isr+0x3e8>
    50e0:	f0c0 8081 	bcc.w	51e6 <isr+0x4ae>
    50e4:	2a02      	cmp	r2, #2
    50e6:	f47f ae78 	bne.w	4dda <isr+0xa2>
	if (_radio.state == STATE_CLOSE) {
    50ea:	2b03      	cmp	r3, #3
    50ec:	d16e      	bne.n	51cc <isr+0x494>
		radio_tmr_tifs_set(RADIO_TIFS);
    50ee:	2096      	movs	r0, #150	; 0x96
    50f0:	f001 fb90 	bl	6814 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    50f4:	2300      	movs	r3, #0
    50f6:	4619      	mov	r1, r3
    50f8:	461a      	mov	r2, r3
    50fa:	4618      	mov	r0, r3
    50fc:	f001 fb04 	bl	6708 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    5100:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    5104:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
		radio_pkt_rx_set(_radio.packet_rx
    5108:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    510c:	3008      	adds	r0, #8
    510e:	f001 fa79 	bl	6604 <radio_pkt_rx_set>
		radio_rssi_measure();
    5112:	f001 fb11 	bl	6738 <radio_rssi_measure>
		_radio.state = STATE_RX;
    5116:	2301      	movs	r3, #1
    5118:	7563      	strb	r3, [r4, #21]
		radio_rx_enable();
    511a:	f001 fa87 	bl	662c <radio_rx_enable>
    511e:	e66d      	b.n	4dfc <isr+0xc4>
	if ((_radio.state == STATE_CLOSE) &&
    5120:	2b03      	cmp	r3, #3
    5122:	d108      	bne.n	5136 <isr+0x3fe>
	    (_radio.advertiser.chan_map_current != 0)) {
    5124:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    5128:	075b      	lsls	r3, r3, #29
    512a:	d004      	beq.n	5136 <isr+0x3fe>
		adv_setup();
    512c:	f7ff fafa 	bl	4724 <adv_setup>
		radio_tx_enable();
    5130:	f001 fa82 	bl	6638 <radio_tx_enable>
    5134:	e662      	b.n	4dfc <isr+0xc4>
		radio_filter_disable();
    5136:	f001 fb3b 	bl	67b0 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    513a:	7d63      	ldrb	r3, [r4, #21]
    513c:	2b03      	cmp	r3, #3
    513e:	d12a      	bne.n	5196 <isr+0x45e>
			entropy_get_entropy_isr(_radio.entropy,
    5140:	6860      	ldr	r0, [r4, #4]
					  u16_t length,
					  u32_t flags)
{
	const struct entropy_driver_api *api = dev->driver_api;

	if (unlikely(!api->get_entropy_isr)) {
    5142:	6843      	ldr	r3, [r0, #4]
    5144:	685d      	ldr	r5, [r3, #4]
    5146:	b125      	cbz	r5, 5152 <isr+0x41a>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
    5148:	2300      	movs	r3, #0
    514a:	2202      	movs	r2, #2
    514c:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    5150:	47a8      	blx	r5
			random_delay %= HAL_TICKER_US_TO_TICKS(10000);
    5152:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
    5156:	f240 1247 	movw	r2, #327	; 0x147
    515a:	fbb1 f3f2 	udiv	r3, r1, r2
    515e:	fb02 1313 	mls	r3, r2, r3, r1
			ticker_status =
    5162:	f640 72a9 	movw	r2, #4009	; 0xfa9
    5166:	2100      	movs	r1, #0
    5168:	9206      	str	r2, [sp, #24]
			random_delay += 1;
    516a:	3301      	adds	r3, #1
			ticker_status =
    516c:	4a22      	ldr	r2, [pc, #136]	; (51f8 <isr+0x4c0>)
    516e:	9205      	str	r2, [sp, #20]
			random_delay += 1;
    5170:	b29b      	uxth	r3, r3
			ticker_status =
    5172:	9104      	str	r1, [sp, #16]
    5174:	9103      	str	r1, [sp, #12]
    5176:	9102      	str	r1, [sp, #8]
    5178:	9101      	str	r1, [sp, #4]
    517a:	9100      	str	r1, [sp, #0]
    517c:	2205      	movs	r2, #5
    517e:	4608      	mov	r0, r1
			random_delay += 1;
    5180:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
			ticker_status =
    5184:	f7fe fa0e 	bl	35a4 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5188:	f030 0302 	bics.w	r3, r0, #2
    518c:	d003      	beq.n	5196 <isr+0x45e>
    518e:	7ca3      	ldrb	r3, [r4, #18]
    5190:	2b05      	cmp	r3, #5
    5192:	f47f ae22 	bne.w	4dda <isr+0xa2>
	_radio.role = ROLE_NONE;
    5196:	2500      	movs	r5, #0
    5198:	7525      	strb	r5, [r4, #20]
	_radio.state = STATE_NONE;
    519a:	7565      	strb	r5, [r4, #21]
	_radio.ticker_id_event = 0U;
    519c:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
    519e:	f001 fbbd 	bl	691c <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    51a2:	462a      	mov	r2, r5
    51a4:	4629      	mov	r1, r5
    51a6:	4628      	mov	r0, r5
    51a8:	4b14      	ldr	r3, [pc, #80]	; (51fc <isr+0x4c4>)
    51aa:	f7fd fbe7 	bl	297c <mayfly_enqueue>
	LL_ASSERT(!retval);
    51ae:	4605      	mov	r5, r0
    51b0:	2800      	cmp	r0, #0
    51b2:	f47f ae12 	bne.w	4dda <isr+0xa2>
	clock_control_off(_radio.hf_clock, NULL);
    51b6:	6820      	ldr	r0, [r4, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    51b8:	6843      	ldr	r3, [r0, #4]
    51ba:	4629      	mov	r1, r5
    51bc:	685b      	ldr	r3, [r3, #4]
    51be:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    51c0:	2201      	movs	r2, #1
    51c2:	4611      	mov	r1, r2
    51c4:	4628      	mov	r0, r5
    51c6:	f7fd fbb1 	bl	292c <mayfly_enable>
    51ca:	e63b      	b.n	4e44 <isr+0x10c>
		radio_filter_disable();
    51cc:	f001 faf0 	bl	67b0 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    51d0:	7d63      	ldrb	r3, [r4, #21]
    51d2:	2b05      	cmp	r3, #5
    51d4:	d1df      	bne.n	5196 <isr+0x45e>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    51d6:	2300      	movs	r3, #0
    51d8:	9300      	str	r3, [sp, #0]
    51da:	2204      	movs	r2, #4
    51dc:	4619      	mov	r1, r3
    51de:	4618      	mov	r0, r3
    51e0:	f7fe fa2c 	bl	363c <ticker_stop>
    51e4:	e7d7      	b.n	5196 <isr+0x45e>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    51e6:	3b04      	subs	r3, #4
    51e8:	2b01      	cmp	r3, #1
    51ea:	f63f adf6 	bhi.w	4dda <isr+0xa2>
		_radio.state = STATE_NONE;
    51ee:	2300      	movs	r3, #0
    51f0:	7563      	strb	r3, [r4, #21]
    51f2:	e627      	b.n	4e44 <isr+0x10c>
    51f4:	f7ff fa6a 	bl	46cc <isr.part.22>
    51f8:	000048ed 	.word	0x000048ed
    51fc:	200028f0 	.word	0x200028f0

00005200 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    5200:	4b02      	ldr	r3, [pc, #8]	; (520c <mayfly_xtal_stop+0xc>)
    5202:	6818      	ldr	r0, [r3, #0]
    5204:	6843      	ldr	r3, [r0, #4]
    5206:	2100      	movs	r1, #0
    5208:	685b      	ldr	r3, [r3, #4]
    520a:	4718      	bx	r3
    520c:	200002ac 	.word	0x200002ac

00005210 <preempt_calc>:
{
    5210:	b570      	push	{r4, r5, r6, lr}
    5212:	4614      	mov	r4, r2
    5214:	460e      	mov	r6, r1
    5216:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    5218:	f7fe fae0 	bl	37dc <ticker_ticks_now_get>
	u32_t diff =
    521c:	4621      	mov	r1, r4
    521e:	f7fe fadf 	bl	37e0 <ticker_ticks_diff_get>
	diff += 3;
    5222:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    5224:	2c09      	cmp	r4, #9
    5226:	d911      	bls.n	524c <preempt_calc+0x3c>
		if (s_xtal_retained) {
    5228:	4b09      	ldr	r3, [pc, #36]	; (5250 <preempt_calc+0x40>)
    522a:	781b      	ldrb	r3, [r3, #0]
    522c:	b113      	cbz	r3, 5234 <preempt_calc+0x24>
    522e:	2000      	movs	r0, #0
    5230:	f7ff fa30 	bl	4694 <mayfly_xtal_retain.part.7>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    5234:	4632      	mov	r2, r6
    5236:	2100      	movs	r1, #0
    5238:	4628      	mov	r0, r5
    523a:	f7ff facb 	bl	47d4 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    523e:	68ab      	ldr	r3, [r5, #8]
    5240:	441c      	add	r4, r3
		if (diff <
    5242:	2c26      	cmp	r4, #38	; 0x26
    5244:	d800      	bhi.n	5248 <preempt_calc+0x38>
			hdr->ticks_preempt_to_start = diff;
    5246:	60ac      	str	r4, [r5, #8]
		return 1;
    5248:	2001      	movs	r0, #1
}
    524a:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    524c:	2000      	movs	r0, #0
    524e:	bd70      	pop	{r4, r5, r6, pc}
    5250:	20000490 	.word	0x20000490

00005254 <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    5254:	4b29      	ldr	r3, [pc, #164]	; (52fc <event_adv+0xa8>)
    5256:	7d1a      	ldrb	r2, [r3, #20]
{
    5258:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    525a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
{
    525e:	4605      	mov	r5, r0
    5260:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    5262:	b12a      	cbz	r2, 5270 <event_adv+0x1c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5264:	4040      	eors	r0, r0
    5266:	f380 8811 	msr	BASEPRI, r0
    526a:	f04f 0004 	mov.w	r0, #4
    526e:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    5270:	7c1b      	ldrb	r3, [r3, #16]
    5272:	b2db      	uxtb	r3, r3
    5274:	2b05      	cmp	r3, #5
    5276:	d1f5      	bne.n	5264 <event_adv+0x10>
	_radio.ticks_anchor = ticks_at_expire;
    5278:	60a0      	str	r0, [r4, #8]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    527a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	_radio.role = ROLE_ADV;
    527e:	2601      	movs	r6, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    5280:	f000 0007 	and.w	r0, r0, #7
	_radio.role = ROLE_ADV;
    5284:	7526      	strb	r6, [r4, #20]
	_radio.ticker_id_prepare = 0U;
    5286:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    5288:	7463      	strb	r3, [r4, #17]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    528a:	f7ff fb3b 	bl	4904 <adv_scan_configure.constprop.25>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    528e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    5292:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    5296:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    529a:	f363 0202 	bfi	r2, r3, #0, #3
    529e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
    52a2:	f7ff fa3f 	bl	4724 <adv_setup>
	if (_radio.advertiser.filter_policy) {
    52a6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    52aa:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    52ae:	d007      	beq.n	52c0 <event_adv+0x6c>
		struct ll_filter *wl = ctrl_filter_get(true);
    52b0:	4630      	mov	r0, r6
    52b2:	f000 ff0f 	bl	60d4 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    52b6:	1c82      	adds	r2, r0, #2
    52b8:	7841      	ldrb	r1, [r0, #1]
    52ba:	7800      	ldrb	r0, [r0, #0]
    52bc:	f001 fa5e 	bl	677c <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    52c0:	68e2      	ldr	r2, [r4, #12]
    52c2:	f105 0109 	add.w	r1, r5, #9
    52c6:	2001      	movs	r0, #1
    52c8:	f001 fab0 	bl	682c <radio_tmr_start>
	radio_tmr_end_capture();
    52cc:	f001 fb3e 	bl	694c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    52d0:	462a      	mov	r2, r5
    52d2:	2105      	movs	r1, #5
    52d4:	480a      	ldr	r0, [pc, #40]	; (5300 <event_adv+0xac>)
    52d6:	f7ff ff9b 	bl	5210 <preempt_calc>
    52da:	4603      	mov	r3, r0
    52dc:	b128      	cbz	r0, 52ea <event_adv+0x96>
		_radio.state = STATE_STOP;
    52de:	2304      	movs	r3, #4
    52e0:	7563      	strb	r3, [r4, #21]
}
    52e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    52e6:	f001 b9ad 	b.w	6644 <radio_disable>
		ticker_status =
    52ea:	4a06      	ldr	r2, [pc, #24]	; (5304 <event_adv+0xb0>)
    52ec:	4601      	mov	r1, r0
    52ee:	f7fe fa23 	bl	3738 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    52f2:	f030 0302 	bics.w	r3, r0, #2
    52f6:	d1b5      	bne.n	5264 <event_adv+0x10>
    52f8:	bd70      	pop	{r4, r5, r6, pc}
    52fa:	bf00      	nop
    52fc:	200002ac 	.word	0x200002ac
    5300:	200002c4 	.word	0x200002c4
    5304:	00004641 	.word	0x00004641

00005308 <mayfly_xtal_stop_calc>:
{
    5308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    530c:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    530e:	2302      	movs	r3, #2
    5310:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    5312:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    5314:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    5316:	4e4f      	ldr	r6, [pc, #316]	; (5454 <mayfly_xtal_stop_calc+0x14c>)
				    _radio.connection_count));
    5318:	4d4f      	ldr	r5, [pc, #316]	; (5458 <mayfly_xtal_stop_calc+0x150>)
	struct connection *conn_curr = NULL;
    531a:	930a      	str	r3, [sp, #40]	; 0x28
{
    531c:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    531e:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    5320:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0U;
    5324:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    5326:	ab09      	add	r3, sp, #36	; 0x24
    5328:	9302      	str	r3, [sp, #8]
    532a:	ab0c      	add	r3, sp, #48	; 0x30
    532c:	9300      	str	r3, [sp, #0]
    532e:	9601      	str	r6, [sp, #4]
    5330:	ab0d      	add	r3, sp, #52	; 0x34
    5332:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5336:	2101      	movs	r1, #1
    5338:	2000      	movs	r0, #0
    533a:	f7fe f9bb 	bl	36b4 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    533e:	2802      	cmp	r0, #2
    5340:	d00b      	beq.n	535a <mayfly_xtal_stop_calc+0x52>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    5342:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5344:	b16b      	cbz	r3, 5362 <mayfly_xtal_stop_calc+0x5a>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5346:	4040      	eors	r0, r0
    5348:	f380 8811 	msr	BASEPRI, r0
    534c:	f04f 0004 	mov.w	r0, #4
    5350:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    5352:	2101      	movs	r1, #1
    5354:	2000      	movs	r0, #0
    5356:	f7fe fa2b 	bl	37b0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    535a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    535c:	2b02      	cmp	r3, #2
    535e:	d0f8      	beq.n	5352 <mayfly_xtal_stop_calc+0x4a>
    5360:	e7ef      	b.n	5342 <mayfly_xtal_stop_calc+0x3a>
	} while (ticker_id_next != TICKER_NULL &&
    5362:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    5366:	2bff      	cmp	r3, #255	; 0xff
    5368:	d004      	beq.n	5374 <mayfly_xtal_stop_calc+0x6c>
    536a:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    536e:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    5370:	4293      	cmp	r3, r2
    5372:	dad8      	bge.n	5326 <mayfly_xtal_stop_calc+0x1e>
	if ((ticker_id_next == TICKER_NULL) ||
    5374:	1f5a      	subs	r2, r3, #5
    5376:	b2d2      	uxtb	r2, r2
    5378:	2af9      	cmp	r2, #249	; 0xf9
    537a:	4f38      	ldr	r7, [pc, #224]	; (545c <mayfly_xtal_stop_calc+0x154>)
    537c:	d805      	bhi.n	538a <mayfly_xtal_stop_calc+0x82>
				_radio.connection_count))) {
    537e:	4a36      	ldr	r2, [pc, #216]	; (5458 <mayfly_xtal_stop_calc+0x150>)
    5380:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    5384:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    5386:	4293      	cmp	r3, r2
    5388:	db07      	blt.n	539a <mayfly_xtal_stop_calc+0x92>
		if (s_xtal_retained) {
    538a:	783b      	ldrb	r3, [r7, #0]
    538c:	b113      	cbz	r3, 5394 <mayfly_xtal_stop_calc+0x8c>
    538e:	2001      	movs	r0, #1
    5390:	f7ff f980 	bl	4694 <mayfly_xtal_retain.part.7>
}
    5394:	b00e      	add	sp, #56	; 0x38
    5396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    539a:	a90a      	add	r1, sp, #40	; 0x28
    539c:	b2e0      	uxtb	r0, r4
    539e:	f7ff f95b 	bl	4658 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    53a2:	2800      	cmp	r0, #0
    53a4:	d0cf      	beq.n	5346 <mayfly_xtal_stop_calc+0x3e>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    53a6:	6803      	ldr	r3, [r0, #0]
    53a8:	6845      	ldr	r5, [r0, #4]
    53aa:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    53ac:	bfb8      	it	lt
    53ae:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    53b0:	429d      	cmp	r5, r3
    53b2:	bf38      	it	cc
    53b4:	461d      	movcc	r5, r3
    53b6:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    53b8:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    53bc:	a90b      	add	r1, sp, #44	; 0x2c
    53be:	f103 0831 	add.w	r8, r3, #49	; 0x31
    53c2:	f7ff f949 	bl	4658 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    53c6:	4604      	mov	r4, r0
    53c8:	2800      	cmp	r0, #0
    53ca:	d0bc      	beq.n	5346 <mayfly_xtal_stop_calc+0x3e>
	ticks_prepare_to_start_next =
    53cc:	6886      	ldr	r6, [r0, #8]
    53ce:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    53d0:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    53d2:	429e      	cmp	r6, r3
    53d4:	bf38      	it	cc
    53d6:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    53d8:	2a00      	cmp	r2, #0
    53da:	da09      	bge.n	53f0 <mayfly_xtal_stop_calc+0xe8>
		if (ticks_to_expire > ticks_reduced) {
    53dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		u32_t ticks_reduced = (hdr_next->ticks_xtal_to_start &
    53de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    53e2:	1b92      	subs	r2, r2, r6
		if (ticks_to_expire > ticks_reduced) {
    53e4:	429a      	cmp	r2, r3
			ticks_to_expire -= ticks_reduced;
    53e6:	bf35      	itete	cc
    53e8:	1a9a      	subcc	r2, r3, r2
			ticks_to_expire = 0U;
    53ea:	2300      	movcs	r3, #0
			ticks_to_expire -= ticks_reduced;
    53ec:	920c      	strcc	r2, [sp, #48]	; 0x30
			ticks_to_expire = 0U;
    53ee:	930c      	strcs	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    53f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    53f2:	4445      	add	r5, r8
	if (ticks_to_expire >
    53f4:	429d      	cmp	r5, r3
    53f6:	d20b      	bcs.n	5410 <mayfly_xtal_stop_calc+0x108>
		if (s_xtal_retained) {
    53f8:	783b      	ldrb	r3, [r7, #0]
    53fa:	b113      	cbz	r3, 5402 <mayfly_xtal_stop_calc+0xfa>
    53fc:	2001      	movs	r0, #1
    53fe:	f7ff f949 	bl	4694 <mayfly_xtal_retain.part.7>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    5402:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    5406:	2101      	movs	r1, #1
    5408:	4620      	mov	r0, r4
    540a:	f7ff f9e3 	bl	47d4 <prepare_normal_set>
    540e:	e7c1      	b.n	5394 <mayfly_xtal_stop_calc+0x8c>
		if (!s_xtal_retained) {
    5410:	783a      	ldrb	r2, [r7, #0]
    5412:	b93a      	cbnz	r2, 5424 <mayfly_xtal_stop_calc+0x11c>
			s_xtal_retained = 1U;
    5414:	2001      	movs	r0, #1
			retval = mayfly_enqueue(caller_id,
    5416:	4b12      	ldr	r3, [pc, #72]	; (5460 <mayfly_xtal_stop_calc+0x158>)
			s_xtal_retained = 1U;
    5418:	7038      	strb	r0, [r7, #0]
			retval = mayfly_enqueue(caller_id,
    541a:	4611      	mov	r1, r2
    541c:	f7fd faae 	bl	297c <mayfly_enqueue>
			LL_ASSERT(!retval);
    5420:	2800      	cmp	r0, #0
    5422:	d190      	bne.n	5346 <mayfly_xtal_stop_calc+0x3e>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    5424:	6823      	ldr	r3, [r4, #0]
    5426:	2b00      	cmp	r3, #0
    5428:	dbb4      	blt.n	5394 <mayfly_xtal_stop_calc+0x8c>
    542a:	429e      	cmp	r6, r3
    542c:	d2b2      	bcs.n	5394 <mayfly_xtal_stop_calc+0x8c>
			ticker_status =
    542e:	2000      	movs	r0, #0
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    5430:	1b9b      	subs	r3, r3, r6
			ticker_status =
    5432:	490c      	ldr	r1, [pc, #48]	; (5464 <mayfly_xtal_stop_calc+0x15c>)
    5434:	9105      	str	r1, [sp, #20]
    5436:	9302      	str	r3, [sp, #8]
    5438:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    543c:	9406      	str	r4, [sp, #24]
    543e:	9004      	str	r0, [sp, #16]
    5440:	9003      	str	r0, [sp, #12]
    5442:	9001      	str	r0, [sp, #4]
    5444:	9000      	str	r0, [sp, #0]
    5446:	2101      	movs	r1, #1
    5448:	f7fe f8ac 	bl	35a4 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    544c:	f030 0302 	bics.w	r3, r0, #2
    5450:	d0a0      	beq.n	5394 <mayfly_xtal_stop_calc+0x8c>
    5452:	e778      	b.n	5346 <mayfly_xtal_stop_calc+0x3e>
    5454:	00004281 	.word	0x00004281
    5458:	200002ac 	.word	0x200002ac
    545c:	20000490 	.word	0x20000490
    5460:	20002940 	.word	0x20002940
    5464:	00004295 	.word	0x00004295

00005468 <radio_init>:
{
    5468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_radio.hf_clock = hf_clock;
    546c:	4e3c      	ldr	r6, [pc, #240]	; (5560 <radio_init+0xf8>)
{
    546e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    5470:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
    5474:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
    5478:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
	_radio.hf_clock = hf_clock;
    547c:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    547e:	f44f 7082 	mov.w	r0, #260	; 0x104
    5482:	fb00 4003 	mla	r0, r0, r3, r4
{
    5486:	f89d 9020 	ldrb.w	r9, [sp, #32]
	_radio.sca = sca;
    548a:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
    548e:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
    5492:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    5494:	f10c 0401 	add.w	r4, ip, #1
    5498:	b2e7      	uxtb	r7, r4
	    (offsetof(struct pdu_data, lldata) +
    549a:	f108 0403 	add.w	r4, r8, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    549e:	2c28      	cmp	r4, #40	; 0x28
	rx_count_max += 3;
    54a0:	f109 0e03 	add.w	lr, r9, #3
    54a4:	fa5f fe8e 	uxtb.w	lr, lr
	_radio.packet_data_octets_max = packet_data_octets_max;
    54a8:	f8a6 812c 	strh.w	r8, [r6, #300]	; 0x12c
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    54ac:	bf88      	it	hi
    54ae:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
    54b2:	f886 e14c 	strb.w	lr, [r6, #332]	; 0x14c
		_radio.packet_rx_data_pool_size =
    54b6:	bf8c      	ite	hi
    54b8:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    54bc:	eb0e 0e4e 	addls.w	lr, lr, lr, lsl #1
	_radio.entropy = entropy;
    54c0:	6072      	str	r2, [r6, #4]
	_radio.packet_tx_count = (tx_count_max + 1);
    54c2:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    54c6:	f109 0204 	add.w	r2, r9, #4
    54ca:	b2d2      	uxtb	r2, r2
		_radio.packet_rx_data_pool_size =
    54cc:	bf8c      	ite	hi
    54ce:	fb18 fe0e 	smulbbhi	lr, r8, lr
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    54d2:	ea4f 1e0e 	movls.w	lr, lr, lsl #4
	_radio.packet_tx_count = (tx_count_max + 1);
    54d6:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    54da:	f8a6 e12e 	strh.w	lr, [r6, #302]	; 0x12e
	_radio.packet_tx_count = (tx_count_max + 1);
    54de:	f886 c16c 	strb.w	ip, [r6, #364]	; 0x16c
	_radio.packet_rx = (void *)mem_radio;
    54e2:	f8c6 0134 	str.w	r0, [r6, #308]	; 0x134
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    54e6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
    54ea:	eb00 0082 	add.w	r0, r0, r2, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    54ee:	f8b6 412e 	ldrh.w	r4, [r6, #302]	; 0x12e
	_radio.pkt_tx = (void *)mem_radio;
    54f2:	f8c6 0164 	str.w	r0, [r6, #356]	; 0x164
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    54f6:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    54f8:	f04f 0e30 	mov.w	lr, #48	; 0x30
	_radio.pkt_release = (void *)mem_radio;
    54fc:	f8c6 0168 	str.w	r0, [r6, #360]	; 0x168
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    5500:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    5502:	f8a6 e130 	strh.w	lr, [r6, #304]	; 0x130
	_radio.pkt_rx_data_pool = mem_radio;
    5506:	f8c6 0124 	str.w	r0, [r6, #292]	; 0x124
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    550a:	fbb4 fefe 	udiv	lr, r4, lr
	mem_radio += _radio.packet_rx_data_pool_size;
    550e:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    5510:	18d4      	adds	r4, r2, r3
	_radio.link_rx_pool = mem_radio;
    5512:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    5516:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    551a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
	_radio.pkt_tx_ctrl_pool = mem_radio;
    551e:	f8c6 0150 	str.w	r0, [r6, #336]	; 0x150
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    5522:	340a      	adds	r4, #10
    5524:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    5528:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    552a:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    552c:	f8a6 4160 	strh.w	r4, [r6, #352]	; 0x160
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    5530:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    5534:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    5536:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
    553a:	f886 2138 	strb.w	r2, [r6, #312]	; 0x138
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    553e:	f886 e132 	strb.w	lr, [r6, #306]	; 0x132
	_radio.pkt_tx_data_pool = mem_radio;
    5542:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
	if (retcode) {
    5546:	d003      	beq.n	5550 <radio_init+0xe8>
		return (retcode + mem_size);
    5548:	442c      	add	r4, r5
}
    554a:	4620      	mov	r0, r4
    554c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	_radio.fc_ena = 1U;
    5550:	2301      	movs	r3, #1
    5552:	f886 317a 	strb.w	r3, [r6, #378]	; 0x17a
	common_init();
    5556:	f7ff fb1b 	bl	4b90 <common_init>
	radio_setup();
    555a:	f000 ffa3 	bl	64a4 <radio_setup>
	return retcode;
    555e:	e7f4      	b.n	554a <radio_init+0xe2>
    5560:	200002ac 	.word	0x200002ac

00005564 <ll_reset>:
{
    5564:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    5566:	2103      	movs	r1, #3
    5568:	2005      	movs	r0, #5
    556a:	f7fe feff 	bl	436c <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    556e:	2104      	movs	r1, #4
    5570:	2006      	movs	r0, #6
    5572:	f7fe fefb 	bl	436c <role_disable>
	for (conn_handle = 0U; conn_handle < _radio.connection_count;
    5576:	4c22      	ldr	r4, [pc, #136]	; (5600 <ll_reset+0x9c>)
    5578:	2500      	movs	r5, #0
    557a:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    557e:	b2ab      	uxth	r3, r5
    5580:	429a      	cmp	r2, r3
    5582:	f105 0501 	add.w	r5, r5, #1
    5586:	d834      	bhi.n	55f2 <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0U;
    5588:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    558c:	f36f 1386 	bfc	r3, #6, #1
    5590:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0U;
    5594:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
    5598:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0U;
    559a:	f360 0300 	bfi	r3, r0, #0, #1
    559e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    55a2:	2230      	movs	r2, #48	; 0x30
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    55a4:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
    55a8:	fbb3 f3f2 	udiv	r3, r3, r2
    55ac:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    55b0:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
	_radio.packet_rx_last = 0U;
    55b4:	f884 0139 	strb.w	r0, [r4, #313]	; 0x139
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    55b8:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0U;
    55ba:	f884 016d 	strb.w	r0, [r4, #365]	; 0x16d
	_radio.packet_release_last = 0U;
    55be:	f884 0170 	strb.w	r0, [r4, #368]	; 0x170
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    55c2:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
	_radio.fc_ack = _radio.fc_req;
    55c6:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
	_radio.advertiser.conn = NULL;
    55ca:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
    55ce:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    55d2:	f8a4 2130 	strh.w	r2, [r4, #304]	; 0x130
	_radio.packet_rx_acquire = 0U;
    55d6:	f884 013a 	strb.w	r0, [r4, #314]	; 0x13a
	_radio.packet_tx_last = 0U;
    55da:	f884 016e 	strb.w	r0, [r4, #366]	; 0x16e
	_radio.packet_release_first = 0U;
    55de:	f884 016f 	strb.w	r0, [r4, #367]	; 0x16f
	_radio.fc_ack = _radio.fc_req;
    55e2:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	ll_filter_reset(false);
    55e6:	f000 fe19 	bl	621c <ll_filter_reset>
}
    55ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    55ee:	f7ff bacf 	b.w	4b90 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    55f2:	1da8      	adds	r0, r5, #6
    55f4:	21ff      	movs	r1, #255	; 0xff
    55f6:	b2c0      	uxtb	r0, r0
    55f8:	f7fe feb8 	bl	436c <role_disable>
    55fc:	e7bd      	b.n	557a <ll_reset+0x16>
    55fe:	bf00      	nop
    5600:	200002ac 	.word	0x200002ac

00005604 <radio_adv_data_get>:
}
    5604:	4800      	ldr	r0, [pc, #0]	; (5608 <radio_adv_data_get+0x4>)
    5606:	4770      	bx	lr
    5608:	200002d6 	.word	0x200002d6

0000560c <radio_scan_data_get>:
}
    560c:	4800      	ldr	r0, [pc, #0]	; (5610 <radio_scan_data_get+0x4>)
    560e:	4770      	bx	lr
    5610:	20000326 	.word	0x20000326

00005614 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    5614:	4b02      	ldr	r3, [pc, #8]	; (5620 <ll_adv_is_enabled+0xc>)
    5616:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    561a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    561e:	4770      	bx	lr
    5620:	200002ac 	.word	0x200002ac

00005624 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    5624:	4b04      	ldr	r3, [pc, #16]	; (5638 <radio_adv_filter_pol_get+0x14>)
    5626:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
    562a:	f010 0040 	ands.w	r0, r0, #64	; 0x40
		return _radio.advertiser.filter_policy;
    562e:	bf1c      	itt	ne
    5630:	f893 0029 	ldrbne.w	r0, [r3, #41]	; 0x29
    5634:	0980      	lsrne	r0, r0, #6
}
    5636:	4770      	bx	lr
    5638:	200002ac 	.word	0x200002ac

0000563c <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    563c:	4b05      	ldr	r3, [pc, #20]	; (5654 <radio_scan_filter_pol_get+0x18>)
    563e:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    5642:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    5646:	bf1c      	itt	ne
    5648:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
    564c:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    5650:	4770      	bx	lr
    5652:	bf00      	nop
    5654:	200002ac 	.word	0x200002ac

00005658 <ll_rx_get>:

u8_t ll_rx_get(void **node_rx, u16_t *handle)
{
    5658:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    565c:	4605      	mov	r5, r0
    565e:	4608      	mov	r0, r1
	u8_t cmplt;

	cmplt = 0U;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    5660:	4918      	ldr	r1, [pc, #96]	; (56c4 <ll_rx_get+0x6c>)
    5662:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
    5666:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    566a:	4293      	cmp	r3, r2
    566c:	460f      	mov	r7, r1
    566e:	d01f      	beq.n	56b0 <ll_rx_get+0x58>
		struct radio_pdu_node_rx *_node_rx;

		_node_rx = _radio.link_rx_head->mem;
    5670:	f8d3 8004 	ldr.w	r8, [r3, #4]

		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    5674:	f201 116f 	addw	r1, r1, #367	; 0x16f
    5678:	f898 2000 	ldrb.w	r2, [r8]
    567c:	f7fe fe16 	bl	42ac <tx_cmplt_get>
				     _node_rx->hdr.packet_release_last);
		if (!cmplt) {
    5680:	4604      	mov	r4, r0
    5682:	b9e0      	cbnz	r0, 56be <ll_rx_get+0x66>
			u8_t first, cmplt_prev, cmplt_curr;
			u16_t h;

			first = _radio.packet_release_first;
    5684:	ae02      	add	r6, sp, #8
    5686:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
    568a:	f806 3d03 	strb.w	r3, [r6, #-3]!
			cmplt_curr = 0U;
			do {
				cmplt_prev = cmplt_curr;
				cmplt_curr = tx_cmplt_get(&h, &first,
    568e:	f897 2170 	ldrb.w	r2, [r7, #368]	; 0x170
    5692:	4631      	mov	r1, r6
    5694:	f10d 0006 	add.w	r0, sp, #6
    5698:	f7fe fe08 	bl	42ac <tx_cmplt_get>
						_radio.packet_release_last);
			} while ((cmplt_prev != 0) ||
				 (cmplt_prev != cmplt_curr));
    569c:	b934      	cbnz	r4, 56ac <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
    569e:	b928      	cbnz	r0, 56ac <ll_rx_get+0x54>

			*node_rx = _node_rx;
    56a0:	f8c5 8000 	str.w	r8, [r5]

		*node_rx = NULL;
	}

	return cmplt;
}
    56a4:	4620      	mov	r0, r4
    56a6:	b002      	add	sp, #8
    56a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    56ac:	4604      	mov	r4, r0
    56ae:	e7ee      	b.n	568e <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    56b0:	f891 2170 	ldrb.w	r2, [r1, #368]	; 0x170
    56b4:	f201 116f 	addw	r1, r1, #367	; 0x16f
    56b8:	f7fe fdf8 	bl	42ac <tx_cmplt_get>
    56bc:	4604      	mov	r4, r0
		*node_rx = NULL;
    56be:	2300      	movs	r3, #0
    56c0:	602b      	str	r3, [r5, #0]
    56c2:	e7ef      	b.n	56a4 <ll_rx_get+0x4c>
    56c4:	200002ac 	.word	0x200002ac

000056c8 <ll_rx_dequeue>:

void ll_rx_dequeue(void)
{
    56c8:	b513      	push	{r0, r1, r4, lr}
	struct radio_pdu_node_rx *node_rx = NULL;
	memq_link_t *link;

	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    56ca:	4c15      	ldr	r4, [pc, #84]	; (5720 <ll_rx_dequeue+0x58>)
	struct radio_pdu_node_rx *node_rx = NULL;
    56cc:	aa02      	add	r2, sp, #8
    56ce:	2300      	movs	r3, #0
    56d0:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    56d4:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    56d8:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    56dc:	f7fd f8ec 	bl	28b8 <memq_dequeue>
			    (void **)&node_rx);
	LL_ASSERT(link);
    56e0:	b928      	cbnz	r0, 56ee <ll_rx_dequeue+0x26>
		/* did not use data link quota */
		break;
#endif /* CONFIG_BT_CONN */

	default:
		LL_ASSERT(0);
    56e2:	4040      	eors	r0, r0
    56e4:	f380 8811 	msr	BASEPRI, r0
    56e8:	f04f 0004 	mov.w	r0, #4
    56ec:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
    56ee:	f504 71a0 	add.w	r1, r4, #320	; 0x140
    56f2:	f7fd f8a8 	bl	2846 <mem_release>
	switch (node_rx->hdr.type) {
    56f6:	9b01      	ldr	r3, [sp, #4]
    56f8:	791a      	ldrb	r2, [r3, #4]
    56fa:	2a07      	cmp	r2, #7
    56fc:	d8f1      	bhi.n	56e2 <ll_rx_dequeue+0x1a>
    56fe:	2301      	movs	r3, #1
    5700:	4093      	lsls	r3, r2
    5702:	f013 0fe4 	tst.w	r3, #228	; 0xe4
    5706:	d0ec      	beq.n	56e2 <ll_rx_dequeue+0x1a>
		LL_ASSERT(_radio.link_rx_data_quota <
    5708:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
    570c:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
    5710:	3a01      	subs	r2, #1
    5712:	4293      	cmp	r3, r2
    5714:	dae5      	bge.n	56e2 <ll_rx_dequeue+0x1a>
		_radio.link_rx_data_quota++;
    5716:	3301      	adds	r3, #1
    5718:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
			ll_adv_scan_state_cb(0);
		}
#endif /* CONFIG_BT_CONN */
	}

}
    571c:	b002      	add	sp, #8
    571e:	bd10      	pop	{r4, pc}
    5720:	200002ac 	.word	0x200002ac

00005724 <ll_rx_mem_release>:

void ll_rx_mem_release(void **node_rx)
{
    5724:	b570      	push	{r4, r5, r6, lr}
    5726:	4604      	mov	r4, r0

#if defined(CONFIG_BT_CTLR_ADV_INDICATION)
		case NODE_RX_TYPE_ADV_INDICATION:
#endif /* CONFIG_BT_CTLR_ADV_INDICATION */

			mem_release(_node_rx_free,
    5728:	4d0b      	ldr	r5, [pc, #44]	; (5758 <ll_rx_mem_release+0x34>)
	_node_rx = *node_rx;
    572a:	6800      	ldr	r0, [r0, #0]
	while (_node_rx) {
    572c:	b920      	cbnz	r0, 5738 <ll_rx_mem_release+0x14>
			LL_ASSERT(0);
			break;
		}
	}

	*node_rx = _node_rx;
    572e:	6020      	str	r0, [r4, #0]

	packet_rx_allocate(0xff);
}
    5730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	packet_rx_allocate(0xff);
    5734:	f7ff b9e2 	b.w	4afc <packet_rx_allocate.constprop.28>
		switch (_node_rx_free->hdr.type) {
    5738:	7903      	ldrb	r3, [r0, #4]
		_node_rx = _node_rx->hdr.next;
    573a:	6806      	ldr	r6, [r0, #0]
		switch (_node_rx_free->hdr.type) {
    573c:	3b05      	subs	r3, #5
    573e:	2b02      	cmp	r3, #2
    5740:	d804      	bhi.n	574c <ll_rx_mem_release+0x28>
			mem_release(_node_rx_free,
    5742:	4629      	mov	r1, r5
    5744:	f7fd f87f 	bl	2846 <mem_release>
		_node_rx = _node_rx->hdr.next;
    5748:	4630      	mov	r0, r6
			break;
    574a:	e7ef      	b.n	572c <ll_rx_mem_release+0x8>
			LL_ASSERT(0);
    574c:	4040      	eors	r0, r0
    574e:	f380 8811 	msr	BASEPRI, r0
    5752:	f04f 0004 	mov.w	r0, #4
    5756:	df02      	svc	2
    5758:	200003d4 	.word	0x200003d4

0000575c <radio_rx_fc_set>:

	return 0;
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
    575c:	b530      	push	{r4, r5, lr}
	if (_radio.fc_ena) {
    575e:	4b27      	ldr	r3, [pc, #156]	; (57fc <radio_rx_fc_set+0xa0>)
    5760:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
    5764:	b912      	cbnz	r2, 576c <radio_rx_fc_set+0x10>
				_radio.fc_ack = ack;
			}
		}
	}

	return 0;
    5766:	2100      	movs	r1, #0
}
    5768:	4608      	mov	r0, r1
    576a:	bd30      	pop	{r4, r5, pc}
		u8_t req = _radio.fc_req;
    576c:	f893 5178 	ldrb.w	r5, [r3, #376]	; 0x178
		u8_t ack = _radio.fc_ack;
    5770:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
		u8_t req = _radio.fc_req;
    5774:	b2ed      	uxtb	r5, r5
		if (fc) {
    5776:	b359      	cbz	r1, 57d0 <radio_rx_fc_set+0x74>
			if (handle != 0xffff) {
    5778:	f64f 71ff 	movw	r1, #65535	; 0xffff
    577c:	4288      	cmp	r0, r1
    577e:	d0f2      	beq.n	5766 <radio_rx_fc_set+0xa>
	if (req == ack) {
    5780:	4295      	cmp	r5, r2
    5782:	d119      	bne.n	57b8 <radio_rx_fc_set+0x5c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    5784:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    5788:	f8d3 1144 	ldr.w	r1, [r3, #324]	; 0x144
    578c:	4291      	cmp	r1, r2
    578e:	d111      	bne.n	57b4 <radio_rx_fc_set+0x58>
				ack1 = TRIPLE_BUFFER_SIZE;
    5790:	2d00      	cmp	r5, #0
    5792:	bf14      	ite	ne
    5794:	462a      	movne	r2, r5
    5796:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
    5798:	3a01      	subs	r2, #1
    579a:	b2d2      	uxtb	r2, r2
    579c:	eb03 0142 	add.w	r1, r3, r2, lsl #1
			_radio.fc_ack = ack1;
    57a0:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
			if (req != _radio.fc_req) {
    57a4:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
			_radio.fc_handle[--ack1] = handle;
    57a8:	f8a1 0172 	strh.w	r0, [r1, #370]	; 0x172
			if (req != _radio.fc_req) {
    57ac:	4295      	cmp	r5, r2
    57ae:	d0da      	beq.n	5766 <radio_rx_fc_set+0xa>
				_radio.fc_ack = ack;
    57b0:	f883 5179 	strb.w	r5, [r3, #377]	; 0x179
			return 1;
    57b4:	2101      	movs	r1, #1
    57b6:	e7d7      	b.n	5768 <radio_rx_fc_set+0xc>
	} else if (((req == 0) &&
    57b8:	b92d      	cbnz	r5, 57c6 <radio_rx_fc_set+0x6a>
    57ba:	f8b3 1176 	ldrh.w	r1, [r3, #374]	; 0x176
	return 0;
    57be:	1a09      	subs	r1, r1, r0
    57c0:	bf18      	it	ne
    57c2:	2101      	movne	r1, #1
    57c4:	e7d0      	b.n	5768 <radio_rx_fc_set+0xc>
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    57c6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    57ca:	f8b3 1170 	ldrh.w	r1, [r3, #368]	; 0x170
    57ce:	e7f6      	b.n	57be <radio_rx_fc_set+0x62>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    57d0:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
    57d4:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
    57d8:	42a0      	cmp	r0, r4
    57da:	d1c4      	bne.n	5766 <radio_rx_fc_set+0xa>
    57dc:	4295      	cmp	r5, r2
    57de:	d0c2      	beq.n	5766 <radio_rx_fc_set+0xa>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    57e0:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
			_radio.fc_ack = req;
    57e4:	f883 5179 	strb.w	r5, [r3, #377]	; 0x179
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    57e8:	42a0      	cmp	r0, r4
    57ea:	d0bc      	beq.n	5766 <radio_rx_fc_set+0xa>
			    (req == _radio.fc_req)) {
    57ec:	f893 0178 	ldrb.w	r0, [r3, #376]	; 0x178
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    57f0:	4285      	cmp	r5, r0
    57f2:	d1b8      	bne.n	5766 <radio_rx_fc_set+0xa>
				_radio.fc_ack = ack;
    57f4:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
    57f8:	e7b6      	b.n	5768 <radio_rx_fc_set+0xc>
    57fa:	bf00      	nop
    57fc:	200002ac 	.word	0x200002ac

00005800 <ll_adv_scan_state_cb>:

	return 0;
}

void __weak ll_adv_scan_state_cb(u8_t bm)
{
    5800:	4770      	bx	lr
    5802:	0000      	movs	r0, r0
    5804:	0000      	movs	r0, r0
	...

00005808 <radio_adv_enable>:
{
    5808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.advertiser.is_enabled) {
    580c:	4f96      	ldr	r7, [pc, #600]	; (5a68 <radio_adv_enable+0x260>)
{
    580e:	b08f      	sub	sp, #60	; 0x3c
    5810:	469a      	mov	sl, r3
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    5812:	2302      	movs	r3, #2
    5814:	930d      	str	r3, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
    5816:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
{
    581a:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	if (_radio.advertiser.is_enabled) {
    581e:	f013 0f40 	tst.w	r3, #64	; 0x40
{
    5822:	4683      	mov	fp, r0
    5824:	4688      	mov	r8, r1
    5826:	463e      	mov	r6, r7
	if (_radio.advertiser.is_enabled) {
    5828:	d003      	beq.n	5832 <radio_adv_enable+0x2a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    582a:	200c      	movs	r0, #12
}
    582c:	b00f      	add	sp, #60	; 0x3c
    582e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    5832:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
    5836:	232a      	movs	r3, #42	; 0x2a
    5838:	f04f 0927 	mov.w	r9, #39	; 0x27
    583c:	fb19 3902 	smlabb	r9, r9, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    5840:	f817 3009 	ldrb.w	r3, [r7, r9]
    5844:	f003 030f 	and.w	r3, r3, #15
    5848:	2b01      	cmp	r3, #1
    584a:	d875      	bhi.n	5938 <radio_adv_enable+0x130>
		if (_radio.advertiser.conn) {
    584c:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
    5850:	2c00      	cmp	r4, #0
    5852:	d1ea      	bne.n	582a <radio_adv_enable+0x22>
		link = mem_acquire(&_radio.link_rx_free);
    5854:	f507 70a0 	add.w	r0, r7, #320	; 0x140
    5858:	f7fc ffdb 	bl	2812 <mem_acquire>
		if (!link) {
    585c:	900a      	str	r0, [sp, #40]	; 0x28
    585e:	b158      	cbz	r0, 5878 <radio_adv_enable+0x70>
		conn = mem_acquire(&_radio.conn_free);
    5860:	f507 7086 	add.w	r0, r7, #268	; 0x10c
    5864:	f7fc ffd5 	bl	2812 <mem_acquire>
		if (!conn) {
    5868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    586a:	4605      	mov	r5, r0
    586c:	b930      	cbnz	r0, 587c <radio_adv_enable+0x74>
			mem_release(link, &_radio.link_rx_free);
    586e:	f507 71a0 	add.w	r1, r7, #320	; 0x140
    5872:	4610      	mov	r0, r2
    5874:	f7fc ffe7 	bl	2846 <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    5878:	2007      	movs	r0, #7
    587a:	e7d7      	b.n	582c <radio_adv_enable+0x24>
		conn->handle = 0xFFFF;
    587c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5880:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = LL_FEAT;
    5882:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    5886:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
		conn->data_chan_sel = 0U;
    588a:	7f43      	ldrb	r3, [r0, #29]
		conn->llcp_terminate.radio_pdu_node_rx.hdr.link = link;
    588c:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
		conn->data_chan_sel = 0U;
    5890:	f364 1386 	bfi	r3, r4, #6, #1
		conn->role = 1U;
    5894:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5898:	7743      	strb	r3, [r0, #29]
		conn->connect_expire = 6U;
    589a:	2306      	movs	r3, #6
    589c:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->common.fex_valid = 0U;
    589e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
		conn->data_chan_use = 0U;
    58a2:	77c4      	strb	r4, [r0, #31]
		conn->common.fex_valid = 0U;
    58a4:	f364 1345 	bfi	r3, r4, #5, #1
		conn->slave.latency_enabled = 0U;
    58a8:	f364 0300 	bfi	r3, r4, #0, #1
		conn->slave.latency_cancel = 0U;
    58ac:	f364 0341 	bfi	r3, r4, #1, #1
    58b0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		conn->llcp_version.tx = 0U;
    58b4:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
		conn->event_counter = 0U;
    58b8:	8444      	strh	r4, [r0, #34]	; 0x22
		conn->llcp_version.tx = 0U;
    58ba:	f364 0300 	bfi	r3, r4, #0, #1
		conn->llcp_version.rx = 0U;
    58be:	f364 0341 	bfi	r3, r4, #1, #1
    58c2:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
		conn->sn = 0U;
    58c6:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
		conn->latency_prepare = 0U;
    58ca:	8504      	strh	r4, [r0, #40]	; 0x28
		conn->sn = 0U;
    58cc:	f364 0300 	bfi	r3, r4, #0, #1
		conn->nesn = 0U;
    58d0:	f364 0341 	bfi	r3, r4, #1, #1
		conn->pause_rx = 0U;
    58d4:	f364 0382 	bfi	r3, r4, #2, #1
		conn->pause_tx = 0U;
    58d8:	f364 03c3 	bfi	r3, r4, #3, #1
		conn->enc_rx = 0U;
    58dc:	f364 1304 	bfi	r3, r4, #4, #1
		conn->enc_tx = 0U;
    58e0:	f364 1345 	bfi	r3, r4, #5, #1
		conn->refresh = 0U;
    58e4:	f364 1386 	bfi	r3, r4, #6, #1
		conn->empty = 0U;
    58e8:	f364 13c7 	bfi	r3, r4, #7, #1
    58ec:	f880 30a8 	strb.w	r3, [r0, #168]	; 0xa8
	if (done) {
    58f0:	4b5e      	ldr	r3, [pc, #376]	; (5a6c <radio_adv_enable+0x264>)
		conn->latency_event = 0U;
    58f2:	8544      	strh	r4, [r0, #42]	; 0x2a
		conn->slave.window_widening_prepare_us = 0U;
    58f4:	6444      	str	r4, [r0, #68]	; 0x44
		conn->slave.window_widening_event_us = 0U;
    58f6:	6484      	str	r4, [r0, #72]	; 0x48
		conn->slave.ticks_to_offset = 0U;
    58f8:	6584      	str	r4, [r0, #88]	; 0x58
		conn->supervision_expire = 0U;
    58fa:	8604      	strh	r4, [r0, #48]	; 0x30
		conn->procedure_expire = 0U;
    58fc:	8684      	strh	r4, [r0, #52]	; 0x34
		conn->llcp_req = 0U;
    58fe:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
		conn->llcp_ack = 0U;
    5902:	f880 405d 	strb.w	r4, [r0, #93]	; 0x5d
		conn->llcp_terminate.req = 0U;
    5906:	f880 4098 	strb.w	r4, [r0, #152]	; 0x98
		conn->llcp_terminate.ack = 0U;
    590a:	f880 4099 	strb.w	r4, [r0, #153]	; 0x99
		conn->llcp_terminate.reason_peer = 0U;
    590e:	f880 409b 	strb.w	r4, [r0, #155]	; 0x9b
		conn->pkt_tx_head = NULL;
    5912:	f8c0 40ec 	str.w	r4, [r0, #236]	; 0xec
		conn->pkt_tx_ctrl = NULL;
    5916:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
		conn->pkt_tx_ctrl_last = NULL;
    591a:	f8c0 40f4 	str.w	r4, [r0, #244]	; 0xf4
		conn->pkt_tx_data = NULL;
    591e:	f8c0 40f8 	str.w	r4, [r0, #248]	; 0xf8
		conn->pkt_tx_last = NULL;
    5922:	f8c0 40fc 	str.w	r4, [r0, #252]	; 0xfc
		conn->packet_tx_head_len = 0U;
    5926:	f880 4100 	strb.w	r4, [r0, #256]	; 0x100
		conn->packet_tx_head_offset = 0U;
    592a:	f880 4101 	strb.w	r4, [r0, #257]	; 0x101
	if (done) {
    592e:	781a      	ldrb	r2, [r3, #0]
    5930:	2a00      	cmp	r2, #0
    5932:	d06d      	beq.n	5a10 <radio_adv_enable+0x208>
		_radio.advertiser.conn = conn;
    5934:	f8c6 50cc 	str.w	r5, [r6, #204]	; 0xcc
	_radio.advertiser.chan_map = chan_map;
    5938:	a80e      	add	r0, sp, #56	; 0x38
	_radio.advertiser.phy_p = phy_p;
    593a:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
	_radio.advertiser.chan_map = chan_map;
    593e:	f810 2d09 	ldrb.w	r2, [r0, #-9]!
	_radio.advertiser.phy_p = phy_p;
    5942:	f36b 0302 	bfi	r3, fp, #0, #3
	_radio.advertiser.chan_map = chan_map;
    5946:	f362 03c5 	bfi	r3, r2, #3, #3
	_radio.advertiser.filter_policy = filter_policy;
    594a:	f36a 1387 	bfi	r3, sl, #6, #2
    594e:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
	_radio.advertiser.hdr.ticks_active_to_start =
    5952:	f8d6 317c 	ldr.w	r3, [r6, #380]	; 0x17c
    5956:	61f3      	str	r3, [r6, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    5958:	2327      	movs	r3, #39	; 0x27
    595a:	61b3      	str	r3, [r6, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    595c:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
    595e:	2300      	movs	r3, #0
    5960:	6233      	str	r3, [r6, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    5962:	f7fd f907 	bl	2b74 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    5966:	f817 3009 	ldrb.w	r3, [r7, r9]
    596a:	f003 030f 	and.w	r3, r3, #15
    596e:	2b01      	cmp	r3, #1
    5970:	d165      	bne.n	5a3e <radio_adv_enable+0x236>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    5972:	f44f 7327 	mov.w	r3, #668	; 0x29c
    5976:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    5978:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    597c:	493c      	ldr	r1, [pc, #240]	; (5a70 <radio_adv_enable+0x268>)
    597e:	a338      	add	r3, pc, #224	; (adr r3, 5a60 <radio_adv_enable+0x258>)
    5980:	e9d3 2300 	ldrd	r2, r3, [r3]
    5984:	fba0 0101 	umull	r0, r1, r0, r1
    5988:	f7fa fbfa 	bl	180 <__aeabi_uldivmod>
	ticks_slot_offset =
    598c:	69b3      	ldr	r3, [r6, #24]
    598e:	69f5      	ldr	r5, [r6, #28]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    5990:	6270      	str	r0, [r6, #36]	; 0x24
	ticks_slot_offset =
    5992:	429d      	cmp	r5, r3
    5994:	bf38      	it	cc
    5996:	461d      	movcc	r5, r3
	ticks_anchor = ticker_ticks_now_get();
    5998:	f7fd ff20 	bl	37dc <ticker_ticks_now_get>
		ret =
    599c:	ab0d      	add	r3, sp, #52	; 0x34
    599e:	9308      	str	r3, [sp, #32]
    59a0:	4b34      	ldr	r3, [pc, #208]	; (5a74 <radio_adv_enable+0x26c>)
    59a2:	9307      	str	r3, [sp, #28]
    59a4:	2400      	movs	r4, #0
    59a6:	4b34      	ldr	r3, [pc, #208]	; (5a78 <radio_adv_enable+0x270>)
    59a8:	9406      	str	r4, [sp, #24]
    59aa:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    59ac:	6a73      	ldr	r3, [r6, #36]	; 0x24
		ret =
    59ae:	9403      	str	r4, [sp, #12]
	ticks_anchor = ticker_ticks_now_get();
    59b0:	4607      	mov	r7, r0
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    59b2:	4832      	ldr	r0, [pc, #200]	; (5a7c <radio_adv_enable+0x274>)
		ret =
    59b4:	9402      	str	r4, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    59b6:	442b      	add	r3, r5
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    59b8:	fa1f f888 	uxth.w	r8, r8
		ret =
    59bc:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    59be:	fba8 0100 	umull	r0, r1, r8, r0
    59c2:	2391      	movs	r3, #145	; 0x91
    59c4:	fb03 1108 	mla	r1, r3, r8, r1
    59c8:	a325      	add	r3, pc, #148	; (adr r3, 5a60 <radio_adv_enable+0x258>)
    59ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    59ce:	f7fa fbd7 	bl	180 <__aeabi_uldivmod>
		ret =
    59d2:	9400      	str	r4, [sp, #0]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    59d4:	9001      	str	r0, [sp, #4]
		ret =
    59d6:	463b      	mov	r3, r7
    59d8:	2205      	movs	r2, #5
    59da:	2103      	movs	r1, #3
    59dc:	4620      	mov	r0, r4
    59de:	f7fd fd91 	bl	3504 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    59e2:	2802      	cmp	r0, #2
    59e4:	d035      	beq.n	5a52 <radio_adv_enable+0x24a>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    59e6:	980d      	ldr	r0, [sp, #52]	; 0x34
    59e8:	2800      	cmp	r0, #0
    59ea:	f47f af1e 	bne.w	582a <radio_adv_enable+0x22>
		_radio.advertiser.is_enabled = 1U;
    59ee:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    59f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    59f6:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    59fa:	f896 30e0 	ldrb.w	r3, [r6, #224]	; 0xe0
    59fe:	f013 0401 	ands.w	r4, r3, #1
    5a02:	f47f af13 	bne.w	582c <radio_adv_enable+0x24>
			ll_adv_scan_state_cb(BIT(0));
    5a06:	2001      	movs	r0, #1
    5a08:	f7ff fefa 	bl	5800 <ll_adv_scan_state_cb>
		return 0;
    5a0c:	4620      	mov	r0, r4
    5a0e:	e70d      	b.n	582c <radio_adv_enable+0x24>
	done = true;
    5a10:	2201      	movs	r2, #1
    5a12:	481b      	ldr	r0, [pc, #108]	; (5a80 <radio_adv_enable+0x278>)
    5a14:	701a      	strb	r2, [r3, #0]
    5a16:	f001 ffad 	bl	7974 <_impl_device_get_binding>
	LL_ASSERT(lf_clock);
    5a1a:	4604      	mov	r4, r0
    5a1c:	b938      	cbnz	r0, 5a2e <radio_adv_enable+0x226>
    5a1e:	4040      	eors	r0, r0
    5a20:	f380 8811 	msr	BASEPRI, r0
    5a24:	f04f 0004 	mov.w	r0, #4
    5a28:	df02      	svc	2
		cpu_sleep();
    5a2a:	f7fe fc25 	bl	4278 <cpu_sleep>
	return api->on(dev, sys);
    5a2e:	6863      	ldr	r3, [r4, #4]
    5a30:	2101      	movs	r1, #1
    5a32:	681b      	ldr	r3, [r3, #0]
    5a34:	4620      	mov	r0, r4
    5a36:	4798      	blx	r3
	while (clock_control_on(lf_clock, (void *)CLOCK_CONTROL_NRF5_K32SRC)) {
    5a38:	2800      	cmp	r0, #0
    5a3a:	d1f6      	bne.n	5a2a <radio_adv_enable+0x222>
    5a3c:	e77a      	b.n	5934 <radio_adv_enable+0x12c>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    5a3e:	2b02      	cmp	r3, #2
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    5a40:	bf0c      	ite	eq
    5a42:	f44f 7329 	moveq.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
    5a46:	f240 53fc 	movwne	r3, #1532	; 0x5fc
    5a4a:	4358      	muls	r0, r3
    5a4c:	e796      	b.n	597c <radio_adv_enable+0x174>
			cpu_sleep();
    5a4e:	f7fe fc13 	bl	4278 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    5a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5a54:	2b02      	cmp	r3, #2
    5a56:	d0fa      	beq.n	5a4e <radio_adv_enable+0x246>
    5a58:	e7c5      	b.n	59e6 <radio_adv_enable+0x1de>
    5a5a:	bf00      	nop
    5a5c:	f3af 8000 	nop.w
    5a60:	1afd498d 	.word	0x1afd498d
    5a64:	00000007 	.word	0x00000007
    5a68:	200002ac 	.word	0x200002ac
    5a6c:	20000430 	.word	0x20000430
    5a70:	3b9aca00 	.word	0x3b9aca00
    5a74:	00004281 	.word	0x00004281
    5a78:	00004acd 	.word	0x00004acd
    5a7c:	84e72a00 	.word	0x84e72a00
    5a80:	00008dc8 	.word	0x00008dc8

00005a84 <radio_adv_disable>:
{
    5a84:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
    5a86:	2103      	movs	r1, #3
    5a88:	2005      	movs	r0, #5
    5a8a:	f7fe fc6f 	bl	436c <role_disable>
	if (!status) {
    5a8e:	4606      	mov	r6, r0
    5a90:	b9d8      	cbnz	r0, 5aca <radio_adv_disable+0x46>
		_radio.advertiser.is_enabled = 0U;
    5a92:	4c0f      	ldr	r4, [pc, #60]	; (5ad0 <radio_adv_disable+0x4c>)
    5a94:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    5a98:	f360 1286 	bfi	r2, r0, #6, #1
    5a9c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    5aa0:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
    5aa4:	07d3      	lsls	r3, r2, #31
    5aa6:	d401      	bmi.n	5aac <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
    5aa8:	f7ff feaa 	bl	5800 <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
    5aac:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		if (conn) {
    5ab0:	b15d      	cbz	r5, 5aca <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
    5ab2:	2300      	movs	r3, #0
    5ab4:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			mem_release(hdr->link, &_radio.link_rx_free);
    5ab8:	4906      	ldr	r1, [pc, #24]	; (5ad4 <radio_adv_disable+0x50>)
    5aba:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    5abe:	f7fc fec2 	bl	2846 <mem_release>
			mem_release(conn, &_radio.conn_free);
    5ac2:	4905      	ldr	r1, [pc, #20]	; (5ad8 <radio_adv_disable+0x54>)
    5ac4:	4628      	mov	r0, r5
    5ac6:	f7fc febe 	bl	2846 <mem_release>
}
    5aca:	4630      	mov	r0, r6
    5acc:	bd70      	pop	{r4, r5, r6, pc}
    5ace:	bf00      	nop
    5ad0:	200002ac 	.word	0x200002ac
    5ad4:	200003ec 	.word	0x200003ec
    5ad8:	200003b8 	.word	0x200003b8

00005adc <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    5adc:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
    5ade:	4b07      	ldr	r3, [pc, #28]	; (5afc <rtc0_nrf5_isr+0x20>)
    5ae0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    5ae4:	b122      	cbz	r2, 5af0 <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    5ae6:	2000      	movs	r0, #0
    5ae8:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

		ticker_trigger(0);
    5aec:	f7fd fcf8 	bl	34e0 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    5af0:	2000      	movs	r0, #0

	DEBUG_TICKER_ISR(0);
}
    5af2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
    5af6:	f7fc bf91 	b.w	2a1c <mayfly_run>
    5afa:	bf00      	nop
    5afc:	4000b000 	.word	0x4000b000

00005b00 <swi5_nrf5_isr>:

static void swi5_nrf5_isr(void *arg)
{
	DEBUG_TICKER_JOB(1);

	mayfly_run(MAYFLY_CALL_ID_1);
    5b00:	2001      	movs	r0, #1
    5b02:	f7fc bf8b 	b.w	2a1c <mayfly_run>

00005b06 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    5b06:	4668      	mov	r0, sp
    5b08:	f020 0107 	bic.w	r1, r0, #7
    5b0c:	468d      	mov	sp, r1
    5b0e:	b501      	push	{r0, lr}
    5b10:	f7fc f864 	bl	1bdc <_arch_isr_direct_header>
	isr_radio();
    5b14:	f000 fc96 	bl	6444 <isr_radio>
	ISR_DIRECT_PM();
    5b18:	f7fc f852 	bl	1bc0 <_arch_isr_direct_pm>

#ifdef CONFIG_TRACING
	z_sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		_IntExit();
    5b1c:	f7fb fe5e 	bl	17dc <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    5b20:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    5b24:	4685      	mov	sp, r0
    5b26:	4770      	bx	lr

00005b28 <radio_active_callback>:
{
    5b28:	4770      	bx	lr
	...

00005b2c <radio_event_callback>:
	k_sem_give(sem_recv);
    5b2c:	4b01      	ldr	r3, [pc, #4]	; (5b34 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    5b2e:	6818      	ldr	r0, [r3, #0]
    5b30:	f002 bbe3 	b.w	82fa <_impl_k_sem_give>
    5b34:	20000a60 	.word	0x20000a60

00005b38 <ll_init>:

	DEBUG_TICKER_JOB(0);
}

int ll_init(struct k_sem *sem_rx)
{
    5b38:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
    5b3a:	4b38      	ldr	r3, [pc, #224]	; (5c1c <ll_init+0xe4>)
{
    5b3c:	b086      	sub	sp, #24
	sem_recv = sem_rx;
    5b3e:	6018      	str	r0, [r3, #0]
    5b40:	4837      	ldr	r0, [pc, #220]	; (5c20 <ll_init+0xe8>)
    5b42:	f001 ff17 	bl	7974 <_impl_device_get_binding>

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
	if (!clk_k32) {
    5b46:	b918      	cbnz	r0, 5b50 <ll_init+0x18>
		return -ENODEV;
    5b48:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI5_IRQn);

	return 0;
}
    5b4c:	b006      	add	sp, #24
    5b4e:	bd70      	pop	{r4, r5, r6, pc}
    5b50:	6843      	ldr	r3, [r0, #4]
    5b52:	2101      	movs	r1, #1
    5b54:	681b      	ldr	r3, [r3, #0]
    5b56:	4798      	blx	r3
    5b58:	4832      	ldr	r0, [pc, #200]	; (5c24 <ll_init+0xec>)
    5b5a:	f001 ff0b 	bl	7974 <_impl_device_get_binding>
	if (!entropy) {
    5b5e:	4604      	mov	r4, r0
    5b60:	2800      	cmp	r0, #0
    5b62:	d0f1      	beq.n	5b48 <ll_init+0x10>
	cntr_init();
    5b64:	f000 fb66 	bl	6234 <cntr_init>
	mayfly_init();
    5b68:	f7fc feb6 	bl	28d8 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    5b6c:	4b2e      	ldr	r3, [pc, #184]	; (5c28 <ll_init+0xf0>)
    5b6e:	2208      	movs	r2, #8
    5b70:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    5b72:	2202      	movs	r2, #2
    5b74:	761a      	strb	r2, [r3, #24]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    5b76:	2000      	movs	r0, #0
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    5b78:	4a2c      	ldr	r2, [pc, #176]	; (5c2c <ll_init+0xf4>)
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    5b7a:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    5b7c:	2503      	movs	r5, #3
    5b7e:	721d      	strb	r5, [r3, #8]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    5b80:	9205      	str	r2, [sp, #20]
    5b82:	4a2b      	ldr	r2, [pc, #172]	; (5c30 <ll_init+0xf8>)
    5b84:	9204      	str	r2, [sp, #16]
    5b86:	4a2b      	ldr	r2, [pc, #172]	; (5c34 <ll_init+0xfc>)
    5b88:	9203      	str	r2, [sp, #12]
    5b8a:	4a2b      	ldr	r2, [pc, #172]	; (5c38 <ll_init+0x100>)
    5b8c:	9202      	str	r2, [sp, #8]
    5b8e:	220d      	movs	r2, #13
    5b90:	9201      	str	r2, [sp, #4]
    5b92:	9300      	str	r3, [sp, #0]
    5b94:	4a29      	ldr	r2, [pc, #164]	; (5c3c <ll_init+0x104>)
    5b96:	2304      	movs	r3, #4
    5b98:	2107      	movs	r1, #7
    5b9a:	f7fd fc6f 	bl	347c <ticker_init>
	LL_ASSERT(!err);
    5b9e:	4606      	mov	r6, r0
    5ba0:	b128      	cbz	r0, 5bae <ll_init+0x76>
    5ba2:	4040      	eors	r0, r0
    5ba4:	f380 8811 	msr	BASEPRI, r0
    5ba8:	f04f 0004 	mov.w	r0, #4
    5bac:	df02      	svc	2
    5bae:	4824      	ldr	r0, [pc, #144]	; (5c40 <ll_init+0x108>)
    5bb0:	f001 fee0 	bl	7974 <_impl_device_get_binding>
	if (!clk_m16) {
    5bb4:	2800      	cmp	r0, #0
    5bb6:	d0c7      	beq.n	5b48 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
    5bb8:	f44f 7309 	mov.w	r3, #548	; 0x224
    5bbc:	9305      	str	r3, [sp, #20]
    5bbe:	4b21      	ldr	r3, [pc, #132]	; (5c44 <ll_init+0x10c>)
    5bc0:	9304      	str	r3, [sp, #16]
    5bc2:	9501      	str	r5, [sp, #4]
    5bc4:	231b      	movs	r3, #27
    5bc6:	2501      	movs	r5, #1
    5bc8:	9303      	str	r3, [sp, #12]
    5bca:	9302      	str	r3, [sp, #8]
    5bcc:	4622      	mov	r2, r4
    5bce:	9500      	str	r5, [sp, #0]
    5bd0:	4633      	mov	r3, r6
    5bd2:	2107      	movs	r1, #7
    5bd4:	f7ff fc48 	bl	5468 <radio_init>
	if (err) {
    5bd8:	4604      	mov	r4, r0
    5bda:	b9e0      	cbnz	r0, 5c16 <ll_init+0xde>
	ll_filter_reset(true);
    5bdc:	4628      	mov	r0, r5
    5bde:	f000 fb1d 	bl	621c <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    5be2:	4622      	mov	r2, r4
    5be4:	4621      	mov	r1, r4
    5be6:	4628      	mov	r0, r5
    5be8:	f7fb ffd0 	bl	1b8c <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    5bec:	4622      	mov	r2, r4
    5bee:	4621      	mov	r1, r4
    5bf0:	200b      	movs	r0, #11
    5bf2:	f7fb ffcb 	bl	1b8c <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI5_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi5_nrf5_isr,
    5bf6:	4622      	mov	r2, r4
    5bf8:	4621      	mov	r1, r4
    5bfa:	2019      	movs	r0, #25
    5bfc:	f7fb ffc6 	bl	1b8c <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    5c00:	4628      	mov	r0, r5
    5c02:	f7fb ff91 	bl	1b28 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    5c06:	200b      	movs	r0, #11
    5c08:	f7fb ff8e 	bl	1b28 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI5_IRQn);
    5c0c:	2019      	movs	r0, #25
    5c0e:	f7fb ff8b 	bl	1b28 <_arch_irq_enable>
	return 0;
    5c12:	4620      	mov	r0, r4
    5c14:	e79a      	b.n	5b4c <ll_init+0x14>
		return -ENOMEM;
    5c16:	f06f 000b 	mvn.w	r0, #11
    5c1a:	e797      	b.n	5b4c <ll_init+0x14>
    5c1c:	20000a60 	.word	0x20000a60
    5c20:	00008dc8 	.word	0x00008dc8
    5c24:	00008d9f 	.word	0x00008d9f
    5c28:	20000a40 	.word	0x20000a40
    5c2c:	00006b39 	.word	0x00006b39
    5c30:	00006ac1 	.word	0x00006ac1
    5c34:	00006aa1 	.word	0x00006aa1
    5c38:	200007d0 	.word	0x200007d0
    5c3c:	200006b8 	.word	0x200006b8
    5c40:	00008dd3 	.word	0x00008dd3
    5c44:	20000494 	.word	0x20000494

00005c48 <ll_adv_params_set>:
u8_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
		       u8_t adv_type, u8_t own_addr_type,
		       u8_t direct_addr_type, u8_t const *const direct_addr,
		       u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
		       u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    5c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c4c:	b085      	sub	sp, #20
    5c4e:	461d      	mov	r5, r3
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    5c50:	2306      	movs	r3, #6
    5c52:	f04f 0a01 	mov.w	sl, #1
    5c56:	2000      	movs	r0, #0
    5c58:	f88d 300a 	strb.w	r3, [sp, #10]
    5c5c:	f04f 0b02 	mov.w	fp, #2
    5c60:	2307      	movs	r3, #7
{
    5c62:	4688      	mov	r8, r1
    5c64:	4614      	mov	r4, r2
    5c66:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    5c68:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
    5c6c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    5c70:	f88d 0008 	strb.w	r0, [sp, #8]
    5c74:	f88d a009 	strb.w	sl, [sp, #9]
    5c78:	f88d b00b 	strb.w	fp, [sp, #11]
    5c7c:	f88d a00c 	strb.w	sl, [sp, #12]
    5c80:	f88d 300d 	strb.w	r3, [sp, #13]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (ll_adv_is_enabled(0)) {
    5c84:	f7ff fcc6 	bl	5614 <ll_adv_is_enabled>
    5c88:	2800      	cmp	r0, #0
    5c8a:	f040 8119 	bne.w	5ec0 <ll_adv_params_set+0x278>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */

	ll_adv.phy_p = BIT(0);
    5c8e:	498f      	ldr	r1, [pc, #572]	; (5ecc <ll_adv_params_set+0x284>)
    5c90:	780b      	ldrb	r3, [r1, #0]

	/* extended */
	if (adv_type > 0x04) {
    5c92:	2d04      	cmp	r5, #4
	ll_adv.phy_p = BIT(0);
    5c94:	f36a 1347 	bfi	r3, sl, #5, #3
    5c98:	700b      	strb	r3, [r1, #0]
	if (adv_type > 0x04) {
    5c9a:	d96e      	bls.n	5d7a <ll_adv_params_set+0x132>
		/* legacy */
		if (evt_prop & BIT(4)) {
    5c9c:	f018 0f10 	tst.w	r8, #16
    5ca0:	d016      	beq.n	5cd0 <ll_adv_params_set+0x88>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    5ca2:	2303      	movs	r3, #3
    5ca4:	f88d 3004 	strb.w	r3, [sp, #4]
    5ca8:	2304      	movs	r3, #4
    5caa:	f88d 3005 	strb.w	r3, [sp, #5]

			adv_type = leg_adv_type[evt_prop & 0x03];
    5cae:	aa04      	add	r2, sp, #16
    5cb0:	f008 0303 	and.w	r3, r8, #3
    5cb4:	4413      	add	r3, r2
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    5cb6:	f88d b006 	strb.w	fp, [sp, #6]
    5cba:	f88d 0007 	strb.w	r0, [sp, #7]

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
    5cbe:	f018 0f08 	tst.w	r8, #8
			adv_type = leg_adv_type[evt_prop & 0x03];
    5cc2:	f813 5c0c 	ldrb.w	r5, [r3, #-12]
			if (evt_prop & BIT(3)) {
    5cc6:	d058      	beq.n	5d7a <ll_adv_params_set+0x132>
				adv_type = 0x01;
    5cc8:	4655      	mov	r5, sl
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
    5cca:	2300      	movs	r3, #0
    5ccc:	604b      	str	r3, [r1, #4]
    5cce:	e00f      	b.n	5cf0 <ll_adv_params_set+0xa8>
			if (((evt_prop & 0x03) == 0x03) ||
    5cd0:	f008 0303 	and.w	r3, r8, #3
    5cd4:	2b03      	cmp	r3, #3
    5cd6:	f000 80f5 	beq.w	5ec4 <ll_adv_params_set+0x27c>
    5cda:	f008 030c 	and.w	r3, r8, #12
    5cde:	2b0c      	cmp	r3, #12
    5ce0:	f000 80f0 	beq.w	5ec4 <ll_adv_params_set+0x27c>
			ll_adv.phy_p = phy_p;
    5ce4:	780b      	ldrb	r3, [r1, #0]
    5ce6:	f369 1347 	bfi	r3, r9, #5, #3
    5cea:	700b      	strb	r3, [r1, #0]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
    5cec:	2505      	movs	r5, #5
		ll_adv.interval = interval;
    5cee:	604c      	str	r4, [r1, #4]
	}
	ll_adv.chan_map = chan_map;
    5cf0:	780b      	ldrb	r3, [r1, #0]
    5cf2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
    5cf6:	f362 0302 	bfi	r3, r2, #0, #3
	ll_adv.filter_policy = filter_policy;
    5cfa:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    5cfe:	f362 03c4 	bfi	r3, r2, #3, #2
    5d02:	700b      	strb	r3, [r1, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
    5d04:	f7ff fc7e 	bl	5604 <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    5d08:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
    5d0c:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    5d10:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    5d14:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
	pdu->type = pdu_adv_type[adv_type];
    5d18:	ab04      	add	r3, sp, #16
    5d1a:	441d      	add	r5, r3
    5d1c:	5c83      	ldrb	r3, [r0, r2]
    5d1e:	f815 1c08 	ldrb.w	r1, [r5, #-8]
    5d22:	f361 0303 	bfi	r3, r1, #0, #4
	pdu->rfu = 0;
    5d26:	f36f 1304 	bfc	r3, #4, #1
    5d2a:	5483      	strb	r3, [r0, r2]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    5d2c:	b2db      	uxtb	r3, r3
    5d2e:	f003 010f 	and.w	r1, r3, #15
    5d32:	2901      	cmp	r1, #1
		pdu->chan_sel = 1;
    5d34:	bf94      	ite	ls
    5d36:	f043 0320 	orrls.w	r3, r3, #32
		pdu->chan_sel = 0;
    5d3a:	f36f 1345 	bfchi	r3, #5, #1
    5d3e:	5483      	strb	r3, [r0, r2]
	pdu->tx_addr = own_addr_type & 0x1;
    5d40:	5c83      	ldrb	r3, [r0, r2]
    5d42:	f00a 0a01 	and.w	sl, sl, #1
    5d46:	f36a 1386 	bfi	r3, sl, #6, #1
	pdu->rx_addr = 0;
    5d4a:	f36f 13c7 	bfc	r3, #7, #1
    5d4e:	5483      	strb	r3, [r0, r2]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    5d50:	b2db      	uxtb	r3, r3
    5d52:	f003 010f 	and.w	r1, r3, #15
    5d56:	2901      	cmp	r1, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    5d58:	eb00 0402 	add.w	r4, r0, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    5d5c:	d110      	bne.n	5d80 <ll_adv_params_set+0x138>
		pdu->rx_addr = direct_addr_type;
    5d5e:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
    5d62:	f361 13c7 	bfi	r3, r1, #7, #1
    5d66:	5483      	strb	r3, [r0, r2]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    5d68:	9910      	ldr	r1, [sp, #64]	; 0x40
    5d6a:	2206      	movs	r2, #6
    5d6c:	f104 0008 	add.w	r0, r4, #8
    5d70:	f7fc f8c0 	bl	1ef4 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    5d74:	230c      	movs	r3, #12

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
    5d76:	7063      	strb	r3, [r4, #1]
    5d78:	e080      	b.n	5e7c <ll_adv_params_set+0x234>
	if (adv_type != 0x01) {
    5d7a:	2d01      	cmp	r5, #1
    5d7c:	d1b7      	bne.n	5cee <ll_adv_params_set+0xa6>
    5d7e:	e7a4      	b.n	5cca <ll_adv_params_set+0x82>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
    5d80:	2907      	cmp	r1, #7
    5d82:	f040 8098 	bne.w	5eb6 <ll_adv_params_set+0x26e>
		p->ext_hdr_len = 0;
    5d86:	78a2      	ldrb	r2, [r4, #2]
		*(u8_t *)&_h = *(u8_t *)h;
    5d88:	78e0      	ldrb	r0, [r4, #3]
		p->adv_mode = evt_prop & 0x03;
    5d8a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    5d8e:	f368 1287 	bfi	r2, r8, #6, #2
    5d92:	70a2      	strb	r2, [r4, #2]
		*(u8_t *)h = 0;
    5d94:	2200      	movs	r2, #0
    5d96:	70e2      	strb	r2, [r4, #3]
		if (_h.adv_addr) {
    5d98:	07c2      	lsls	r2, r0, #31
		if (!p->adv_mode &&
    5d9a:	78a2      	ldrb	r2, [r4, #2]
		ptr = (u8_t *)h + sizeof(*h);
    5d9c:	f104 0504 	add.w	r5, r4, #4
			_ptr += BDADDR_SIZE;
    5da0:	bf4c      	ite	mi
    5da2:	f104 010a 	addmi.w	r1, r4, #10
		_ptr = ptr;
    5da6:	4629      	movpl	r1, r5
		if (!p->adv_mode &&
    5da8:	f012 0fc0 	tst.w	r2, #192	; 0xc0
		p = (void *)&pdu->adv_ext_ind;
    5dac:	f104 0302 	add.w	r3, r4, #2
    5db0:	f000 0210 	and.w	r2, r0, #16
		if (!p->adv_mode &&
    5db4:	d10c      	bne.n	5dd0 <ll_adv_params_set+0x188>
    5db6:	b12a      	cbz	r2, 5dc4 <ll_adv_params_set+0x17c>
		    (!_h.aux_ptr ||
    5db8:	f018 0f20 	tst.w	r8, #32
    5dbc:	d108      	bne.n	5dd0 <ll_adv_params_set+0x188>
		     (!(evt_prop & BIT(5)) && (phy_p != BIT(2))))) {
    5dbe:	f1b9 0f04 	cmp.w	r9, #4
    5dc2:	d005      	beq.n	5dd0 <ll_adv_params_set+0x188>
			h->adv_addr = 1;
    5dc4:	78e5      	ldrb	r5, [r4, #3]
    5dc6:	f045 0501 	orr.w	r5, r5, #1
    5dca:	70e5      	strb	r5, [r4, #3]
			ptr += BDADDR_SIZE;
    5dcc:	f104 050a 	add.w	r5, r4, #10
		if (_h.adi) {
    5dd0:	0700      	lsls	r0, r0, #28
			h->adi = 1;
    5dd2:	bf41      	itttt	mi
    5dd4:	78e0      	ldrbmi	r0, [r4, #3]
    5dd6:	f040 0008 	orrmi.w	r0, r0, #8
    5dda:	70e0      	strbmi	r0, [r4, #3]
			ptr += sizeof(struct ext_adv_adi);
    5ddc:	3502      	addmi	r5, #2
		if (_h.aux_ptr) {
    5dde:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    5de2:	b122      	cbz	r2, 5dee <ll_adv_params_set+0x1a6>
			h->aux_ptr = 1;
    5de4:	78e2      	ldrb	r2, [r4, #3]
    5de6:	f042 0210 	orr.w	r2, r2, #16
    5dea:	70e2      	strb	r2, [r4, #3]
			ptr += sizeof(struct ext_adv_aux_ptr);
    5dec:	3503      	adds	r5, #3
		if (evt_prop & BIT(6) &&
    5dee:	f018 0f40 	tst.w	r8, #64	; 0x40
    5df2:	d008      	beq.n	5e06 <ll_adv_params_set+0x1be>
    5df4:	b110      	cbz	r0, 5dfc <ll_adv_params_set+0x1b4>
		    (!_h.aux_ptr || (phy_p != BIT(2)))) {
    5df6:	f1b9 0f04 	cmp.w	r9, #4
    5dfa:	d004      	beq.n	5e06 <ll_adv_params_set+0x1be>
			h->tx_pwr = 1;
    5dfc:	78e2      	ldrb	r2, [r4, #3]
    5dfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    5e02:	70e2      	strb	r2, [r4, #3]
			ptr++;
    5e04:	3501      	adds	r5, #1
		len = ptr - (u8_t *)p;
    5e06:	1aeb      	subs	r3, r5, r3
    5e08:	b2db      	uxtb	r3, r3
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
    5e0a:	2b02      	cmp	r3, #2
			p->ext_hdr_len = len -
    5e0c:	bf8a      	itet	hi
    5e0e:	78a2      	ldrbhi	r2, [r4, #2]
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    5e10:	2301      	movls	r3, #1
			p->ext_hdr_len = len -
    5e12:	f103 30ff 	addhi.w	r0, r3, #4294967295	; 0xffffffff
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    5e16:	7063      	strb	r3, [r4, #1]
		if (h->tx_pwr) {
    5e18:	78e3      	ldrb	r3, [r4, #3]
			p->ext_hdr_len = len -
    5e1a:	bf84      	itt	hi
    5e1c:	f360 0205 	bfihi	r2, r0, #0, #6
    5e20:	70a2      	strbhi	r2, [r4, #2]
		if (h->tx_pwr) {
    5e22:	065b      	lsls	r3, r3, #25
    5e24:	d509      	bpl.n	5e3a <ll_adv_params_set+0x1f2>
			if (tx_pwr) {
    5e26:	2e00      	cmp	r6, #0
    5e28:	d043      	beq.n	5eb2 <ll_adv_params_set+0x26a>
				if (*tx_pwr != 0x7F) {
    5e2a:	7833      	ldrb	r3, [r6, #0]
    5e2c:	2b7f      	cmp	r3, #127	; 0x7f
    5e2e:	d101      	bne.n	5e34 <ll_adv_params_set+0x1ec>
					*tx_pwr = _tx_pwr;
    5e30:	2300      	movs	r3, #0
    5e32:	7033      	strb	r3, [r6, #0]
			*ptr = _tx_pwr;
    5e34:	f805 3c01 	strb.w	r3, [r5, #-1]
			ptr--;
    5e38:	3d01      	subs	r5, #1
		if (h->aux_ptr) {
    5e3a:	78e2      	ldrb	r2, [r4, #3]
    5e3c:	06d0      	lsls	r0, r2, #27
    5e3e:	d50f      	bpl.n	5e60 <ll_adv_params_set+0x218>
	return __builtin_ffs(op);
    5e40:	fa97 f3a7 	rbit	r3, r7
    5e44:	2f00      	cmp	r7, #0
			aux->phy = find_lsb_set(phy_s);
    5e46:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    5e4a:	fab3 f383 	clz	r3, r3
    5e4e:	bf08      	it	eq
    5e50:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    5e54:	3301      	adds	r3, #1
    5e56:	f363 1047 	bfi	r0, r3, #5, #3
    5e5a:	f805 0c01 	strb.w	r0, [r5, #-1]
			ptr -= sizeof(struct ext_adv_aux_ptr);
    5e5e:	3d03      	subs	r5, #3
		if (h->adi) {
    5e60:	0713      	lsls	r3, r2, #28
    5e62:	d50b      	bpl.n	5e7c <ll_adv_params_set+0x234>
			memcpy(ptr, _ptr, sizeof(struct ext_adv_adi));
    5e64:	2202      	movs	r2, #2
    5e66:	1ea8      	subs	r0, r5, #2
    5e68:	f7fc f844 	bl	1ef4 <memcpy>
			adi->sid = sid;
    5e6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    5e70:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
    5e74:	f362 1307 	bfi	r3, r2, #4, #4
    5e78:	f805 3c01 	strb.w	r3, [r5, #-1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    5e7c:	f7ff fbc6 	bl	560c <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    5e80:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
    5e84:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    5e88:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    5e8c:	2404      	movs	r4, #4
    5e8e:	5c83      	ldrb	r3, [r0, r2]
    5e90:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
    5e94:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
    5e98:	f36a 1386 	bfi	r3, sl, #6, #1
	pdu->rx_addr = 0;
    5e9c:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    5ea0:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
    5ea2:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
    5ea4:	7848      	ldrb	r0, [r1, #1]
    5ea6:	b978      	cbnz	r0, 5ec8 <ll_adv_params_set+0x280>
		pdu->len = BDADDR_SIZE;
    5ea8:	2306      	movs	r3, #6
    5eaa:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
    5eac:	b005      	add	sp, #20
    5eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_tx_pwr = 0;
    5eb2:	4633      	mov	r3, r6
    5eb4:	e7be      	b.n	5e34 <ll_adv_params_set+0x1ec>
	} else if (pdu->len == 0) {
    5eb6:	7863      	ldrb	r3, [r4, #1]
    5eb8:	2b00      	cmp	r3, #0
    5eba:	d1df      	bne.n	5e7c <ll_adv_params_set+0x234>
		pdu->len = BDADDR_SIZE;
    5ebc:	2306      	movs	r3, #6
    5ebe:	e75a      	b.n	5d76 <ll_adv_params_set+0x12e>
		return BT_HCI_ERR_CMD_DISALLOWED;
    5ec0:	200c      	movs	r0, #12
    5ec2:	e7f3      	b.n	5eac <ll_adv_params_set+0x264>
				return 0x12; /* invalid HCI cmd param */
    5ec4:	2012      	movs	r0, #18
    5ec6:	e7f1      	b.n	5eac <ll_adv_params_set+0x264>
	return 0;
    5ec8:	2000      	movs	r0, #0
    5eca:	e7ef      	b.n	5eac <ll_adv_params_set+0x264>
    5ecc:	20000a64 	.word	0x20000a64

00005ed0 <ll_adv_data_set>:
#if defined(CONFIG_BT_CTLR_ADV_EXT)
u8_t ll_adv_data_set(u16_t handle, u8_t len, u8_t const *const data)
#else /* !CONFIG_BT_CTLR_ADV_EXT */
u8_t ll_adv_data_set(u8_t len, u8_t const *const data)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
    5ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ed4:	460e      	mov	r6, r1
    5ed6:	4617      	mov	r7, r2
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
    5ed8:	f7ff fb94 	bl	5604 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    5edc:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
    5ee0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
    5ee4:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
	radio_adv_data = radio_adv_data_get();
    5ee8:	4604      	mov	r4, r0
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    5eea:	f810 e002 	ldrb.w	lr, [r0, r2]
    5eee:	f00e 030f 	and.w	r3, lr, #15
    5ef2:	2b01      	cmp	r3, #1
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    5ef4:	eb00 0102 	add.w	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    5ef8:	d040      	beq.n	5f7c <ll_adv_data_set+0xac>
    5efa:	2b07      	cmp	r3, #7
    5efc:	d03e      	beq.n	5f7c <ll_adv_data_set+0xac>
		 */
		return 0;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
    5efe:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
    5f02:	42ab      	cmp	r3, r5
    5f04:	d104      	bne.n	5f10 <ll_adv_data_set+0x40>
		last = radio_adv_data->last + 1;
    5f06:	3501      	adds	r5, #1
    5f08:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0U;
    5f0a:	2d02      	cmp	r5, #2
    5f0c:	bf08      	it	eq
    5f0e:	2500      	moveq	r5, #0
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    5f10:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    5f14:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
    5f18:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
    5f1c:	5ce0      	ldrb	r0, [r4, r3]
    5f1e:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0U;
    5f22:	f36f 1004 	bfc	r0, #4, #1
    5f26:	54e0      	strb	r0, [r4, r3]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
    5f28:	5ca0      	ldrb	r0, [r4, r2]
    5f2a:	f814 e003 	ldrb.w	lr, [r4, r3]
    5f2e:	f3c0 1040 	ubfx	r0, r0, #5, #1
    5f32:	f360 1e45 	bfi	lr, r0, #5, #1
    5f36:	f804 e003 	strb.w	lr, [r4, r3]
	} else {
		pdu->chan_sel = 0U;
	}

	pdu->tx_addr = prev->tx_addr;
    5f3a:	5ca0      	ldrb	r0, [r4, r2]
    5f3c:	fa5f fe8e 	uxtb.w	lr, lr
    5f40:	f3c0 1080 	ubfx	r0, r0, #6, #1
    5f44:	f360 1e86 	bfi	lr, r0, #6, #1
    5f48:	f804 e003 	strb.w	lr, [r4, r3]
	pdu->rx_addr = prev->rx_addr;
    5f4c:	5ca2      	ldrb	r2, [r4, r2]
    5f4e:	fa5f f08e 	uxtb.w	r0, lr
    5f52:	09d2      	lsrs	r2, r2, #7
    5f54:	f362 10c7 	bfi	r0, r2, #7, #1
    5f58:	54e0      	strb	r0, [r4, r3]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    5f5a:	2206      	movs	r2, #6
    5f5c:	3102      	adds	r1, #2
    5f5e:	f108 0002 	add.w	r0, r8, #2
    5f62:	f7fb ffc7 	bl	1ef4 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
    5f66:	4632      	mov	r2, r6
    5f68:	4639      	mov	r1, r7
    5f6a:	f108 0008 	add.w	r0, r8, #8
	pdu->len = BDADDR_SIZE + len;
    5f6e:	3606      	adds	r6, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
    5f70:	f7fb ffc0 	bl	1ef4 <memcpy>
	pdu->len = BDADDR_SIZE + len;
    5f74:	f888 6001 	strb.w	r6, [r8, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
    5f78:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f

	return 0;
}
    5f7c:	2000      	movs	r0, #0
    5f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005f82 <ll_adv_scan_rsp_set>:
#if defined(CONFIG_BT_CTLR_ADV_EXT)
u8_t ll_adv_scan_rsp_set(u16_t handle, u8_t len, u8_t const *const data)
#else /* !CONFIG_BT_CTLR_ADV_EXT */
u8_t ll_adv_scan_rsp_set(u8_t len, u8_t const *const data)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
    5f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f86:	4617      	mov	r7, r2
    5f88:	460e      	mov	r6, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    5f8a:	f7ff fb3f 	bl	560c <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
    5f8e:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
    5f92:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
    5f96:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
    5f98:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
    5f9a:	d137      	bne.n	600c <ll_adv_scan_rsp_set+0x8a>
		last = radio_scan_data->last + 1;
    5f9c:	1c5d      	adds	r5, r3, #1
    5f9e:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
    5fa0:	2d02      	cmp	r5, #2
			last = 0;
    5fa2:	bf08      	it	eq
    5fa4:	2500      	moveq	r5, #0
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
    5fa6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    5faa:	ebc3 02c2 	rsb	r2, r3, r2, lsl #3
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    5fae:	b22b      	sxth	r3, r5
    5fb0:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    5fb4:	ebc3 03c0 	rsb	r3, r3, r0, lsl #3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    5fb8:	f04f 0e04 	mov.w	lr, #4
    5fbc:	5ce0      	ldrb	r0, [r4, r3]
    5fbe:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
    5fc2:	f000 00ef 	and.w	r0, r0, #239	; 0xef
    5fc6:	f36f 1045 	bfc	r0, #5, #1
    5fca:	54e0      	strb	r0, [r4, r3]
	pdu->tx_addr = prev->tx_addr;
    5fcc:	5ca0      	ldrb	r0, [r4, r2]
	prev = (struct pdu_adv *)
    5fce:	18a1      	adds	r1, r4, r2
	pdu->tx_addr = prev->tx_addr;
    5fd0:	5ce2      	ldrb	r2, [r4, r3]
    5fd2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    5fd6:	f360 1286 	bfi	r2, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    5fda:	eb04 0803 	add.w	r8, r4, r3
	pdu->rx_addr = 0;
    5fde:	f36f 12c7 	bfc	r2, #7, #1
    5fe2:	54e2      	strb	r2, [r4, r3]
	pdu->len = BDADDR_SIZE + len;
    5fe4:	1db3      	adds	r3, r6, #6
    5fe6:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    5fea:	2206      	movs	r2, #6
    5fec:	3102      	adds	r1, #2
    5fee:	f108 0002 	add.w	r0, r8, #2
    5ff2:	f7fb ff7f 	bl	1ef4 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    5ff6:	4632      	mov	r2, r6
    5ff8:	4639      	mov	r1, r7
    5ffa:	f108 0008 	add.w	r0, r8, #8
    5ffe:	f7fb ff79 	bl	1ef4 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
    6002:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f

	return 0;
}
    6006:	2000      	movs	r0, #0
    6008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    600c:	461d      	mov	r5, r3
    600e:	e7ca      	b.n	5fa6 <ll_adv_scan_rsp_set+0x24>

00006010 <ll_adv_enable>:
#if defined(CONFIG_BT_CTLR_ADV_EXT)
u8_t ll_adv_enable(u16_t handle, u8_t enable)
#else /* !CONFIG_BT_CTLR_ADV_EXT */
u8_t ll_adv_enable(u8_t enable)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
    6010:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
    6014:	b921      	cbnz	r1, 6020 <ll_adv_enable+0x10>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
    6016:	b003      	add	sp, #12
    6018:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return radio_adv_disable();
    601c:	f7ff bd32 	b.w	5a84 <radio_adv_disable>
	} else if (ll_adv_is_enabled(0)) {
    6020:	2000      	movs	r0, #0
    6022:	f7ff faf7 	bl	5614 <ll_adv_is_enabled>
    6026:	4607      	mov	r7, r0
    6028:	2800      	cmp	r0, #0
    602a:	d14f      	bne.n	60cc <ll_adv_enable+0xbc>
	radio_adv_data = radio_adv_data_get();
    602c:	f7ff faea 	bl	5604 <radio_adv_data_get>
    6030:	4680      	mov	r8, r0
	radio_scan_data = radio_scan_data_get();
    6032:	f7ff faeb 	bl	560c <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    6036:	f898 404f 	ldrb.w	r4, [r8, #79]	; 0x4f
    603a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    603e:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
	radio_scan_data = radio_scan_data_get();
    6042:	4606      	mov	r6, r0
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    6044:	f818 0004 	ldrb.w	r0, [r8, r4]
    6048:	f000 030f 	and.w	r3, r0, #15
    604c:	2b07      	cmp	r3, #7
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    604e:	eb08 0904 	add.w	r9, r8, r4
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    6052:	d11e      	bne.n	6092 <ll_adv_enable+0x82>
		if (h->adv_addr) {
    6054:	f899 3003 	ldrb.w	r3, [r9, #3]
    6058:	07db      	lsls	r3, r3, #31
    605a:	d50a      	bpl.n	6072 <ll_adv_enable+0x62>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
    605c:	4639      	mov	r1, r7
    605e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6062:	f7fd fbc1 	bl	37e8 <ll_addr_get>
    6066:	2206      	movs	r2, #6
    6068:	4601      	mov	r1, r0
    606a:	f109 0004 	add.w	r0, r9, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
    606e:	f7fb ff41 	bl	1ef4 <memcpy>
				  ll_adv.chan_map, ll_adv.filter_policy,
    6072:	4b17      	ldr	r3, [pc, #92]	; (60d0 <ll_adv_enable+0xc0>)
    6074:	7818      	ldrb	r0, [r3, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    6076:	8899      	ldrh	r1, [r3, #4]
    6078:	23ff      	movs	r3, #255	; 0xff
    607a:	9300      	str	r3, [sp, #0]
    607c:	f000 0207 	and.w	r2, r0, #7
    6080:	f3c0 03c1 	ubfx	r3, r0, #3, #2
    6084:	0940      	lsrs	r0, r0, #5
    6086:	f7ff fbbf 	bl	5808 <radio_adv_enable>
	return status;
    608a:	b2c0      	uxtb	r0, r0
}
    608c:	b003      	add	sp, #12
    608e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    6092:	4639      	mov	r1, r7
    6094:	f3c0 1080 	ubfx	r0, r0, #6, #1
			[radio_scan_data->last][0];
    6098:	f896 504f 	ldrb.w	r5, [r6, #79]	; 0x4f
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    609c:	f7fd fba4 	bl	37e8 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
    60a0:	2206      	movs	r2, #6
    60a2:	4601      	mov	r1, r0
    60a4:	f109 0002 	add.w	r0, r9, #2
    60a8:	f7fb ff24 	bl	1ef4 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    60ac:	f818 0004 	ldrb.w	r0, [r8, r4]
    60b0:	4639      	mov	r1, r7
    60b2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    60b6:	f7fd fb97 	bl	37e8 <ll_addr_get>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    60ba:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    60be:	ebc5 05c3 	rsb	r5, r5, r3, lsl #3
    60c2:	4435      	add	r5, r6
			memcpy(&pdu_scan->scan_rsp.addr[0],
    60c4:	4601      	mov	r1, r0
    60c6:	2206      	movs	r2, #6
    60c8:	1ca8      	adds	r0, r5, #2
    60ca:	e7d0      	b.n	606e <ll_adv_enable+0x5e>
		return 0;
    60cc:	2000      	movs	r0, #0
    60ce:	e7dd      	b.n	608c <ll_adv_enable+0x7c>
    60d0:	20000a64 	.word	0x20000a64

000060d4 <ctrl_filter_get>:
	if (whitelist) {
		return &wl_filter;
	}
	return &rl_filter;
#else
	LL_ASSERT(whitelist);
    60d4:	b928      	cbnz	r0, 60e2 <ctrl_filter_get+0xe>
    60d6:	4040      	eors	r0, r0
    60d8:	f380 8811 	msr	BASEPRI, r0
    60dc:	f04f 0004 	mov.w	r0, #4
    60e0:	df02      	svc	2
	return &wl_filter;
#endif
}
    60e2:	4801      	ldr	r0, [pc, #4]	; (60e8 <ctrl_filter_get+0x14>)
    60e4:	4770      	bx	lr
    60e6:	bf00      	nop
    60e8:	20000a6d 	.word	0x20000a6d

000060ec <ll_wl_size_get>:

u8_t ll_wl_size_get(void)
{
	return WL_SIZE;
}
    60ec:	2008      	movs	r0, #8
    60ee:	4770      	bx	lr

000060f0 <ll_wl_clear>:

u8_t ll_wl_clear(void)
{
    60f0:	b508      	push	{r3, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    60f2:	f7ff fa97 	bl	5624 <radio_adv_filter_pol_get>
    60f6:	b108      	cbz	r0, 60fc <ll_wl_clear+0xc>
		return BT_HCI_ERR_CMD_DISALLOWED;
    60f8:	200c      	movs	r0, #12
    60fa:	bd08      	pop	{r3, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    60fc:	f7ff fa9e 	bl	563c <radio_scan_filter_pol_get>
    6100:	f010 0001 	ands.w	r0, r0, #1
    6104:	d1f8      	bne.n	60f8 <ll_wl_clear+0x8>
	filter->enable_bitmask = 0U;
    6106:	4b03      	ldr	r3, [pc, #12]	; (6114 <ll_wl_clear+0x24>)
    6108:	7018      	strb	r0, [r3, #0]
	filter->addr_type_bitmask = 0U;
    610a:	7058      	strb	r0, [r3, #1]
#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */
	wl_anon = 0U;
    610c:	4b02      	ldr	r3, [pc, #8]	; (6118 <ll_wl_clear+0x28>)
    610e:	7018      	strb	r0, [r3, #0]

	return 0;
}
    6110:	bd08      	pop	{r3, pc}
    6112:	bf00      	nop
    6114:	20000a6d 	.word	0x20000a6d
    6118:	20000a6c 	.word	0x20000a6c

0000611c <ll_wl_add>:

u8_t ll_wl_add(bt_addr_le_t *addr)
{
    611c:	b570      	push	{r4, r5, r6, lr}
    611e:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    6120:	f7ff fa80 	bl	5624 <radio_adv_filter_pol_get>
    6124:	4605      	mov	r5, r0
    6126:	b108      	cbz	r0, 612c <ll_wl_add+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    6128:	200c      	movs	r0, #12
    612a:	bd70      	pop	{r4, r5, r6, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    612c:	f7ff fa86 	bl	563c <radio_scan_filter_pol_get>
    6130:	f010 0001 	ands.w	r0, r0, #1
    6134:	d1f8      	bne.n	6128 <ll_wl_add+0xc>
	}

	if (addr->type == ADDR_TYPE_ANON) {
    6136:	7823      	ldrb	r3, [r4, #0]
    6138:	2bff      	cmp	r3, #255	; 0xff
    613a:	d103      	bne.n	6144 <ll_wl_add+0x28>
		wl_anon = 1U;
    613c:	4b11      	ldr	r3, [pc, #68]	; (6184 <ll_wl_add+0x68>)
    613e:	2201      	movs	r2, #1
    6140:	701a      	strb	r2, [r3, #0]
		return 0;
    6142:	bd70      	pop	{r4, r5, r6, pc}
	if (filter->enable_bitmask == 0xFF) {
    6144:	4910      	ldr	r1, [pc, #64]	; (6188 <ll_wl_add+0x6c>)
    6146:	780a      	ldrb	r2, [r1, #0]
    6148:	2aff      	cmp	r2, #255	; 0xff
    614a:	d019      	beq.n	6180 <ll_wl_add+0x64>
    614c:	4628      	mov	r0, r5
	     (filter->enable_bitmask & BIT(index));
    614e:	fa22 f600 	lsr.w	r6, r2, r0
	for (index = 0;
    6152:	07f6      	lsls	r6, r6, #31
    6154:	d412      	bmi.n	617c <ll_wl_add+0x60>
	filter->enable_bitmask |= BIT(index);
    6156:	2601      	movs	r6, #1
    6158:	4086      	lsls	r6, r0
    615a:	4332      	orrs	r2, r6
    615c:	700a      	strb	r2, [r1, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    615e:	f003 0301 	and.w	r3, r3, #1
    6162:	784a      	ldrb	r2, [r1, #1]
    6164:	4083      	lsls	r3, r0
    6166:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    6168:	2206      	movs	r2, #6
    616a:	fb02 1000 	mla	r0, r2, r0, r1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    616e:	704b      	strb	r3, [r1, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    6170:	3002      	adds	r0, #2
    6172:	1c61      	adds	r1, r4, #1
    6174:	f7fb febe 	bl	1ef4 <memcpy>
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_add(addr);
#else
	return filter_add(&wl_filter, addr->type, addr->a.val);
    6178:	b2e8      	uxtb	r0, r5
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    617a:	bd70      	pop	{r4, r5, r6, pc}
	     index++) {
    617c:	3001      	adds	r0, #1
    617e:	e7e6      	b.n	614e <ll_wl_add+0x32>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    6180:	2507      	movs	r5, #7
    6182:	e7f9      	b.n	6178 <ll_wl_add+0x5c>
    6184:	20000a6c 	.word	0x20000a6c
    6188:	20000a6d 	.word	0x20000a6d

0000618c <ll_wl_remove>:

u8_t ll_wl_remove(bt_addr_le_t *addr)
{
    618c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6190:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    6192:	f7ff fa47 	bl	5624 <radio_adv_filter_pol_get>
    6196:	4606      	mov	r6, r0
    6198:	b110      	cbz	r0, 61a0 <ll_wl_remove+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
    619a:	200c      	movs	r0, #12
    619c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    61a0:	f7ff fa4c 	bl	563c <radio_scan_filter_pol_get>
    61a4:	f010 0001 	ands.w	r0, r0, #1
    61a8:	d1f7      	bne.n	619a <ll_wl_remove+0xe>
	}

	if (addr->type == ADDR_TYPE_ANON) {
    61aa:	f897 8000 	ldrb.w	r8, [r7]
    61ae:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    61b2:	d103      	bne.n	61bc <ll_wl_remove+0x30>
		wl_anon = 0U;
    61b4:	4b17      	ldr	r3, [pc, #92]	; (6214 <ll_wl_remove+0x88>)
    61b6:	7018      	strb	r0, [r3, #0]
		return 0;
    61b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!filter->enable_bitmask) {
    61bc:	4c16      	ldr	r4, [pc, #88]	; (6218 <ll_wl_remove+0x8c>)
    61be:	7823      	ldrb	r3, [r4, #0]
    61c0:	b133      	cbz	r3, 61d0 <ll_wl_remove+0x44>
    61c2:	2508      	movs	r5, #8
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_remove(addr);
#else
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    61c4:	3701      	adds	r7, #1
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    61c6:	f04f 0906 	mov.w	r9, #6
	while (index--) {
    61ca:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    61ce:	d203      	bcs.n	61d8 <ll_wl_remove+0x4c>
		return BT_HCI_ERR_INVALID_PARAM;
    61d0:	2612      	movs	r6, #18
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    61d2:	b2f0      	uxtb	r0, r6
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    61d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ((filter->enable_bitmask & BIT(index)) &&
    61d8:	7823      	ldrb	r3, [r4, #0]
    61da:	40eb      	lsrs	r3, r5
    61dc:	07da      	lsls	r2, r3, #31
    61de:	d5f4      	bpl.n	61ca <ll_wl_remove+0x3e>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
    61e0:	7863      	ldrb	r3, [r4, #1]
    61e2:	412b      	asrs	r3, r5
    61e4:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
    61e8:	07db      	lsls	r3, r3, #31
    61ea:	d4ee      	bmi.n	61ca <ll_wl_remove+0x3e>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    61ec:	fb09 4005 	mla	r0, r9, r5, r4
    61f0:	2206      	movs	r2, #6
    61f2:	4639      	mov	r1, r7
    61f4:	3002      	adds	r0, #2
    61f6:	f7fb fe68 	bl	1eca <memcmp>
		     (addr_type & 0x01)) &&
    61fa:	2800      	cmp	r0, #0
    61fc:	d1e5      	bne.n	61ca <ll_wl_remove+0x3e>
			filter->enable_bitmask &= ~BIT(index);
    61fe:	2301      	movs	r3, #1
    6200:	40ab      	lsls	r3, r5
    6202:	7822      	ldrb	r2, [r4, #0]
    6204:	43db      	mvns	r3, r3
    6206:	b2db      	uxtb	r3, r3
    6208:	401a      	ands	r2, r3
    620a:	7022      	strb	r2, [r4, #0]
			filter->addr_type_bitmask &= ~BIT(index);
    620c:	7862      	ldrb	r2, [r4, #1]
    620e:	4013      	ands	r3, r2
    6210:	7063      	strb	r3, [r4, #1]
    6212:	e7de      	b.n	61d2 <ll_wl_remove+0x46>
    6214:	20000a6c 	.word	0x20000a6c
    6218:	20000a6d 	.word	0x20000a6d

0000621c <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0U;
    621c:	4a03      	ldr	r2, [pc, #12]	; (622c <ll_filter_reset+0x10>)
    621e:	2300      	movs	r3, #0
    6220:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0U;
    6222:	4a03      	ldr	r2, [pc, #12]	; (6230 <ll_filter_reset+0x14>)
    6224:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0U;
    6226:	7053      	strb	r3, [r2, #1]
    6228:	4770      	bx	lr
    622a:	bf00      	nop
    622c:	20000a6c 	.word	0x20000a6c
    6230:	20000a6d 	.word	0x20000a6d

00006234 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    6234:	4b05      	ldr	r3, [pc, #20]	; (624c <cntr_init+0x18>)
    6236:	2200      	movs	r2, #0
    6238:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->EVTENSET = mask;
    623c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6240:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
    6244:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    6248:	4770      	bx	lr
    624a:	bf00      	nop
    624c:	4000b000 	.word	0x4000b000

00006250 <cntr_start>:
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    6250:	4a04      	ldr	r2, [pc, #16]	; (6264 <cntr_start+0x14>)
    6252:	7813      	ldrb	r3, [r2, #0]
    6254:	1c59      	adds	r1, r3, #1
    6256:	7011      	strb	r1, [r2, #0]
    6258:	2001      	movs	r0, #1
    625a:	b913      	cbnz	r3, 6262 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    625c:	4a02      	ldr	r2, [pc, #8]	; (6268 <cntr_start+0x18>)
    625e:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
    6260:	4618      	mov	r0, r3
}
    6262:	4770      	bx	lr
    6264:	20000a9f 	.word	0x20000a9f
    6268:	4000b000 	.word	0x4000b000

0000626c <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    626c:	4b09      	ldr	r3, [pc, #36]	; (6294 <cntr_stop+0x28>)
    626e:	7818      	ldrb	r0, [r3, #0]
    6270:	b928      	cbnz	r0, 627e <cntr_stop+0x12>
    6272:	4040      	eors	r0, r0
    6274:	f380 8811 	msr	BASEPRI, r0
    6278:	f04f 0004 	mov.w	r0, #4
    627c:	df02      	svc	2

	if (--_refcount) {
    627e:	3801      	subs	r0, #1
    6280:	b2c0      	uxtb	r0, r0
    6282:	7018      	strb	r0, [r3, #0]
    6284:	2301      	movs	r3, #1
    6286:	b910      	cbnz	r0, 628e <cntr_stop+0x22>
    6288:	4a03      	ldr	r2, [pc, #12]	; (6298 <cntr_stop+0x2c>)
    628a:	6013      	str	r3, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
    628c:	4770      	bx	lr
		return 1;
    628e:	4618      	mov	r0, r3
}
    6290:	4770      	bx	lr
    6292:	bf00      	nop
    6294:	20000a9f 	.word	0x20000a9f
    6298:	4000b004 	.word	0x4000b004

0000629c <cntr_cnt_get>:
     return p_reg->COUNTER;
    629c:	4b01      	ldr	r3, [pc, #4]	; (62a4 <cntr_cnt_get+0x8>)
    629e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

u32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
    62a2:	4770      	bx	lr
    62a4:	4000b000 	.word	0x4000b000

000062a8 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
    62a8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    62ac:	4b01      	ldr	r3, [pc, #4]	; (62b4 <cntr_cmp_set+0xc>)
    62ae:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    62b2:	4770      	bx	lr
    62b4:	4000b000 	.word	0x4000b000

000062b8 <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    62b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    62ba:	4b12      	ldr	r3, [pc, #72]	; (6304 <do_ecb+0x4c>)

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    62bc:	4d12      	ldr	r5, [pc, #72]	; (6308 <do_ecb+0x50>)
    62be:	2101      	movs	r1, #1
		NRF_ECB->EVENTS_ENDECB = 0;
    62c0:	2600      	movs	r6, #0
    62c2:	46ae      	mov	lr, r5
    62c4:	461a      	mov	r2, r3
    62c6:	6029      	str	r1, [r5, #0]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    62c8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    62cc:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    62d0:	f8c3 6104 	str.w	r6, [r3, #260]	; 0x104
    62d4:	6019      	str	r1, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    62d6:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
    62da:	b934      	cbnz	r4, 62ea <do_ecb+0x32>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    62dc:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    62e0:	b91c      	cbnz	r4, 62ea <do_ecb+0x32>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    62e2:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    62e6:	2c00      	cmp	r4, #0
    62e8:	d1f5      	bne.n	62d6 <do_ecb+0x1e>
    62ea:	f8ce 1000 	str.w	r1, [lr]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    62ee:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
    62f2:	2c00      	cmp	r4, #0
    62f4:	d1e7      	bne.n	62c6 <do_ecb+0xe>
    62f6:	f8d2 7504 	ldr.w	r7, [r2, #1284]	; 0x504
    62fa:	2f00      	cmp	r7, #0
    62fc:	d0e3      	beq.n	62c6 <do_ecb+0xe>

	NRF_ECB->ECBDATAPTR = 0;
    62fe:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
    6302:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6304:	4000e000 	.word	0x4000e000
    6308:	4000e004 	.word	0x4000e004

0000630c <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    630c:	b570      	push	{r4, r5, r6, lr}
    630e:	b08c      	sub	sp, #48	; 0x30
    6310:	460e      	mov	r6, r1
    6312:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    6314:	4601      	mov	r1, r0
    6316:	2210      	movs	r2, #16
    6318:	4668      	mov	r0, sp
{
    631a:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    631c:	f7fc faab 	bl	2876 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    6320:	2210      	movs	r2, #16
    6322:	eb0d 0002 	add.w	r0, sp, r2
    6326:	4631      	mov	r1, r6
    6328:	f7fc faa5 	bl	2876 <mem_rcopy>

	do_ecb(&ecb);
    632c:	4668      	mov	r0, sp
    632e:	f7ff ffc3 	bl	62b8 <do_ecb>

	if (cipher_text_le) {
    6332:	b125      	cbz	r5, 633e <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    6334:	2210      	movs	r2, #16
    6336:	a908      	add	r1, sp, #32
    6338:	4628      	mov	r0, r5
    633a:	f7fc fa9c 	bl	2876 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    633e:	b124      	cbz	r4, 634a <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    6340:	2210      	movs	r2, #16
    6342:	a908      	add	r1, sp, #32
    6344:	4620      	mov	r0, r4
    6346:	f7fb fdd5 	bl	1ef4 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    634a:	b00c      	add	sp, #48	; 0x30
    634c:	bd70      	pop	{r4, r5, r6, pc}
	...

00006350 <hal_radio_enable_on_tick_ppi_config_and_enable>:
static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	/* No need to configure anything for the pre-programmed channels.
	 * Just enable and disable them accordingly.
	 */
	nrf_ppi_channels_disable(
    6350:	2800      	cmp	r0, #0
    NRF_PPI->CHENSET = mask;
}

__STATIC_INLINE void nrf_ppi_channels_disable(uint32_t mask)
{
    NRF_PPI->CHENCLR = mask;
    6352:	4b08      	ldr	r3, [pc, #32]	; (6374 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    6354:	bf14      	ite	ne
    6356:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
    635a:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
    635e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		trx ? BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI));
	nrf_ppi_channels_enable(
    6362:	bf14      	ite	ne
    6364:	f44f 1280 	movne.w	r2, #1048576	; 0x100000
    6368:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    NRF_PPI->CHENSET = mask;
    636c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    6370:	4770      	bx	lr
    6372:	bf00      	nop
    6374:	4001f000 	.word	0x4001f000

00006378 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
    6378:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    637a:	4e2d      	ldr	r6, [pc, #180]	; (6430 <sw_switch.isra.9+0xb8>)

__STATIC_INLINE void nrf_ppi_channel_endpoint_setup(nrf_ppi_channel_t channel,
                                                    uint32_t          eep,
                                                    uint32_t          tep)
{
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    637c:	4f2d      	ldr	r7, [pc, #180]	; (6434 <sw_switch.isra.9+0xbc>)
    637e:	7835      	ldrb	r5, [r6, #0]
    6380:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 6440 <sw_switch.isra.9+0xc8>
    6384:	f8c7 e560 	str.w	lr, [r7, #1376]	; 0x560
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	nrf_ppi_channel_endpoint_setup(HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI,
    6388:	b22b      	sxth	r3, r5
    638a:	00dc      	lsls	r4, r3, #3
    638c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    6390:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    6394:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    6398:	f105 040b 	add.w	r4, r5, #11
    639c:	b2e4      	uxtb	r4, r4
    639e:	00e4      	lsls	r4, r4, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle));

	nrf_ppi_event_endpoint_setup(ppi,
    63a0:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
    63a4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    63a8:	3fc0      	subs	r7, #192	; 0xc0
    63aa:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    63ae:	eb07 0783 	add.w	r7, r7, r3, lsl #2
}

__STATIC_INLINE void nrf_ppi_event_endpoint_setup(nrf_ppi_channel_t channel,
                                                  uint32_t          eep)
{
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    63b2:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc));

	if (dir) {
    63b6:	2800      	cmp	r0, #0
    63b8:	d034      	beq.n	6424 <sw_switch.isra.9+0xac>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
    63ba:	f24a 075a 	movw	r7, #41050	; 0xa05a
    63be:	f649 4040 	movw	r0, #40000	; 0x9c40
    63c2:	2a02      	cmp	r2, #2
    63c4:	bf0c      	ite	eq
    63c6:	4602      	moveq	r2, r0
    63c8:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
    63ca:	f242 47b8 	movw	r7, #9400	; 0x24b8
    63ce:	f241 504a 	movw	r0, #5450	; 0x154a
    63d2:	2902      	cmp	r1, #2
    63d4:	bf18      	it	ne
    63d6:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
    63d8:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
    63dc:	4401      	add	r1, r0
    63de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    63e2:	fbb1 f1f2 	udiv	r1, r1, r2
}

__STATIC_INLINE void nrf_ppi_task_endpoint_setup(nrf_ppi_channel_t channel,
                                                 uint32_t          tep)
{
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    63e6:	4a14      	ldr	r2, [pc, #80]	; (6438 <sw_switch.isra.9+0xc0>)
    63e8:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    63ec:	009b      	lsls	r3, r3, #2
    63ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    63f2:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
    63f6:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
    63fa:	428a      	cmp	r2, r1
		nrf_timer_cc_write(SW_SWITCH_TIMER, cc,
				   SW_SWITCH_TIMER->CC[cc] - delay);
    63fc:	bf8b      	itete	hi
    63fe:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540

__STATIC_INLINE void nrf_timer_cc_write(NRF_TIMER_Type * p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
    6402:	2201      	movls	r2, #1
		nrf_timer_cc_write(SW_SWITCH_TIMER, cc,
    6404:	1a51      	subhi	r1, r2, r1
    6406:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
    640a:	bf88      	it	hi
    640c:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
    NRF_PPI->CHENSET = mask;
    6410:	4b08      	ldr	r3, [pc, #32]	; (6434 <sw_switch.isra.9+0xbc>)
    6412:	f44f 6290 	mov.w	r2, #1152	; 0x480
    6416:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
    641a:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
    641c:	f003 0301 	and.w	r3, r3, #1
    6420:	7033      	strb	r3, [r6, #0]
    6422:	bdf0      	pop	{r4, r5, r6, r7, pc}
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    6424:	4a05      	ldr	r2, [pc, #20]	; (643c <sw_switch.isra.9+0xc4>)
    6426:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
    642a:	212d      	movs	r1, #45	; 0x2d
    642c:	e7de      	b.n	63ec <sw_switch.isra.9+0x74>
    642e:	bf00      	nop
    6430:	20000cb8 	.word	0x20000cb8
    6434:	4001f000 	.word	0x4001f000
    6438:	40001000 	.word	0x40001000
    643c:	40001004 	.word	0x40001004
    6440:	4000110c 	.word	0x4000110c

00006444 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
    6444:	4b04      	ldr	r3, [pc, #16]	; (6458 <isr_radio+0x14>)
    6446:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
    644a:	b123      	cbz	r3, 6456 <isr_radio+0x12>
		isr_cb(isr_cb_param);
    644c:	4b03      	ldr	r3, [pc, #12]	; (645c <isr_radio+0x18>)
    644e:	4a04      	ldr	r2, [pc, #16]	; (6460 <isr_radio+0x1c>)
    6450:	681b      	ldr	r3, [r3, #0]
    6452:	6810      	ldr	r0, [r2, #0]
    6454:	4718      	bx	r3
    6456:	4770      	bx	lr
    6458:	40001000 	.word	0x40001000
    645c:	20000cb0 	.word	0x20000cb0
    6460:	20000cb4 	.word	0x20000cb4

00006464 <radio_isr_set>:
{
    6464:	b538      	push	{r3, r4, r5, lr}
    6466:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
    6468:	2001      	movs	r0, #1
{
    646a:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
    646c:	f7fb fb6c 	bl	1b48 <_arch_irq_disable>
	isr_cb_param = param;
    6470:	4b08      	ldr	r3, [pc, #32]	; (6494 <radio_isr_set+0x30>)
    6472:	601d      	str	r5, [r3, #0]
	isr_cb = cb;
    6474:	4b08      	ldr	r3, [pc, #32]	; (6498 <radio_isr_set+0x34>)
    6476:	601c      	str	r4, [r3, #0]
    return NRF_RADIO->SHORTS;
}

__STATIC_INLINE void nrf_radio_int_enable(uint32_t radio_int_mask)
{
    NRF_RADIO->INTENSET = radio_int_mask;
    6478:	4b08      	ldr	r3, [pc, #32]	; (649c <radio_isr_set+0x38>)
    647a:	2210      	movs	r2, #16
    647c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6480:	4b07      	ldr	r3, [pc, #28]	; (64a0 <radio_isr_set+0x3c>)
    6482:	2202      	movs	r2, #2
    6484:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    6488:	2001      	movs	r0, #1
}
    648a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
    648e:	f7fb bb4b 	b.w	1b28 <_arch_irq_enable>
    6492:	bf00      	nop
    6494:	20000cb4 	.word	0x20000cb4
    6498:	20000cb0 	.word	0x20000cb0
    649c:	40001000 	.word	0x40001000
    64a0:	e000e100 	.word	0xe000e100

000064a4 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    64a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    64a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    64ac:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    64ae:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    64b2:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    64b6:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    64ba:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    64be:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    64c2:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    64c6:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    64ca:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    64ce:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    64d2:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    64d6:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    64da:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    64de:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    64e2:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    64e6:	4770      	bx	lr

000064e8 <radio_reset>:
{
    64e8:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    64ea:	2001      	movs	r0, #1
    64ec:	f7fb fb2c 	bl	1b48 <_arch_irq_disable>
}
#endif

__STATIC_INLINE void nrf_radio_power_set(bool radio_power)
{
    NRF_RADIO->POWER = (uint32_t) radio_power;
    64f0:	4b08      	ldr	r3, [pc, #32]	; (6514 <radio_reset+0x2c>)
    64f2:	2200      	movs	r2, #0
    64f4:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
    64f8:	2201      	movs	r2, #1
    64fa:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    64fe:	4a06      	ldr	r2, [pc, #24]	; (6518 <radio_reset+0x30>)
    6500:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
    6502:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    6506:	f023 0301 	bic.w	r3, r3, #1
    650a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    650e:	6013      	str	r3, [r2, #0]
    6510:	bd08      	pop	{r3, pc}
    6512:	bf00      	nop
    6514:	40001000 	.word	0x40001000
    6518:	40001774 	.word	0x40001774

0000651c <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    651c:	4b06      	ldr	r3, [pc, #24]	; (6538 <radio_phy_set+0x1c>)
	switch (phy) {
    651e:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    6520:	bf0c      	ite	eq
    6522:	2204      	moveq	r2, #4
    6524:	2203      	movne	r2, #3
    6526:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
    652a:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
    652e:	f042 0201 	orr.w	r2, r2, #1
    6532:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    6536:	4770      	bx	lr
    6538:	40001000 	.word	0x40001000

0000653c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
    653c:	4b01      	ldr	r3, [pc, #4]	; (6544 <radio_tx_power_set+0x8>)
    653e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    6542:	4770      	bx	lr
    6544:	40001000 	.word	0x40001000

00006548 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
    6548:	4b01      	ldr	r3, [pc, #4]	; (6550 <radio_freq_chan_set+0x8>)
    654a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    654e:	4770      	bx	lr
    6550:	40001000 	.word	0x40001000

00006554 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
    6554:	4b07      	ldr	r3, [pc, #28]	; (6574 <radio_whiten_iv_set+0x20>)
    6556:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    655a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    655e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    6562:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    6566:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    656a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    656e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    6572:	4770      	bx	lr
    6574:	40001000 	.word	0x40001000

00006578 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
    6578:	4a0a      	ldr	r2, [pc, #40]	; (65a4 <radio_aa_set+0x2c>)
    657a:	2300      	movs	r3, #0
    657c:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
    6580:	2301      	movs	r3, #1
    6582:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
    6586:	78c3      	ldrb	r3, [r0, #3]
    6588:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    658c:	7843      	ldrb	r3, [r0, #1]
    658e:	7881      	ldrb	r1, [r0, #2]
    6590:	041b      	lsls	r3, r3, #16
    6592:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    6596:	7801      	ldrb	r1, [r0, #0]
    6598:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    659c:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    65a0:	4770      	bx	lr
    65a2:	bf00      	nop
    65a4:	40001000 	.word	0x40001000

000065a8 <radio_pkt_configure>:
	switch (phy) {
    65a8:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    65ac:	2b02      	cmp	r3, #2
{
    65ae:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    65b0:	bf0c      	ite	eq
    65b2:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
    65b6:	2400      	movne	r4, #0
	if (dc) {
    65b8:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    65ba:	f1c0 0308 	rsb	r3, r0, #8
    65be:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    65c2:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
    65c6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    65ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    65ce:	4a0b      	ldr	r2, [pc, #44]	; (65fc <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
    65d0:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    65d4:	bf48      	it	mi
    65d6:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
    65da:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    65dc:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    65e0:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    65e4:	4b06      	ldr	r3, [pc, #24]	; (6600 <radio_pkt_configure+0x58>)
    65e6:	4003      	ands	r3, r0
    65e8:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    65ec:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    65f0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    65f4:	4319      	orrs	r1, r3
    65f6:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    65fa:	bd10      	pop	{r4, pc}
    65fc:	40001000 	.word	0x40001000
    6600:	fef80000 	.word	0xfef80000

00006604 <radio_pkt_rx_set>:
    6604:	4b01      	ldr	r3, [pc, #4]	; (660c <radio_pkt_rx_set+0x8>)
    6606:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    660a:	4770      	bx	lr
    660c:	40001000 	.word	0x40001000

00006610 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    6610:	4b01      	ldr	r3, [pc, #4]	; (6618 <radio_pkt_tx_set+0x8>)
    6612:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    6616:	4770      	bx	lr
    6618:	40001000 	.word	0x40001000

0000661c <radio_tx_chain_delay_get>:
}
    661c:	2001      	movs	r0, #1
    661e:	4770      	bx	lr

00006620 <radio_rx_chain_delay_get>:
	switch (phy) {
    6620:	2802      	cmp	r0, #2
}
    6622:	bf0c      	ite	eq
    6624:	2006      	moveq	r0, #6
    6626:	200a      	movne	r0, #10
    6628:	4770      	bx	lr
	...

0000662c <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)NRF_RADIO + radio_task)) = 0x1UL;
    662c:	4b01      	ldr	r3, [pc, #4]	; (6634 <radio_rx_enable+0x8>)
    662e:	2201      	movs	r2, #1
    6630:	601a      	str	r2, [r3, #0]
    6632:	4770      	bx	lr
    6634:	40001004 	.word	0x40001004

00006638 <radio_tx_enable>:
    6638:	4b01      	ldr	r3, [pc, #4]	; (6640 <radio_tx_enable+0x8>)
    663a:	2201      	movs	r2, #1
    663c:	601a      	str	r2, [r3, #0]
    663e:	4770      	bx	lr
    6640:	40001000 	.word	0x40001000

00006644 <radio_disable>:
    NRF_PPI->CHENCLR = mask;
    6644:	4a07      	ldr	r2, [pc, #28]	; (6664 <radio_disable+0x20>)
    6646:	f44f 6390 	mov.w	r3, #1152	; 0x480
    664a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    NRF_PPI->TASKS_CHG[(uint32_t) group].EN = NRF_PPI_TASK_SET;
}

__STATIC_INLINE void nrf_ppi_group_disable(nrf_ppi_channel_group_t group)
{
    NRF_PPI->TASKS_CHG[(uint32_t) group].DIS = NRF_PPI_TASK_SET;
    664e:	2301      	movs	r3, #1
    6650:	6053      	str	r3, [r2, #4]
    6652:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
    6654:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
    6658:	2100      	movs	r1, #0
    665a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    665e:	6113      	str	r3, [r2, #16]
    6660:	4770      	bx	lr
    6662:	bf00      	nop
    6664:	4001f000 	.word	0x4001f000

00006668 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
    6668:	4b04      	ldr	r3, [pc, #16]	; (667c <radio_status_reset+0x14>)
    666a:	2200      	movs	r2, #0
    666c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
    6670:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    6674:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    6678:	4770      	bx	lr
    667a:	bf00      	nop
    667c:	40001000 	.word	0x40001000

00006680 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
    6680:	4b03      	ldr	r3, [pc, #12]	; (6690 <radio_is_ready+0x10>)
    6682:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    6686:	3000      	adds	r0, #0
    6688:	bf18      	it	ne
    668a:	2001      	movne	r0, #1
    668c:	4770      	bx	lr
    668e:	bf00      	nop
    6690:	40001000 	.word	0x40001000

00006694 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
    6694:	4b03      	ldr	r3, [pc, #12]	; (66a4 <radio_is_done+0x10>)
    6696:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    669a:	3000      	adds	r0, #0
    669c:	bf18      	it	ne
    669e:	2001      	movne	r0, #1
    66a0:	4770      	bx	lr
    66a2:	bf00      	nop
    66a4:	40001000 	.word	0x40001000

000066a8 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
    66a8:	4b03      	ldr	r3, [pc, #12]	; (66b8 <radio_is_idle+0x10>)
    66aa:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    66ae:	fab0 f080 	clz	r0, r0
    66b2:	0940      	lsrs	r0, r0, #5
    66b4:	4770      	bx	lr
    66b6:	bf00      	nop
    66b8:	40001000 	.word	0x40001000

000066bc <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
    66bc:	4b04      	ldr	r3, [pc, #16]	; (66d0 <radio_crc_configure+0x14>)
    66be:	f240 1203 	movw	r2, #259	; 0x103
    66c2:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
    66c6:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    66ca:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    66ce:	4770      	bx	lr
    66d0:	40001000 	.word	0x40001000

000066d4 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
    66d4:	4b03      	ldr	r3, [pc, #12]	; (66e4 <radio_crc_is_valid+0x10>)
    66d6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    66da:	3000      	adds	r0, #0
    66dc:	bf18      	it	ne
    66de:	2001      	movne	r0, #1
    66e0:	4770      	bx	lr
    66e2:	bf00      	nop
    66e4:	40001000 	.word	0x40001000

000066e8 <radio_pkt_scratch_get>:
}
    66e8:	4800      	ldr	r0, [pc, #0]	; (66ec <radio_pkt_scratch_get+0x4>)
    66ea:	4770      	bx	lr
    66ec:	20000bac 	.word	0x20000bac

000066f0 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    66f0:	4b04      	ldr	r3, [pc, #16]	; (6704 <radio_switch_complete_and_rx+0x14>)
    66f2:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
    66f4:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    66f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
    66fa:	4602      	mov	r2, r0
    66fc:	4608      	mov	r0, r1
    66fe:	f7ff be3b 	b.w	6378 <sw_switch.isra.9>
    6702:	bf00      	nop
    6704:	40001000 	.word	0x40001000

00006708 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    6708:	4b03      	ldr	r3, [pc, #12]	; (6718 <radio_switch_complete_and_tx+0x10>)
    670a:	2103      	movs	r1, #3
    670c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
    6710:	4601      	mov	r1, r0
    6712:	2001      	movs	r0, #1
    6714:	f7ff be30 	b.w	6378 <sw_switch.isra.9>
    6718:	40001000 	.word	0x40001000

0000671c <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    671c:	4b05      	ldr	r3, [pc, #20]	; (6734 <radio_switch_complete_and_disable+0x18>)
    671e:	2203      	movs	r2, #3
    6720:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    NRF_PPI->CHENCLR = mask;
    6724:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    6728:	f44f 6290 	mov.w	r2, #1152	; 0x480
    672c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    6730:	4770      	bx	lr
    6732:	bf00      	nop
    6734:	40001000 	.word	0x40001000

00006738 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    6738:	4a03      	ldr	r2, [pc, #12]	; (6748 <radio_rssi_measure+0x10>)
    673a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    673e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    6742:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    6746:	4770      	bx	lr
    6748:	40001000 	.word	0x40001000

0000674c <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    674c:	4b01      	ldr	r3, [pc, #4]	; (6754 <radio_rssi_get+0x8>)
    674e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    6752:	4770      	bx	lr
    6754:	40001000 	.word	0x40001000

00006758 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    6758:	4b02      	ldr	r3, [pc, #8]	; (6764 <radio_rssi_status_reset+0xc>)
    675a:	2200      	movs	r2, #0
    675c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    6760:	4770      	bx	lr
    6762:	bf00      	nop
    6764:	40001000 	.word	0x40001000

00006768 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    6768:	4b03      	ldr	r3, [pc, #12]	; (6778 <radio_rssi_is_ready+0x10>)
    676a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    676e:	3000      	adds	r0, #0
    6770:	bf18      	it	ne
    6772:	2001      	movne	r0, #1
    6774:	4770      	bx	lr
    6776:	bf00      	nop
    6778:	40001000 	.word	0x40001000

0000677c <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    677c:	b530      	push	{r4, r5, lr}
    677e:	2400      	movs	r4, #0
    6780:	00a3      	lsls	r3, r4, #2
    6782:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    678a:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    678c:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    6790:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    6792:	8895      	ldrh	r5, [r2, #4]
    6794:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
    6798:	2c08      	cmp	r4, #8
		bdaddr += 6;
    679a:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
    679e:	d1ef      	bne.n	6780 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    67a0:	4b02      	ldr	r3, [pc, #8]	; (67ac <radio_filter_configure+0x30>)
    67a2:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    67a6:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    67aa:	bd30      	pop	{r4, r5, pc}
    67ac:	40001000 	.word	0x40001000

000067b0 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    67b0:	4a03      	ldr	r2, [pc, #12]	; (67c0 <radio_filter_disable+0x10>)
    67b2:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    67b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    67ba:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    67be:	4770      	bx	lr
    67c0:	40001000 	.word	0x40001000

000067c4 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    67c4:	4b02      	ldr	r3, [pc, #8]	; (67d0 <radio_filter_status_reset+0xc>)
    67c6:	2200      	movs	r2, #0
    67c8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    67cc:	4770      	bx	lr
    67ce:	bf00      	nop
    67d0:	40001000 	.word	0x40001000

000067d4 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    67d4:	4b03      	ldr	r3, [pc, #12]	; (67e4 <radio_filter_has_match+0x10>)
    67d6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    67da:	3000      	adds	r0, #0
    67dc:	bf18      	it	ne
    67de:	2001      	movne	r0, #1
    67e0:	4770      	bx	lr
    67e2:	bf00      	nop
    67e4:	40001000 	.word	0x40001000

000067e8 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    67e8:	4b01      	ldr	r3, [pc, #4]	; (67f0 <radio_filter_match_get+0x8>)
    67ea:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    67ee:	4770      	bx	lr
    67f0:	40001000 	.word	0x40001000

000067f4 <radio_tmr_status_reset>:
{
    p_reg->EVTENSET = mask;
}
__STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    67f4:	4b05      	ldr	r3, [pc, #20]	; (680c <radio_tmr_status_reset+0x18>)
    67f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    67fa:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    67fe:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    6802:	4a03      	ldr	r2, [pc, #12]	; (6810 <radio_tmr_status_reset+0x1c>)
    6804:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    6808:	4770      	bx	lr
    680a:	bf00      	nop
    680c:	4000b000 	.word	0x4000b000
    6810:	0e700060 	.word	0x0e700060

00006814 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_write(SW_SWITCH_TIMER,
    6814:	4b03      	ldr	r3, [pc, #12]	; (6824 <radio_tmr_tifs_set+0x10>)
    6816:	4a04      	ldr	r2, [pc, #16]	; (6828 <radio_tmr_tifs_set+0x14>)
    6818:	781b      	ldrb	r3, [r3, #0]
    681a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    681e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    6822:	4770      	bx	lr
    6824:	20000cb8 	.word	0x20000cb8
    6828:	40009000 	.word	0x40009000

0000682c <radio_tmr_start>:
			   SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    682e:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    6832:	4c33      	ldr	r4, [pc, #204]	; (6900 <radio_tmr_start+0xd4>)
    6834:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    6838:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
    683a:	bf88      	it	hi
    683c:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6840:	4b30      	ldr	r3, [pc, #192]	; (6904 <radio_tmr_start+0xd8>)
	}
	remainder /= 1000000UL;
    6842:	4c31      	ldr	r4, [pc, #196]	; (6908 <radio_tmr_start+0xdc>)
		remainder += 30517578UL;
    6844:	bf84      	itt	hi
    6846:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
    684a:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
    684e:	f04f 0501 	mov.w	r5, #1
	remainder /= 1000000UL;
    6852:	fbb2 f4f4 	udiv	r4, r2, r4

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
    6856:	f04f 0600 	mov.w	r6, #0
	EVENT_TIMER->PRESCALER = 4;
    685a:	f04f 0704 	mov.w	r7, #4
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    685e:	f04f 0202 	mov.w	r2, #2
    6862:	601d      	str	r5, [r3, #0]
	EVENT_TIMER->MODE = 0;
    6864:	f8c3 64f8 	str.w	r6, [r3, #1272]	; 0x4f8
	EVENT_TIMER->PRESCALER = 4;
    6868:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    686c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
    p_reg->CC[ch] = cc_val;
    6870:	4a26      	ldr	r2, [pc, #152]	; (690c <radio_tmr_start+0xe0>)
    p_reg->CC[cc_channel] = cc_value;
    6872:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
		ticks_start--;
    6876:	bf88      	it	hi
    6878:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
    687c:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
    p_reg->EVTENSET = mask;
    6880:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    6884:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    6888:	4921      	ldr	r1, [pc, #132]	; (6910 <radio_tmr_start+0xe4>)
    688a:	f502 72a4 	add.w	r2, r2, #328	; 0x148
	EVENT_TIMER->MODE = 0;
    688e:	3b0c      	subs	r3, #12
    6890:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    6894:	f8c1 353c 	str.w	r3, [r1, #1340]	; 0x53c
    NRF_PPI->CHENSET = mask;
    6898:	2320      	movs	r3, #32
    689a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
    689e:	f7ff fd57 	bl	6350 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
    68a2:	4b1c      	ldr	r3, [pc, #112]	; (6914 <radio_tmr_start+0xe8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    68a4:	4a1c      	ldr	r2, [pc, #112]	; (6918 <radio_tmr_start+0xec>)
    68a6:	6015      	str	r5, [r2, #0]
    68a8:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
    68ac:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
    68b0:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    68b4:	601d      	str	r5, [r3, #0]
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    68b6:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
    68ba:	3b74      	subs	r3, #116	; 0x74
    68bc:	f8c1 3548 	str.w	r3, [r1, #1352]	; 0x548
    68c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    68c4:	3334      	adds	r3, #52	; 0x34
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    68c6:	f8c1 254c 	str.w	r2, [r1, #1356]	; 0x54c
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    68ca:	f8c1 3550 	str.w	r3, [r1, #1360]	; 0x550
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    68ce:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    68d2:	33c4      	adds	r3, #196	; 0xc4
    68d4:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
    68d8:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
    68dc:	3bc0      	subs	r3, #192	; 0xc0
    68de:	f8c1 3558 	str.w	r3, [r1, #1368]	; 0x558
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
    68e2:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    68e6:	33c8      	adds	r3, #200	; 0xc8
    68e8:	f8c1 355c 	str.w	r3, [r1, #1372]	; 0x55c
			SW_SWITCH_TIMER_EVTS_COMP(1)),
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1));

#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
    68ec:	f44f 6310 	mov.w	r3, #2304	; 0x900
    68f0:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
    68f4:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    68f8:	f8c1 3804 	str.w	r3, [r1, #2052]	; 0x804
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_1_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_1_INCLUDE;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
    68fc:	4620      	mov	r0, r4
    68fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6900:	7ff0bdbf 	.word	0x7ff0bdbf
    6904:	4000800c 	.word	0x4000800c
    6908:	000f4240 	.word	0x000f4240
    690c:	4000b000 	.word	0x4000b000
    6910:	4001f000 	.word	0x4001f000
    6914:	40009000 	.word	0x40009000
    6918:	4000900c 	.word	0x4000900c

0000691c <radio_tmr_stop>:
    691c:	4a04      	ldr	r2, [pc, #16]	; (6930 <radio_tmr_stop+0x14>)
    691e:	2301      	movs	r3, #1
    6920:	6013      	str	r3, [r2, #0]
    6922:	60d3      	str	r3, [r2, #12]
    6924:	320c      	adds	r2, #12
    6926:	f602 72f4 	addw	r2, r2, #4084	; 0xff4
    692a:	6013      	str	r3, [r2, #0]
    692c:	60d3      	str	r3, [r2, #12]
    692e:	4770      	bx	lr
    6930:	40008004 	.word	0x40008004

00006934 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
    6934:	4b04      	ldr	r3, [pc, #16]	; (6948 <radio_tmr_hcto_configure+0x14>)
    6936:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    NRF_PPI->CHENSET = mask;
    693a:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    693e:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
    6942:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    6946:	4770      	bx	lr
    6948:	40008000 	.word	0x40008000

0000694c <radio_tmr_end_capture>:
    694c:	4b02      	ldr	r3, [pc, #8]	; (6958 <radio_tmr_end_capture+0xc>)
    694e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    6952:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    6956:	4770      	bx	lr
    6958:	4001f000 	.word	0x4001f000

0000695c <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
    695c:	4b01      	ldr	r3, [pc, #4]	; (6964 <radio_tmr_tifs_base_get+0x8>)
    695e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
    6962:	4770      	bx	lr
    6964:	40008000 	.word	0x40008000

00006968 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    6968:	4b13      	ldr	r3, [pc, #76]	; (69b8 <radio_ccm_rx_pkt_set+0x50>)
{
    696a:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    696c:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    696e:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    6970:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    6974:	4e11      	ldr	r6, [pc, #68]	; (69bc <radio_ccm_rx_pkt_set+0x54>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    6976:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    697a:	4d11      	ldr	r5, [pc, #68]	; (69c0 <radio_ccm_rx_pkt_set+0x58>)
    697c:	2902      	cmp	r1, #2
    697e:	bf0c      	ite	eq
    6980:	4629      	moveq	r1, r5
    6982:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
    6984:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    6988:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    698c:	480d      	ldr	r0, [pc, #52]	; (69c4 <radio_ccm_rx_pkt_set+0x5c>)
    698e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    6992:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    6996:	4a0c      	ldr	r2, [pc, #48]	; (69c8 <radio_ccm_rx_pkt_set+0x60>)
    6998:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    699c:	4a0b      	ldr	r2, [pc, #44]	; (69cc <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->SHORTS = 0;
    699e:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    69a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    69a6:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    69aa:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
    69ae:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                          nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    69b2:	2201      	movs	r2, #1
    69b4:	601a      	str	r2, [r3, #0]
	nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
    69b6:	bd70      	pop	{r4, r5, r6, pc}
    69b8:	4000f000 	.word	0x4000f000
    69bc:	01000001 	.word	0x01000001
    69c0:	01010001 	.word	0x01010001
    69c4:	20000bac 	.word	0x20000bac
    69c8:	20000aa0 	.word	0x20000aa0
    69cc:	4001f000 	.word	0x4001f000

000069d0 <radio_ar_match_get>:
	nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    69d0:	4b01      	ldr	r3, [pc, #4]	; (69d8 <radio_ar_match_get+0x8>)
    69d2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    69d6:	4770      	bx	lr
    69d8:	4000f000 	.word	0x4000f000

000069dc <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
    69dc:	4a04      	ldr	r2, [pc, #16]	; (69f0 <radio_ar_status_reset+0x14>)
    69de:	2300      	movs	r3, #0
    69e0:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    69e4:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
    69e8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    69ec:	4770      	bx	lr
    69ee:	bf00      	nop
    69f0:	40001000 	.word	0x40001000

000069f4 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    69f4:	4b08      	ldr	r3, [pc, #32]	; (6a18 <radio_ar_has_match+0x24>)
    69f6:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    69fa:	b160      	cbz	r0, 6a16 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
    69fc:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    6a00:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    6a04:	b138      	cbz	r0, 6a16 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
    6a06:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    6a0a:	b120      	cbz	r0, 6a16 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    6a0c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    6a10:	fab0 f080 	clz	r0, r0
    6a14:	0940      	lsrs	r0, r0, #5
}
    6a16:	4770      	bx	lr
    6a18:	40001000 	.word	0x40001000

00006a1c <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    6a1c:	2901      	cmp	r1, #1
    6a1e:	d005      	beq.n	6a2c <mayfly_enable_cb+0x10>
    6a20:	4040      	eors	r0, r0
    6a22:	f380 8811 	msr	BASEPRI, r0
    6a26:	f04f 0004 	mov.w	r0, #4
    6a2a:	df02      	svc	2

	if (enable) {
		irq_enable(SWI5_IRQn);
    6a2c:	2019      	movs	r0, #25
	if (enable) {
    6a2e:	b10a      	cbz	r2, 6a34 <mayfly_enable_cb+0x18>
		irq_enable(SWI5_IRQn);
    6a30:	f7fb b87a 	b.w	1b28 <_arch_irq_enable>
	} else {
		irq_disable(SWI5_IRQn);
    6a34:	f7fb b888 	b.w	1b48 <_arch_irq_disable>

00006a38 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
    6a38:	b139      	cbz	r1, 6a4a <mayfly_is_enabled+0x12>
    6a3a:	2901      	cmp	r1, #1
    6a3c:	d008      	beq.n	6a50 <mayfly_is_enabled+0x18>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI5_IRQn);

	default:
		LL_ASSERT(0);
    6a3e:	4040      	eors	r0, r0
    6a40:	f380 8811 	msr	BASEPRI, r0
    6a44:	f04f 0004 	mov.w	r0, #4
    6a48:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
    6a4a:	200b      	movs	r0, #11
		return irq_is_enabled(SWI5_IRQn);
    6a4c:	f7fb b890 	b.w	1b70 <_arch_irq_is_enabled>
    6a50:	2019      	movs	r0, #25
    6a52:	e7fb      	b.n	6a4c <mayfly_is_enabled+0x14>

00006a54 <mayfly_prio_is_equal>:
#if defined(CONFIG_BT_LL_SW)
#if (CONFIG_BT_CTLR_WORKER_PRIO == CONFIG_BT_CTLR_JOB_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
    6a54:	4288      	cmp	r0, r1
    6a56:	d00a      	beq.n	6a6e <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
    6a58:	b918      	cbnz	r0, 6a62 <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
    6a5a:	1e4b      	subs	r3, r1, #1
    6a5c:	4258      	negs	r0, r3
    6a5e:	4158      	adcs	r0, r3
    6a60:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
    6a62:	2801      	cmp	r0, #1
    6a64:	d105      	bne.n	6a72 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
    6a66:	fab1 f081 	clz	r0, r1
    6a6a:	0940      	lsrs	r0, r0, #5
    6a6c:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
    6a6e:	2001      	movs	r0, #1
    6a70:	4770      	bx	lr
    6a72:	2000      	movs	r0, #0
#endif
#endif
	       0;
}
    6a74:	4770      	bx	lr
	...

00006a78 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
    6a78:	4b08      	ldr	r3, [pc, #32]	; (6a9c <mayfly_pend+0x24>)
	(void)caller_id;

	switch (callee_id) {
    6a7a:	b139      	cbz	r1, 6a8c <mayfly_pend+0x14>
    6a7c:	2901      	cmp	r1, #1
    6a7e:	d00a      	beq.n	6a96 <mayfly_pend+0x1e>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI5_IRQn);
		break;

	default:
		LL_ASSERT(0);
    6a80:	4040      	eors	r0, r0
    6a82:	f380 8811 	msr	BASEPRI, r0
    6a86:	f04f 0004 	mov.w	r0, #4
    6a8a:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6a90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6a94:	4770      	bx	lr
    6a96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    6a9a:	e7f9      	b.n	6a90 <mayfly_pend+0x18>
    6a9c:	e000e100 	.word	0xe000e100

00006aa0 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
    6aa0:	2803      	cmp	r0, #3
    6aa2:	d905      	bls.n	6ab0 <hal_ticker_instance0_caller_id_get+0x10>

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    6aa4:	4040      	eors	r0, r0
    6aa6:	f380 8811 	msr	BASEPRI, r0
    6aaa:	f04f 0004 	mov.w	r0, #4
    6aae:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
    6ab0:	4b02      	ldr	r3, [pc, #8]	; (6abc <hal_ticker_instance0_caller_id_get+0x1c>)
    6ab2:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    6ab4:	2800      	cmp	r0, #0
    6ab6:	d0f5      	beq.n	6aa4 <hal_ticker_instance0_caller_id_get+0x4>

	return caller_id;
}
    6ab8:	4770      	bx	lr
    6aba:	bf00      	nop
    6abc:	0000929a 	.word	0x0000929a

00006ac0 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    6ac0:	3802      	subs	r0, #2
{
    6ac2:	b410      	push	{r4}
    6ac4:	461c      	mov	r4, r3
	switch (caller_id) {
    6ac6:	2803      	cmp	r0, #3
    6ac8:	d816      	bhi.n	6af8 <hal_ticker_instance0_sched+0x38>
    6aca:	e8df f000 	tbb	[pc, r0]
    6ace:	0b02      	.short	0x0b02
    6ad0:	2411      	.short	0x2411
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
    6ad2:	2903      	cmp	r1, #3
    6ad4:	d110      	bne.n	6af8 <hal_ticker_instance0_sched+0x38>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
    6ad6:	4b13      	ldr	r3, [pc, #76]	; (6b24 <hal_ticker_instance0_sched+0x64>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    6ad8:	2100      	movs	r1, #0
			m.param = instance;
    6ada:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    6adc:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
    6ade:	bc10      	pop	{r4}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    6ae0:	f7fb bf4c 	b.w	297c <mayfly_enqueue>
		switch (callee_id) {
    6ae4:	2904      	cmp	r1, #4
    6ae6:	d107      	bne.n	6af8 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
    6ae8:	4b0f      	ldr	r3, [pc, #60]	; (6b28 <hal_ticker_instance0_sched+0x68>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    6aea:	2101      	movs	r1, #1
			m.param = instance;
    6aec:	609c      	str	r4, [r3, #8]
    6aee:	e7f5      	b.n	6adc <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
    6af0:	2903      	cmp	r1, #3
    6af2:	d007      	beq.n	6b04 <hal_ticker_instance0_sched+0x44>
    6af4:	2904      	cmp	r1, #4
    6af6:	d00a      	beq.n	6b0e <hal_ticker_instance0_sched+0x4e>
		LL_ASSERT(0);
    6af8:	4040      	eors	r0, r0
    6afa:	f380 8811 	msr	BASEPRI, r0
    6afe:	f04f 0004 	mov.w	r0, #4
    6b02:	df02      	svc	2
			m.param = instance;
    6b04:	4b09      	ldr	r3, [pc, #36]	; (6b2c <hal_ticker_instance0_sched+0x6c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    6b06:	2100      	movs	r1, #0
			m.param = instance;
    6b08:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    6b0a:	2001      	movs	r0, #1
    6b0c:	e7e7      	b.n	6ade <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
    6b0e:	4b08      	ldr	r3, [pc, #32]	; (6b30 <hal_ticker_instance0_sched+0x70>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    6b10:	2101      	movs	r1, #1
			m.param = instance;
    6b12:	609c      	str	r4, [r3, #8]
    6b14:	e7f9      	b.n	6b0a <hal_ticker_instance0_sched+0x4a>
		switch (callee_id) {
    6b16:	2904      	cmp	r1, #4
    6b18:	d1ee      	bne.n	6af8 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
    6b1a:	4b06      	ldr	r3, [pc, #24]	; (6b34 <hal_ticker_instance0_sched+0x74>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    6b1c:	2101      	movs	r1, #1
			m.param = instance;
    6b1e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    6b20:	2003      	movs	r0, #3
    6b22:	e7dc      	b.n	6ade <hal_ticker_instance0_sched+0x1e>
    6b24:	20002990 	.word	0x20002990
    6b28:	200029a0 	.word	0x200029a0
    6b2c:	200029b0 	.word	0x200029b0
    6b30:	200029c0 	.word	0x200029c0
    6b34:	200029d0 	.word	0x200029d0

00006b38 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
    6b38:	4601      	mov	r1, r0
    6b3a:	2000      	movs	r0, #0
    6b3c:	f7ff bbb4 	b.w	62a8 <cntr_cmp_set>

00006b40 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
    6b40:	4770      	bx	lr
	...

00006b44 <net_buf_pool_get>:
}
    6b44:	4b01      	ldr	r3, [pc, #4]	; (6b4c <net_buf_pool_get+0x8>)
    6b46:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    6b4a:	4770      	bx	lr
    6b4c:	20002ac8 	.word	0x20002ac8

00006b50 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    6b50:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
    6b52:	4b04      	ldr	r3, [pc, #16]	; (6b64 <net_buf_id+0x14>)
    6b54:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    6b58:	69db      	ldr	r3, [r3, #28]
    6b5a:	1ac0      	subs	r0, r0, r3
}
    6b5c:	4b02      	ldr	r3, [pc, #8]	; (6b68 <net_buf_id+0x18>)
	return buf - pool->__bufs;
    6b5e:	10c0      	asrs	r0, r0, #3
}
    6b60:	4358      	muls	r0, r3
    6b62:	4770      	bx	lr
    6b64:	20002ac8 	.word	0x20002ac8
    6b68:	aaaaaaab 	.word	0xaaaaaaab

00006b6c <fixed_data_alloc>:
{
    6b6c:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    6b6e:	4b09      	ldr	r3, [pc, #36]	; (6b94 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    6b70:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    6b72:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
    6b76:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    6b78:	699b      	ldr	r3, [r3, #24]
    6b7a:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
    6b7c:	6823      	ldr	r3, [r4, #0]
    6b7e:	429a      	cmp	r2, r3
    6b80:	bf94      	ite	ls
    6b82:	600a      	strls	r2, [r1, #0]
    6b84:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    6b86:	f7ff ffe3 	bl	6b50 <net_buf_id>
    6b8a:	e894 000c 	ldmia.w	r4, {r2, r3}
}
    6b8e:	fb02 3000 	mla	r0, r2, r0, r3
    6b92:	bd10      	pop	{r4, pc}
    6b94:	20002ac8 	.word	0x20002ac8

00006b98 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
    6b98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6b9c:	4605      	mov	r5, r0
    6b9e:	9101      	str	r1, [sp, #4]
    6ba0:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
    6ba2:	f001 fe57 	bl	8854 <_impl_k_uptime_get_32>
    6ba6:	4607      	mov	r7, r0
	__asm__ volatile(
    6ba8:	f04f 0320 	mov.w	r3, #32
    6bac:	f3ef 8811 	mrs	r8, BASEPRI
    6bb0:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    6bb4:	8a6b      	ldrh	r3, [r5, #18]
    6bb6:	2b00      	cmp	r3, #0
    6bb8:	d03d      	beq.n	6c36 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    6bba:	8a2a      	ldrh	r2, [r5, #16]
    6bbc:	429a      	cmp	r2, r3
    6bbe:	d92a      	bls.n	6c16 <net_buf_alloc_len+0x7e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    6bc0:	2100      	movs	r1, #0
    6bc2:	4628      	mov	r0, r5
    6bc4:	f001 f918 	bl	7df8 <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    6bc8:	b328      	cbz	r0, 6c16 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6bca:	f388 8811 	msr	BASEPRI, r8
    6bce:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    6bd0:	9b01      	ldr	r3, [sp, #4]
    6bd2:	2b00      	cmp	r3, #0
    6bd4:	d03c      	beq.n	6c50 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    6bd6:	1c73      	adds	r3, r6, #1
    6bd8:	2b01      	cmp	r3, #1
    6bda:	d906      	bls.n	6bea <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
    6bdc:	f001 fe3a 	bl	8854 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
    6be0:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
    6be2:	42b0      	cmp	r0, r6
    6be4:	bf94      	ite	ls
    6be6:	1a36      	subls	r6, r6, r0
    6be8:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    6bea:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    6bec:	4f1e      	ldr	r7, [pc, #120]	; (6c68 <net_buf_alloc_len+0xd0>)
    6bee:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    6bf2:	4632      	mov	r2, r6
    6bf4:	699b      	ldr	r3, [r3, #24]
    6bf6:	681b      	ldr	r3, [r3, #0]
    6bf8:	a901      	add	r1, sp, #4
    6bfa:	681b      	ldr	r3, [r3, #0]
    6bfc:	4620      	mov	r0, r4
    6bfe:	4798      	blx	r3
    6c00:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    6c02:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    6c04:	bb28      	cbnz	r0, 6c52 <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    6c06:	79a0      	ldrb	r0, [r4, #6]
    6c08:	4621      	mov	r1, r4
    6c0a:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    6c0e:	f001 f8d4 	bl	7dba <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    6c12:	462c      	mov	r4, r5
    6c14:	e018      	b.n	6c48 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
    6c16:	8a68      	ldrh	r0, [r5, #18]
    6c18:	1e43      	subs	r3, r0, #1
    6c1a:	826b      	strh	r3, [r5, #18]
    6c1c:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    6c20:	8a2c      	ldrh	r4, [r5, #16]
    6c22:	1a24      	subs	r4, r4, r0
    6c24:	69e8      	ldr	r0, [r5, #28]
    6c26:	2318      	movs	r3, #24
    6c28:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
    6c2c:	4b0e      	ldr	r3, [pc, #56]	; (6c68 <net_buf_alloc_len+0xd0>)
    6c2e:	1aed      	subs	r5, r5, r3
    6c30:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
    6c32:	71a5      	strb	r5, [r4, #6]
		goto success;
    6c34:	e7cc      	b.n	6bd0 <net_buf_alloc_len+0x38>
    6c36:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    6c3a:	4631      	mov	r1, r6
    6c3c:	4628      	mov	r0, r5
    6c3e:	f001 f8db 	bl	7df8 <_impl_k_queue_get>
		return NULL;
    6c42:	4604      	mov	r4, r0
	if (!buf) {
    6c44:	2800      	cmp	r0, #0
    6c46:	d1c3      	bne.n	6bd0 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    6c48:	4620      	mov	r0, r4
    6c4a:	b002      	add	sp, #8
    6c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
    6c50:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
    6c52:	2301      	movs	r3, #1
    6c54:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
    6c56:	2300      	movs	r3, #0
	buf->frags = NULL;
    6c58:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
    6c5a:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
    6c5c:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
    6c5e:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
    6c60:	6923      	ldr	r3, [r4, #16]
    6c62:	81e2      	strh	r2, [r4, #14]
    6c64:	60a3      	str	r3, [r4, #8]
	return buf;
    6c66:	e7ef      	b.n	6c48 <net_buf_alloc_len+0xb0>
    6c68:	20002ac8 	.word	0x20002ac8

00006c6c <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    6c6c:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    6c6e:	685b      	ldr	r3, [r3, #4]
    6c70:	460a      	mov	r2, r1
    6c72:	6819      	ldr	r1, [r3, #0]
    6c74:	f7ff bf90 	b.w	6b98 <net_buf_alloc_len>

00006c78 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    6c78:	6883      	ldr	r3, [r0, #8]
    6c7a:	4419      	add	r1, r3
    6c7c:	6001      	str	r1, [r0, #0]
    6c7e:	4770      	bx	lr

00006c80 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    6c80:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    6c82:	460a      	mov	r2, r1
    6c84:	6814      	ldr	r4, [r2, #0]
    6c86:	b914      	cbnz	r4, 6c8e <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
    6c88:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
    6c8a:	f001 b89b 	b.w	7dc4 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
    6c8e:	7953      	ldrb	r3, [r2, #5]
    6c90:	f043 0301 	orr.w	r3, r3, #1
    6c94:	7153      	strb	r3, [r2, #5]
    6c96:	4622      	mov	r2, r4
    6c98:	e7f4      	b.n	6c84 <net_buf_put+0x4>
	...

00006c9c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    6c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c9e:	4d15      	ldr	r5, [pc, #84]	; (6cf4 <net_buf_unref+0x58>)
    6ca0:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    6ca2:	2600      	movs	r6, #0
	while (buf) {
    6ca4:	b904      	cbnz	r4, 6ca8 <net_buf_unref+0xc>
    6ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
    6ca8:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    6caa:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
    6cac:	3b01      	subs	r3, #1
    6cae:	b2db      	uxtb	r3, r3
    6cb0:	7123      	strb	r3, [r4, #4]
    6cb2:	2b00      	cmp	r3, #0
    6cb4:	d1f7      	bne.n	6ca6 <net_buf_unref+0xa>
		if (buf->__buf) {
    6cb6:	6921      	ldr	r1, [r4, #16]
    6cb8:	b159      	cbz	r1, 6cd2 <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    6cba:	7963      	ldrb	r3, [r4, #5]
    6cbc:	079b      	lsls	r3, r3, #30
    6cbe:	d407      	bmi.n	6cd0 <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    6cc0:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
    6cc2:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    6cc6:	4620      	mov	r0, r4
    6cc8:	699b      	ldr	r3, [r3, #24]
    6cca:	681b      	ldr	r3, [r3, #0]
    6ccc:	689b      	ldr	r3, [r3, #8]
    6cce:	4798      	blx	r3
			buf->__buf = NULL;
    6cd0:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
    6cd2:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    6cd4:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
    6cd6:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
    6cda:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    6cdc:	695b      	ldr	r3, [r3, #20]
    6cde:	b11b      	cbz	r3, 6ce8 <net_buf_unref+0x4c>
			pool->destroy(buf);
    6ce0:	4620      	mov	r0, r4
    6ce2:	4798      	blx	r3
{
    6ce4:	463c      	mov	r4, r7
    6ce6:	e7dd      	b.n	6ca4 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
    6ce8:	4621      	mov	r1, r4
    6cea:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    6cee:	f001 f864 	bl	7dba <k_queue_prepend>
    6cf2:	e7f7      	b.n	6ce4 <net_buf_unref+0x48>
    6cf4:	20002ac8 	.word	0x20002ac8

00006cf8 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    6cf8:	7903      	ldrb	r3, [r0, #4]
    6cfa:	3301      	adds	r3, #1
    6cfc:	7103      	strb	r3, [r0, #4]
	return buf;
}
    6cfe:	4770      	bx	lr

00006d00 <net_buf_simple_add>:
	return buf->data + buf->len;
    6d00:	8883      	ldrh	r3, [r0, #4]
    6d02:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    6d04:	4419      	add	r1, r3
    6d06:	8081      	strh	r1, [r0, #4]
	return tail;
}
    6d08:	18d0      	adds	r0, r2, r3
    6d0a:	4770      	bx	lr

00006d0c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    6d0c:	b430      	push	{r4, r5}
    6d0e:	8883      	ldrh	r3, [r0, #4]
    6d10:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
    6d12:	189d      	adds	r5, r3, r2
    6d14:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    6d16:	18e0      	adds	r0, r4, r3
}
    6d18:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
    6d1a:	f7fb b8eb 	b.w	1ef4 <memcpy>

00006d1e <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    6d1e:	8883      	ldrh	r3, [r0, #4]
    6d20:	1a5b      	subs	r3, r3, r1
    6d22:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    6d24:	6803      	ldr	r3, [r0, #0]
    6d26:	4419      	add	r1, r3
    6d28:	6001      	str	r1, [r0, #0]
}
    6d2a:	4608      	mov	r0, r1
    6d2c:	4770      	bx	lr

00006d2e <nrf_gpio_cfg_sense_set>:
        sense_config);
}


__STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t pin_number, nrf_gpio_pin_sense_t sense_config)
{
    6d2e:	0080      	lsls	r0, r0, #2
    6d30:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    6d34:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    6d38:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    6d3c:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    6d40:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    6d44:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    6d48:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
    6d4c:	4770      	bx	lr

00006d4e <gpio_nrfx_write>:
	return 0;
}

static int gpio_nrfx_write(struct device *port, int access_op,
			   u32_t pin, u32_t value)
{
    6d4e:	b510      	push	{r4, lr}
	return port->config->config_info;
    6d50:	6804      	ldr	r4, [r0, #0]
    6d52:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6d54:	68a4      	ldr	r4, [r4, #8]
	struct gpio_nrfx_data *data = get_port_data(port);

	if (access_op == GPIO_ACCESS_BY_PORT) {
    6d56:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6d58:	6824      	ldr	r4, [r4, #0]
    6d5a:	69c1      	ldr	r1, [r0, #28]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    6d5c:	d104      	bne.n	6d68 <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    6d5e:	404b      	eors	r3, r1
}


__STATIC_INLINE void nrf_gpio_port_out_write(NRF_GPIO_Type * p_reg, uint32_t value)
{
    p_reg->OUT = value;
    6d60:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	return 0;
}
    6d64:	2000      	movs	r0, #0
    6d66:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    6d68:	3300      	adds	r3, #0
    6d6a:	fa21 f102 	lsr.w	r1, r1, r2
    6d6e:	bf18      	it	ne
    6d70:	2301      	movne	r3, #1
    6d72:	f001 0101 	and.w	r1, r1, #1
    6d76:	428b      	cmp	r3, r1
    6d78:	f04f 0301 	mov.w	r3, #1
			nrf_gpio_port_out_set(reg, BIT(pin));
    6d7c:	fa03 f302 	lsl.w	r3, r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    6d80:	bf14      	ite	ne
    6d82:	f8c4 3508 	strne.w	r3, [r4, #1288]	; 0x508
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    6d86:	f8c4 350c 	streq.w	r3, [r4, #1292]	; 0x50c
    6d8a:	e7eb      	b.n	6d64 <gpio_nrfx_write+0x16>

00006d8c <gpio_nrfx_read>:

static int gpio_nrfx_read(struct device *port, int access_op,
			  u32_t pin, u32_t *value)
{
    6d8c:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
    6d8e:	6804      	ldr	r4, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);

	u32_t dir = nrf_gpio_port_dir_read(reg);
	u32_t port_in = nrf_gpio_port_in_read(reg) & ~dir;
	u32_t port_out = nrf_gpio_port_out_read(reg) & dir;
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    6d90:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6d92:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    6d94:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6d96:	6825      	ldr	r5, [r4, #0]
    return p_reg->DIR;
    6d98:	f8d5 6514 	ldr.w	r6, [r5, #1300]	; 0x514
    return p_reg->IN;
    6d9c:	f8d5 4510 	ldr.w	r4, [r5, #1296]	; 0x510
    return p_reg->OUT;
    6da0:	f8d5 5504 	ldr.w	r5, [r5, #1284]	; 0x504
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    6da4:	4060      	eors	r0, r4
    6da6:	406c      	eors	r4, r5
    6da8:	4034      	ands	r4, r6
    6daa:	4060      	eors	r0, r4

	if (access_op == GPIO_ACCESS_BY_PORT) {
    6dac:	2901      	cmp	r1, #1
		*value = port_val;
	} else {
		*value = (port_val & BIT(pin)) ? 1 : 0;
    6dae:	bf1c      	itt	ne
    6db0:	40d0      	lsrne	r0, r2
    6db2:	f000 0001 	andne.w	r0, r0, #1
    6db6:	6018      	str	r0, [r3, #0]
	}

	return 0;
}
    6db8:	2000      	movs	r0, #0
    6dba:	bd70      	pop	{r4, r5, r6, pc}

00006dbc <gpio_nrfx_manage_callback>:

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    6dbc:	6883      	ldr	r3, [r0, #8]
    6dbe:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    6dc0:	b172      	cbz	r2, 6de0 <gpio_nrfx_manage_callback+0x24>
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
    6dc2:	6008      	str	r0, [r1, #0]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node);

Z_GENLIST_PREPEND(slist, snode)
    6dc4:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    6dc6:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    6dc8:	b902      	cbnz	r2, 6dcc <gpio_nrfx_manage_callback+0x10>
	list->tail = node;
    6dca:	6059      	str	r1, [r3, #4]
	_gpio_manage_callback(&get_port_data(port)->callbacks, callback, set);
	return 0;
}
    6dcc:	2000      	movs	r0, #0
    6dce:	4770      	bx	lr
	parent->next = child;
    6dd0:	6010      	str	r0, [r2, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    6dd2:	6858      	ldr	r0, [r3, #4]
    6dd4:	4281      	cmp	r1, r0
	list->tail = node;
    6dd6:	bf08      	it	eq
    6dd8:	605a      	streq	r2, [r3, #4]
    6dda:	e00d      	b.n	6df8 <gpio_nrfx_manage_callback+0x3c>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6ddc:	4602      	mov	r2, r0
    6dde:	6800      	ldr	r0, [r0, #0]
    6de0:	2800      	cmp	r0, #0
    6de2:	d0f3      	beq.n	6dcc <gpio_nrfx_manage_callback+0x10>
    6de4:	4281      	cmp	r1, r0
    6de6:	d1f9      	bne.n	6ddc <gpio_nrfx_manage_callback+0x20>
    6de8:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    6dea:	2a00      	cmp	r2, #0
    6dec:	d1f0      	bne.n	6dd0 <gpio_nrfx_manage_callback+0x14>
    6dee:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    6df0:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    6df2:	4291      	cmp	r1, r2
    6df4:	d100      	bne.n	6df8 <gpio_nrfx_manage_callback+0x3c>
	list->tail = node;
    6df6:	6058      	str	r0, [r3, #4]
	parent->next = child;
    6df8:	2300      	movs	r3, #0
    6dfa:	600b      	str	r3, [r1, #0]
    6dfc:	e7e6      	b.n	6dcc <gpio_nrfx_manage_callback+0x10>
	...

00006e00 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    6e00:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    6e02:	4b09      	ldr	r3, [pc, #36]	; (6e28 <gpio_nrfx_init+0x28>)
    6e04:	781a      	ldrb	r2, [r3, #0]
    6e06:	b96a      	cbnz	r2, 6e24 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    6e08:	2101      	movs	r1, #1
    6e0a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ,
    6e0c:	2006      	movs	r0, #6
    6e0e:	2105      	movs	r1, #5
    6e10:	f7fa febc 	bl	1b8c <_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ);
    6e14:	2006      	movs	r0, #6
    6e16:	f7fa fe87 	bl	1b28 <_arch_irq_enable>
    return ((uint32_t)NRF_GPIOTE + event);
}

__STATIC_INLINE void nrf_gpiote_int_enable(uint32_t mask)
{
    NRF_GPIOTE->INTENSET = mask;
    6e1a:	4b04      	ldr	r3, [pc, #16]	; (6e2c <gpio_nrfx_init+0x2c>)
    6e1c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6e20:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    6e24:	2000      	movs	r0, #0
    6e26:	bd08      	pop	{r3, pc}
    6e28:	20000ce4 	.word	0x20000ce4
    6e2c:	40006000 	.word	0x40006000

00006e30 <gpiote_event_handler>:
{
    6e30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
    6e34:	4e49      	ldr	r6, [pc, #292]	; (6f5c <gpiote_event_handler+0x12c>)
    6e36:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
    6e38:	2d01      	cmp	r5, #1
    6e3a:	d166      	bne.n	6f0a <gpiote_event_handler+0xda>
    6e3c:	4a48      	ldr	r2, [pc, #288]	; (6f60 <gpiote_event_handler+0x130>)
    6e3e:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
    6e40:	6812      	ldr	r2, [r2, #0]
	u32_t out = data->int_en & data->pin_int_en;
    6e42:	6899      	ldr	r1, [r3, #8]
	return port->config->config_info;
    6e44:	f8d2 8008 	ldr.w	r8, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
    6e48:	68da      	ldr	r2, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    6e4a:	6998      	ldr	r0, [r3, #24]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    6e4c:	69dc      	ldr	r4, [r3, #28]
	u32_t out = data->int_en & data->pin_int_en;
    6e4e:	400a      	ands	r2, r1
	out &= ~data->trig_edge & ~data->double_edge;
    6e50:	6959      	ldr	r1, [r3, #20]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    6e52:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
    6e54:	4301      	orrs	r1, r0
    6e56:	ea22 0201 	bic.w	r2, r2, r1
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    6e5a:	f8d8 1000 	ldr.w	r1, [r8]
    return p_reg->IN;
    6e5e:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    6e62:	405c      	eors	r4, r3
    6e64:	404c      	eors	r4, r1
	u32_t out = pin_states & level_pins;
    6e66:	ea22 0404 	bic.w	r4, r2, r4
	u32_t bit = 1U << pin;
    6e6a:	462f      	mov	r7, r5
	u32_t pin = 0;
    6e6c:	f04f 0900 	mov.w	r9, #0
	while (level_pins) {
    6e70:	2a00      	cmp	r2, #0
    6e72:	d139      	bne.n	6ee8 <gpiote_event_handler+0xb8>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    6e74:	6032      	str	r2, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    6e76:	6833      	ldr	r3, [r6, #0]
    6e78:	9300      	str	r3, [sp, #0]
    (void)dummy;
    6e7a:	9b00      	ldr	r3, [sp, #0]
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
    6e7c:	4e39      	ldr	r6, [pc, #228]	; (6f64 <gpiote_event_handler+0x134>)
	u32_t fired_triggers[GPIO_COUNT] = {0};
    6e7e:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
    6e80:	2701      	movs	r7, #1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    6e82:	469e      	mov	lr, r3
    return (NRF_GPIOTE->INTENSET & mask);
    6e84:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
    6e88:	fa07 f103 	lsl.w	r1, r7, r3
    6e8c:	4211      	tst	r1, r2
    6e8e:	d014      	beq.n	6eba <gpiote_event_handler+0x8a>
    return ((uint32_t)NRF_GPIOTE + event);
    6e90:	009a      	lsls	r2, r3, #2
    6e92:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6e96:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    6e9a:	6811      	ldr	r1, [r2, #0]
    6e9c:	2901      	cmp	r1, #1
    6e9e:	d10c      	bne.n	6eba <gpiote_event_handler+0x8a>
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    6ea0:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    6ea4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    6ea8:	f8c2 e000 	str.w	lr, [r2]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    6eac:	6812      	ldr	r2, [r2, #0]
    6eae:	9201      	str	r2, [sp, #4]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    6eb0:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32] |= BIT(abs_pin % 32);
    6eb4:	4081      	lsls	r1, r0
    (void)dummy;
    6eb6:	9a01      	ldr	r2, [sp, #4]
    6eb8:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    6eba:	3301      	adds	r3, #1
    6ebc:	2b08      	cmp	r3, #8
    6ebe:	d1e1      	bne.n	6e84 <gpiote_event_handler+0x54>
	if (fired_triggers[0]) {
    6ec0:	bb2c      	cbnz	r4, 6f0e <gpiote_event_handler+0xde>
	if (port_event) {
    6ec2:	2d01      	cmp	r5, #1
    6ec4:	d10d      	bne.n	6ee2 <gpiote_event_handler+0xb2>
    6ec6:	4b26      	ldr	r3, [pc, #152]	; (6f60 <gpiote_event_handler+0x130>)
    6ec8:	689c      	ldr	r4, [r3, #8]
	return port->config->config_info;
    6eca:	681b      	ldr	r3, [r3, #0]
	u32_t out = data->int_en & data->pin_int_en;
    6ecc:	68e2      	ldr	r2, [r4, #12]
	return port->config->config_info;
    6ece:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    6ed0:	68a3      	ldr	r3, [r4, #8]
	out &= ~data->trig_edge & ~data->double_edge;
    6ed2:	69a1      	ldr	r1, [r4, #24]
	u32_t out = data->int_en & data->pin_int_en;
    6ed4:	401a      	ands	r2, r3
	out &= ~data->trig_edge & ~data->double_edge;
    6ed6:	6963      	ldr	r3, [r4, #20]
    6ed8:	430b      	orrs	r3, r1
    6eda:	ea22 0203 	bic.w	r2, r2, r3
	u32_t pin = 0;
    6ede:	2600      	movs	r6, #0
	while (level_pins) {
    6ee0:	bb22      	cbnz	r2, 6f2c <gpiote_event_handler+0xfc>
}
    6ee2:	b003      	add	sp, #12
    6ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
    6ee8:	423a      	tst	r2, r7
    6eea:	d00a      	beq.n	6f02 <gpiote_event_handler+0xd2>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6eec:	f898 3004 	ldrb.w	r3, [r8, #4]
    6ef0:	f009 001f 	and.w	r0, r9, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    6ef4:	2100      	movs	r1, #0
    6ef6:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    6efa:	f7ff ff18 	bl	6d2e <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    6efe:	ea22 0207 	bic.w	r2, r2, r7
		++pin;
    6f02:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    6f06:	007f      	lsls	r7, r7, #1
    6f08:	e7b2      	b.n	6e70 <gpiote_event_handler+0x40>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    6f0a:	2400      	movs	r4, #0
    6f0c:	e7b6      	b.n	6e7c <gpiote_event_handler+0x4c>
    6f0e:	4f14      	ldr	r7, [pc, #80]	; (6f60 <gpiote_event_handler+0x130>)
    6f10:	68bb      	ldr	r3, [r7, #8]
    6f12:	681e      	ldr	r6, [r3, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    6f14:	2e00      	cmp	r6, #0
    6f16:	d0d4      	beq.n	6ec2 <gpiote_event_handler+0x92>
		if (cb->pin_mask & pins) {
    6f18:	68b3      	ldr	r3, [r6, #8]
    6f1a:	421c      	tst	r4, r3
    6f1c:	d004      	beq.n	6f28 <gpiote_event_handler+0xf8>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    6f1e:	6873      	ldr	r3, [r6, #4]
    6f20:	4622      	mov	r2, r4
    6f22:	4631      	mov	r1, r6
    6f24:	4638      	mov	r0, r7
    6f26:	4798      	blx	r3
	return node->next;
    6f28:	6836      	ldr	r6, [r6, #0]
    6f2a:	e7f3      	b.n	6f14 <gpiote_event_handler+0xe4>
		if (level_pins & bit) {
    6f2c:	4215      	tst	r5, r2
    6f2e:	d012      	beq.n	6f56 <gpiote_event_handler+0x126>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    6f30:	69e1      	ldr	r1, [r4, #28]
    6f32:	6923      	ldr	r3, [r4, #16]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6f34:	f897 e004 	ldrb.w	lr, [r7, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    6f38:	404b      	eors	r3, r1
    6f3a:	40f3      	lsrs	r3, r6
	return NRF_GPIO_PIN_SENSE_LOW;
    6f3c:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6f40:	f006 001f 	and.w	r0, r6, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    6f44:	bf14      	ite	ne
    6f46:	2102      	movne	r1, #2
    6f48:	2103      	moveq	r1, #3
    6f4a:	ea40 104e 	orr.w	r0, r0, lr, lsl #5
    6f4e:	f7ff feee 	bl	6d2e <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    6f52:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
    6f56:	3601      	adds	r6, #1
		bit <<= 1;
    6f58:	006d      	lsls	r5, r5, #1
    6f5a:	e7c1      	b.n	6ee0 <gpiote_event_handler+0xb0>
    6f5c:	4000617c 	.word	0x4000617c
    6f60:	20002a5c 	.word	0x20002a5c
    6f64:	40006000 	.word	0x40006000

00006f68 <gpiote_pin_int_cfg>:
{
    6f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return port->config->config_info;
    6f6a:	6803      	ldr	r3, [r0, #0]
    6f6c:	6886      	ldr	r6, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6f6e:	689b      	ldr	r3, [r3, #8]
    6f70:	f001 041f 	and.w	r4, r1, #31
{
    6f74:	460d      	mov	r5, r1
    return (NRF_GPIOTE->INTENSET & mask);
    6f76:	494d      	ldr	r1, [pc, #308]	; (70ac <gpiote_pin_int_cfg+0x144>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6f78:	791b      	ldrb	r3, [r3, #4]
    6f7a:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
    6f7e:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
    6f82:	b2d2      	uxtb	r2, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    6f84:	2300      	movs	r3, #0
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    6f86:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    6f8a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    6f8e:	f3c0 2004 	ubfx	r0, r0, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
    6f92:	4284      	cmp	r4, r0
    6f94:	d16f      	bne.n	7076 <gpiote_pin_int_cfg+0x10e>
		    && (intenset & BIT(i))) {
    6f96:	fa22 f003 	lsr.w	r0, r2, r3
    6f9a:	07c0      	lsls	r0, r0, #31
    6f9c:	d56b      	bpl.n	7076 <gpiote_pin_int_cfg+0x10e>
    6f9e:	009a      	lsls	r2, r3, #2
    6fa0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6fa4:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    6fa8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    6fac:	f020 0001 	bic.w	r0, r0, #1
    6fb0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
    6fb4:	2201      	movs	r2, #1
    6fb6:	fa02 f303 	lsl.w	r3, r2, r3
    NRF_GPIOTE->INTENCLR = mask;
    6fba:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    6fbe:	4620      	mov	r0, r4
    6fc0:	2100      	movs	r1, #0
    6fc2:	f7ff feb4 	bl	6d2e <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    6fc6:	68b0      	ldr	r0, [r6, #8]
    6fc8:	40e8      	lsrs	r0, r5
    6fca:	f010 0001 	ands.w	r0, r0, #1
    6fce:	d050      	beq.n	7072 <gpiote_pin_int_cfg+0x10a>
    6fd0:	68f0      	ldr	r0, [r6, #12]
    6fd2:	40e8      	lsrs	r0, r5
    6fd4:	f010 0001 	ands.w	r0, r0, #1
    6fd8:	d04b      	beq.n	7072 <gpiote_pin_int_cfg+0x10a>
		if (data->trig_edge & BIT(pin)) {
    6fda:	6970      	ldr	r0, [r6, #20]
    6fdc:	40e8      	lsrs	r0, r5
    6fde:	f010 0201 	ands.w	r2, r0, #1
    6fe2:	d054      	beq.n	708e <gpiote_pin_int_cfg+0x126>
			if (data->double_edge & BIT(pin)) {
    6fe4:	69b3      	ldr	r3, [r6, #24]
    6fe6:	40eb      	lsrs	r3, r5
    6fe8:	07db      	lsls	r3, r3, #31
    6fea:	d448      	bmi.n	707e <gpiote_pin_int_cfg+0x116>
			} else if (((data->active_level & BIT(pin)) != 0)
    6fec:	6933      	ldr	r3, [r6, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    6fee:	69f2      	ldr	r2, [r6, #28]
			} else if (((data->active_level & BIT(pin)) != 0)
    6ff0:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    6ff2:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0)
    6ff6:	f003 0301 	and.w	r3, r3, #1
    6ffa:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    6ffe:	42ab      	cmp	r3, r5
    7000:	bf14      	ite	ne
    7002:	2501      	movne	r5, #1
    7004:	2502      	moveq	r5, #2
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    7006:	4e29      	ldr	r6, [pc, #164]	; (70ac <gpiote_pin_int_cfg+0x144>)
    7008:	2200      	movs	r2, #0
    700a:	f502 73a2 	add.w	r3, r2, #324	; 0x144
    700e:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
    7012:	f010 0003 	ands.w	r0, r0, #3
    7016:	d134      	bne.n	7082 <gpiote_pin_int_cfg+0x11a>
			nrf_gpiote_events_t evt =
    7018:	0093      	lsls	r3, r2, #2
    701a:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    701e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    7022:	f503 7380 	add.w	r3, r3, #256	; 0x100
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    7026:	f8d1 7510 	ldr.w	r7, [r1, #1296]	; 0x510
    702a:	f427 3747 	bic.w	r7, r7, #203776	; 0x31c00
    702e:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    7032:	f8c1 7510 	str.w	r7, [r1, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7036:	0224      	lsls	r4, r4, #8
    return ((uint32_t)NRF_GPIOTE + event);
    7038:	b29b      	uxth	r3, r3
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    703a:	f8d1 7510 	ldr.w	r7, [r1, #1296]	; 0x510
    703e:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    return ((uint32_t)NRF_GPIOTE + event);
    7042:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7046:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    704a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    704e:	433d      	orrs	r5, r7
    7050:	f8c1 5510 	str.w	r5, [r1, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    7054:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    7056:	9001      	str	r0, [sp, #4]
    (void)dummy;
    7058:	9b01      	ldr	r3, [sp, #4]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    705a:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
    705e:	f043 0301 	orr.w	r3, r3, #1
    7062:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
    7066:	b2d2      	uxtb	r2, r2
    7068:	2301      	movs	r3, #1
    706a:	fa03 f202 	lsl.w	r2, r3, r2
    NRF_GPIOTE->INTENSET = mask;
    706e:	f8c6 2304 	str.w	r2, [r6, #772]	; 0x304
}
    7072:	b003      	add	sp, #12
    7074:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    7076:	3301      	adds	r3, #1
    7078:	2b08      	cmp	r3, #8
    707a:	d184      	bne.n	6f86 <gpiote_pin_int_cfg+0x1e>
    707c:	e79f      	b.n	6fbe <gpiote_pin_int_cfg+0x56>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    707e:	2503      	movs	r5, #3
    7080:	e7c1      	b.n	7006 <gpiote_pin_int_cfg+0x9e>
    7082:	3201      	adds	r2, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    7084:	2a08      	cmp	r2, #8
    7086:	d1c0      	bne.n	700a <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
    7088:	f06f 0012 	mvn.w	r0, #18
    708c:	e7f1      	b.n	7072 <gpiote_pin_int_cfg+0x10a>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    708e:	69f1      	ldr	r1, [r6, #28]
    7090:	6933      	ldr	r3, [r6, #16]
    7092:	404b      	eors	r3, r1
    7094:	fa23 f505 	lsr.w	r5, r3, r5
	return NRF_GPIO_PIN_SENSE_LOW;
    7098:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    709c:	4620      	mov	r0, r4
    709e:	bf14      	ite	ne
    70a0:	2102      	movne	r1, #2
    70a2:	2103      	moveq	r1, #3
    70a4:	f7ff fe43 	bl	6d2e <nrf_gpio_cfg_sense_set>
	int res = 0;
    70a8:	4610      	mov	r0, r2
    70aa:	e7e2      	b.n	7072 <gpiote_pin_int_cfg+0x10a>
    70ac:	40006000 	.word	0x40006000

000070b0 <gpio_nrfx_config>:
{
    70b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70b4:	4681      	mov	r9, r0
    70b6:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    70b8:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    70bc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    70c0:	461f      	mov	r7, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    70c2:	d040      	beq.n	7146 <gpio_nrfx_config+0x96>
    70c4:	dc2d      	bgt.n	7122 <gpio_nrfx_config+0x72>
    70c6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    70ca:	d040      	beq.n	714e <gpio_nrfx_config+0x9e>
    70cc:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    70d0:	d041      	beq.n	7156 <gpio_nrfx_config+0xa6>
    70d2:	bb68      	cbnz	r0, 7130 <gpio_nrfx_config+0x80>
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    70d4:	f407 7840 	and.w	r8, r7, #768	; 0x300
    70d8:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
    70dc:	d03f      	beq.n	715e <gpio_nrfx_config+0xae>
		pull = NRF_GPIO_PIN_PULLUP;
    70de:	f5a8 7400 	sub.w	r4, r8, #512	; 0x200
    70e2:	4263      	negs	r3, r4
    70e4:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    70e6:	f007 0601 	and.w	r6, r7, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    70ea:	ea4f 0846 	mov.w	r8, r6, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    70ee:	ea48 0806 	orr.w	r8, r8, r6
	if (access_op == GPIO_ACCESS_BY_PORT) {
    70f2:	2901      	cmp	r1, #1
    70f4:	ea48 2000 	orr.w	r0, r8, r0, lsl #8
		from_pin = pin;
    70f8:	bf18      	it	ne
    70fa:	b2d4      	uxtbne	r4, r2
    70fc:	ea40 0883 	orr.w	r8, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    7100:	f007 0302 	and.w	r3, r7, #2
		to_pin   = pin;
    7104:	bf12      	itee	ne
    7106:	46a2      	movne	sl, r4
		to_pin   = 31U;
    7108:	f04f 0a1f 	moveq.w	sl, #31
		from_pin = 0U;
    710c:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    710e:	f04f 4ba0 	mov.w	fp, #1342177280	; 0x50000000
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    7112:	9301      	str	r3, [sp, #4]
    7114:	2601      	movs	r6, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    7116:	45a2      	cmp	sl, r4
    7118:	d223      	bcs.n	7162 <gpio_nrfx_config+0xb2>
	return 0;
    711a:	2000      	movs	r0, #0
}
    711c:	b003      	add	sp, #12
    711e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    7122:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    7126:	d018      	beq.n	715a <gpio_nrfx_config+0xaa>
    7128:	dc05      	bgt.n	7136 <gpio_nrfx_config+0x86>
    712a:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    712e:	d010      	beq.n	7152 <gpio_nrfx_config+0xa2>
		return -EINVAL;
    7130:	f06f 0015 	mvn.w	r0, #21
    7134:	e7f2      	b.n	711c <gpio_nrfx_config+0x6c>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    7136:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    713a:	d006      	beq.n	714a <gpio_nrfx_config+0x9a>
    713c:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    7140:	d1f6      	bne.n	7130 <gpio_nrfx_config+0x80>
		drive = NRF_GPIO_PIN_H0D1;
    7142:	2007      	movs	r0, #7
		break;
    7144:	e7c6      	b.n	70d4 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0H1;
    7146:	2002      	movs	r0, #2
    7148:	e7c4      	b.n	70d4 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0D1;
    714a:	2006      	movs	r0, #6
		break;
    714c:	e7c2      	b.n	70d4 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0S1;
    714e:	2001      	movs	r0, #1
		break;
    7150:	e7c0      	b.n	70d4 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    7152:	2003      	movs	r0, #3
		break;
    7154:	e7be      	b.n	70d4 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0S1;
    7156:	2004      	movs	r0, #4
		break;
    7158:	e7bc      	b.n	70d4 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0H1;
    715a:	2005      	movs	r0, #5
		break;
    715c:	e7ba      	b.n	70d4 <gpio_nrfx_config+0x24>
		pull = NRF_GPIO_PIN_PULLUP;
    715e:	2303      	movs	r3, #3
    7160:	e7c1      	b.n	70e6 <gpio_nrfx_config+0x36>
	return port->config->config_info;
    7162:	f8d9 3000 	ldr.w	r3, [r9]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    7166:	689b      	ldr	r3, [r3, #8]
    7168:	791a      	ldrb	r2, [r3, #4]
    716a:	f004 031f 	and.w	r3, r4, #31
    716e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    7172:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    7176:	9a01      	ldr	r2, [sp, #4]
    7178:	f84b 8023 	str.w	r8, [fp, r3, lsl #2]
    717c:	68ab      	ldr	r3, [r5, #8]
    717e:	2a00      	cmp	r2, #0
    7180:	d030      	beq.n	71e4 <gpio_nrfx_config+0x134>
    7182:	fa06 f204 	lsl.w	r2, r6, r4
    7186:	4313      	orrs	r3, r2
    7188:	60ab      	str	r3, [r5, #8]
    718a:	696b      	ldr	r3, [r5, #20]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    718c:	fa06 f204 	lsl.w	r2, r6, r4
    7190:	f017 0f20 	tst.w	r7, #32
    7194:	bf14      	ite	ne
    7196:	4313      	orrne	r3, r2
    7198:	4393      	biceq	r3, r2
    719a:	616b      	str	r3, [r5, #20]
    719c:	69ab      	ldr	r3, [r5, #24]
		WRITE_BIT(data->double_edge, curr_pin,
    719e:	fa06 f204 	lsl.w	r2, r6, r4
    71a2:	f017 0f40 	tst.w	r7, #64	; 0x40
    71a6:	bf14      	ite	ne
    71a8:	4313      	orrne	r3, r2
    71aa:	4393      	biceq	r3, r2
    71ac:	61ab      	str	r3, [r5, #24]
    71ae:	692b      	ldr	r3, [r5, #16]
		WRITE_BIT(data->active_level, curr_pin,
    71b0:	fa06 f204 	lsl.w	r2, r6, r4
    71b4:	f017 0f04 	tst.w	r7, #4
    71b8:	bf14      	ite	ne
    71ba:	4313      	orrne	r3, r2
    71bc:	4393      	biceq	r3, r2
    71be:	612b      	str	r3, [r5, #16]
    71c0:	69eb      	ldr	r3, [r5, #28]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    71c2:	f017 0f80 	tst.w	r7, #128	; 0x80
    71c6:	fa06 f204 	lsl.w	r2, r6, r4
    71ca:	bf14      	ite	ne
    71cc:	4313      	orrne	r3, r2
    71ce:	4393      	biceq	r3, r2
    71d0:	61eb      	str	r3, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    71d2:	4621      	mov	r1, r4
    71d4:	4648      	mov	r0, r9
    71d6:	f7ff fec7 	bl	6f68 <gpiote_pin_int_cfg>
		if (res != 0) {
    71da:	2800      	cmp	r0, #0
    71dc:	d19e      	bne.n	711c <gpio_nrfx_config+0x6c>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    71de:	3401      	adds	r4, #1
    71e0:	b2e4      	uxtb	r4, r4
    71e2:	e798      	b.n	7116 <gpio_nrfx_config+0x66>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    71e4:	fa06 f204 	lsl.w	r2, r6, r4
    71e8:	ea23 0302 	bic.w	r3, r3, r2
    71ec:	e7cc      	b.n	7188 <gpio_nrfx_config+0xd8>

000071ee <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    71ee:	2901      	cmp	r1, #1
{
    71f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    71f4:	bf18      	it	ne
    71f6:	b2d4      	uxtbne	r4, r2
    71f8:	6887      	ldr	r7, [r0, #8]
{
    71fa:	4606      	mov	r6, r0
		to_pin   = pin;
    71fc:	bf12      	itee	ne
    71fe:	4625      	movne	r5, r4
		to_pin   = 31U;
    7200:	251f      	moveq	r5, #31
		from_pin = 0U;
    7202:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    7204:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    7208:	42ac      	cmp	r4, r5
    720a:	d902      	bls.n	7212 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
    720c:	2000      	movs	r0, #0
}
    720e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    7212:	68fb      	ldr	r3, [r7, #12]
    7214:	fa08 f204 	lsl.w	r2, r8, r4
    7218:	ea23 0302 	bic.w	r3, r3, r2
    721c:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    721e:	4621      	mov	r1, r4
    7220:	4630      	mov	r0, r6
    7222:	f7ff fea1 	bl	6f68 <gpiote_pin_int_cfg>
		if (res != 0) {
    7226:	2800      	cmp	r0, #0
    7228:	d1f1      	bne.n	720e <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    722a:	3401      	adds	r4, #1
    722c:	b2e4      	uxtb	r4, r4
    722e:	e7eb      	b.n	7208 <gpio_nrfx_pin_disable_callback+0x1a>

00007230 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    7230:	2901      	cmp	r1, #1
{
    7232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    7236:	bf18      	it	ne
    7238:	b2d4      	uxtbne	r4, r2
    723a:	6887      	ldr	r7, [r0, #8]
{
    723c:	4606      	mov	r6, r0
		to_pin   = pin;
    723e:	bf12      	itee	ne
    7240:	4625      	movne	r5, r4
		to_pin   = 31U;
    7242:	251f      	moveq	r5, #31
		from_pin = 0U;
    7244:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    7246:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    724a:	42ac      	cmp	r4, r5
    724c:	d902      	bls.n	7254 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
    724e:	2000      	movs	r0, #0
}
    7250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    7254:	68fb      	ldr	r3, [r7, #12]
    7256:	fa08 f204 	lsl.w	r2, r8, r4
    725a:	4313      	orrs	r3, r2
    725c:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    725e:	4621      	mov	r1, r4
    7260:	4630      	mov	r0, r6
    7262:	f7ff fe81 	bl	6f68 <gpiote_pin_int_cfg>
		if (res != 0) {
    7266:	2800      	cmp	r0, #0
    7268:	d1f2      	bne.n	7250 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    726a:	3401      	adds	r4, #1
    726c:	b2e4      	uxtb	r4, r4
    726e:	e7ec      	b.n	724a <gpio_nrfx_pin_enable_callback+0x1a>

00007270 <pwm_nrf5_sw_pin_set>:
	return i;
}

static int pwm_nrf5_sw_pin_set(struct device *dev, u32_t pwm,
			       u32_t period_cycles, u32_t pulse_cycles)
{
    7270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t ppi_index;
	u8_t channel;
	u16_t div;
	u32_t ret;

	config = (struct pwm_config *)dev->config->config_info;
    7274:	6804      	ldr	r4, [r0, #0]
	timer = config->timer;
	data = dev->driver_data;
    7276:	6885      	ldr	r5, [r0, #8]
	config = (struct pwm_config *)dev->config->config_info;
    7278:	f8d4 c008 	ldr.w	ip, [r4, #8]
{
    727c:	b087      	sub	sp, #28

	/* check if requested period is allowed while other channels are
	 * active.
	 */
	ret = pwm_period_check(data, config->map_size, pwm, period_cycles,
    727e:	f89c 6006 	ldrb.w	r6, [ip, #6]
	if ((pulse_cycles == 0) || (pulse_cycles == period_cycles)) {
    7282:	b133      	cbz	r3, 7292 <pwm_nrf5_sw_pin_set+0x22>
    7284:	429a      	cmp	r2, r3
    7286:	d004      	beq.n	7292 <pwm_nrf5_sw_pin_set+0x22>
    7288:	4628      	mov	r0, r5
    728a:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
	for (i = 0U; i < map_size; i++) {
    728e:	4287      	cmp	r7, r0
    7290:	d106      	bne.n	72a0 <pwm_nrf5_sw_pin_set+0x30>
	if ((pulse_cycles == 0) || (pulse_cycles == period_cycles)) {
    7292:	2000      	movs	r0, #0
    7294:	b2c4      	uxtb	r4, r0
	for (i = 0U; i < map_size; i++) {
    7296:	42a6      	cmp	r6, r4
    7298:	d80d      	bhi.n	72b6 <pwm_nrf5_sw_pin_set+0x46>
    729a:	1e74      	subs	r4, r6, #1
    729c:	b2e4      	uxtb	r4, r4
    729e:	e051      	b.n	7344 <pwm_nrf5_sw_pin_set+0xd4>
		if ((data->map[i].pwm != pwm) &&
    72a0:	6844      	ldr	r4, [r0, #4]
    72a2:	42a1      	cmp	r1, r4
    72a4:	d005      	beq.n	72b2 <pwm_nrf5_sw_pin_set+0x42>
    72a6:	6884      	ldr	r4, [r0, #8]
    72a8:	b11c      	cbz	r4, 72b2 <pwm_nrf5_sw_pin_set+0x42>
		    (data->map[i].pulse_cycles != 0) &&
    72aa:	682c      	ldr	r4, [r5, #0]
    72ac:	42a2      	cmp	r2, r4
    72ae:	f040 80a8 	bne.w	7402 <pwm_nrf5_sw_pin_set+0x192>
    72b2:	3008      	adds	r0, #8
    72b4:	e7eb      	b.n	728e <pwm_nrf5_sw_pin_set+0x1e>
    72b6:	3001      	adds	r0, #1
		if (pwm == data->map[i].pwm) {
    72b8:	eb05 07c0 	add.w	r7, r5, r0, lsl #3
    72bc:	f857 7c04 	ldr.w	r7, [r7, #-4]
    72c0:	42b9      	cmp	r1, r7
    72c2:	d1e7      	bne.n	7294 <pwm_nrf5_sw_pin_set+0x24>

	LOG_DBG("PWM %d, period %u, pulse %u", pwm,
			period_cycles, pulse_cycles);

	/* clear GPIOTE config */
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0;
    72c4:	f89c 7004 	ldrb.w	r7, [ip, #4]
	timer = config->timer;
    72c8:	f8dc e000 	ldr.w	lr, [ip]
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0;
    72cc:	4427      	add	r7, r4
    72ce:	00bf      	lsls	r7, r7, #2
    72d0:	f107 4080 	add.w	r0, r7, #1073741824	; 0x40000000
    72d4:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    72d8:	4607      	mov	r7, r0
    72da:	9001      	str	r0, [sp, #4]
    72dc:	2000      	movs	r0, #0
    72de:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

	/* clear PPI used */
	ppi_index = config->ppi_base + (channel << 1);
    72e2:	f89c c005 	ldrb.w	ip, [ip, #5]
    72e6:	eb0c 0c44 	add.w	ip, ip, r4, lsl #1
    72ea:	fa5f fa8c 	uxtb.w	sl, ip
	NRF_PPI->CHENCLR = BIT(ppi_index) | BIT(ppi_index + 1);
    72ee:	f10a 0801 	add.w	r8, sl, #1
    72f2:	f04f 0c01 	mov.w	ip, #1
    72f6:	fa0c f808 	lsl.w	r8, ip, r8
    72fa:	fa0c f90a 	lsl.w	r9, ip, sl
    72fe:	ea48 0009 	orr.w	r0, r8, r9
    7302:	9002      	str	r0, [sp, #8]

	/* configure GPIO pin as output */
	NRF_GPIO->DIRSET = BIT(pwm);
    7304:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
	NRF_PPI->CHENCLR = BIT(ppi_index) | BIT(ppi_index + 1);
    7308:	4840      	ldr	r0, [pc, #256]	; (740c <pwm_nrf5_sw_pin_set+0x19c>)
    730a:	9f02      	ldr	r7, [sp, #8]
    730c:	f8c0 7508 	str.w	r7, [r0, #1288]	; 0x508
	NRF_GPIO->DIRSET = BIT(pwm);
    7310:	fa0c f901 	lsl.w	r9, ip, r1
    7314:	f8c8 9518 	str.w	r9, [r8, #1304]	; 0x518
	if (pulse_cycles == 0) {
    7318:	b9e3      	cbnz	r3, 7354 <pwm_nrf5_sw_pin_set+0xe4>
		/* 0% duty cycle, keep pin low */
		NRF_GPIO->OUTCLR = BIT(pwm);
    731a:	f8c8 950c 	str.w	r9, [r8, #1292]	; 0x50c
	data->map[channel].pulse_cycles = pulse_cycles;

	return 0;

pin_set_pwm_off:
	data->map[channel].pulse_cycles = 0U;
    731e:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
    7322:	2300      	movs	r3, #0
    7324:	60a3      	str	r3, [r4, #8]
    7326:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
	bool pwm_active = false;

	/* stop timer if all channels are inactive */
	for (channel = 0U; channel < config->map_size; channel++) {
    732a:	42ae      	cmp	r6, r5
    732c:	d164      	bne.n	73f8 <pwm_nrf5_sw_pin_set+0x188>
		}
	}

	if (!pwm_active) {
		/* No active PWM, stop timer */
		timer->TASKS_STOP = 1;
    732e:	2301      	movs	r3, #1
    7330:	f8ce 3004 	str.w	r3, [lr, #4]
    7334:	e05e      	b.n	73f4 <pwm_nrf5_sw_pin_set+0x184>
		if (data->map[i].pulse_cycles == 0) {
    7336:	eb05 07c4 	add.w	r7, r5, r4, lsl #3
    733a:	1e60      	subs	r0, r4, #1
    733c:	68bf      	ldr	r7, [r7, #8]
    733e:	b2c0      	uxtb	r0, r0
    7340:	b12f      	cbz	r7, 734e <pwm_nrf5_sw_pin_set+0xde>
    7342:	4604      	mov	r4, r0
	while (i--) {
    7344:	2cff      	cmp	r4, #255	; 0xff
    7346:	d1f6      	bne.n	7336 <pwm_nrf5_sw_pin_set+0xc6>
		return -ENOMEM;
    7348:	f06f 000b 	mvn.w	r0, #11
    734c:	e05b      	b.n	7406 <pwm_nrf5_sw_pin_set+0x196>
	if (channel >= config->map_size) {
    734e:	42a6      	cmp	r6, r4
    7350:	d8b8      	bhi.n	72c4 <pwm_nrf5_sw_pin_set+0x54>
    7352:	e7f9      	b.n	7348 <pwm_nrf5_sw_pin_set+0xd8>
	} else if (pulse_cycles == period_cycles) {
    7354:	429a      	cmp	r2, r3
    7356:	d102      	bne.n	735e <pwm_nrf5_sw_pin_set+0xee>
		NRF_GPIO->OUTSET = BIT(pwm);
    7358:	f8c8 9508 	str.w	r9, [r8, #1288]	; 0x508
		goto pin_set_pwm_off;
    735c:	e7df      	b.n	731e <pwm_nrf5_sw_pin_set+0xae>
    735e:	fa0f fb84 	sxth.w	fp, r4
    7362:	ea4f 008b 	mov.w	r0, fp, lsl #2
		NRF_GPIO->OUTCLR = BIT(pwm);
    7366:	f8c8 950c 	str.w	r9, [r8, #1292]	; 0x50c
    736a:	9004      	str	r0, [sp, #16]
    736c:	4470      	add	r0, lr
	timer->EVENTS_COMPARE[channel] = 0;
    736e:	2700      	movs	r7, #0
	div = period_cycles >> 16;
    7370:	ea4f 4812 	mov.w	r8, r2, lsr #16
	timer->EVENTS_COMPARE[channel] = 0;
    7374:	f8c0 7140 	str.w	r7, [r0, #320]	; 0x140
    7378:	9003      	str	r0, [sp, #12]
	timer->CC[channel] = pulse_cycles >> div;
    737a:	fa23 f008 	lsr.w	r0, r3, r8
    737e:	eb0e 0986 	add.w	r9, lr, r6, lsl #2
    7382:	9005      	str	r0, [sp, #20]
    7384:	9803      	ldr	r0, [sp, #12]
	timer->EVENTS_COMPARE[config->map_size] = 0;
    7386:	f8c9 7140 	str.w	r7, [r9, #320]	; 0x140
	timer->CC[channel] = pulse_cycles >> div;
    738a:	4607      	mov	r7, r0
	timer->CC[config->map_size] = period_cycles >> div;
    738c:	fa22 f808 	lsr.w	r8, r2, r8
	timer->CC[channel] = pulse_cycles >> div;
    7390:	9805      	ldr	r0, [sp, #20]
    7392:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
	timer->CC[config->map_size] = period_cycles >> div;
    7396:	f8c9 8540 	str.w	r8, [r9, #1344]	; 0x540
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    739a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 7410 <pwm_nrf5_sw_pin_set+0x1a0>
    739e:	9801      	ldr	r0, [sp, #4]
	timer->TASKS_CLEAR = 1;
    73a0:	f8ce c00c 	str.w	ip, [lr, #12]
    73a4:	ea4f 07ca 	mov.w	r7, sl, lsl #3
	NRF_GPIOTE->CONFIG[config->gpiote_base + channel] = 0x00130003 |
    73a8:	ea48 2801 	orr.w	r8, r8, r1, lsl #8
    73ac:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
    73b0:	f8c0 8510 	str.w	r8, [r0, #1296]	; 0x510
    73b4:	f507 37f8 	add.w	r7, r7, #126976	; 0x1f000
	NRF_PPI->CH[ppi_index].TEP = (u32_t)
    73b8:	9804      	ldr	r0, [sp, #16]
				     &(timer->EVENTS_COMPARE[channel]);
    73ba:	3450      	adds	r4, #80	; 0x50
    73bc:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
	NRF_PPI->CH[ppi_index].EEP = (u32_t)
    73c0:	f8c7 4510 	str.w	r4, [r7, #1296]	; 0x510
					 &(timer->EVENTS_COMPARE[
    73c4:	3650      	adds	r6, #80	; 0x50
	NRF_PPI->CH[ppi_index].TEP = (u32_t)
    73c6:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000
    73ca:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
					 &(timer->EVENTS_COMPARE[
    73ce:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
	NRF_PPI->CHENSET = BIT(ppi_index) | BIT(ppi_index + 1);
    73d2:	480e      	ldr	r0, [pc, #56]	; (740c <pwm_nrf5_sw_pin_set+0x19c>)
	NRF_PPI->CH[ppi_index].TEP = (u32_t)
    73d4:	f8c7 4514 	str.w	r4, [r7, #1300]	; 0x514
	NRF_PPI->CH[ppi_index + 1].EEP = (u32_t)
    73d8:	f8c7 6518 	str.w	r6, [r7, #1304]	; 0x518
	NRF_PPI->CH[ppi_index + 1].TEP = (u32_t)
    73dc:	f8c7 451c 	str.w	r4, [r7, #1308]	; 0x51c
	NRF_PPI->CHENSET = BIT(ppi_index) | BIT(ppi_index + 1);
    73e0:	9c02      	ldr	r4, [sp, #8]
    73e2:	f8c0 4504 	str.w	r4, [r0, #1284]	; 0x504
	timer->TASKS_START = 1;
    73e6:	f8ce c000 	str.w	ip, [lr]
	data->period_cycles = period_cycles;
    73ea:	602a      	str	r2, [r5, #0]
    73ec:	eb05 05cb 	add.w	r5, r5, fp, lsl #3
	data->map[channel].pwm = pwm;
    73f0:	6069      	str	r1, [r5, #4]
	data->map[channel].pulse_cycles = pulse_cycles;
    73f2:	60ab      	str	r3, [r5, #8]
	}

	return 0;
    73f4:	2000      	movs	r0, #0
    73f6:	e006      	b.n	7406 <pwm_nrf5_sw_pin_set+0x196>
		if (data->map[channel].pulse_cycles) {
    73f8:	f855 3f08 	ldr.w	r3, [r5, #8]!
    73fc:	2b00      	cmp	r3, #0
    73fe:	d094      	beq.n	732a <pwm_nrf5_sw_pin_set+0xba>
    7400:	e7f8      	b.n	73f4 <pwm_nrf5_sw_pin_set+0x184>
		return ret;
    7402:	f06f 0015 	mvn.w	r0, #21
}
    7406:	b007      	add	sp, #28
    7408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    740c:	4001f000 	.word	0x4001f000
    7410:	00130003 	.word	0x00130003

00007414 <pwm_nrf5_sw_get_cycles_per_sec>:
static int pwm_nrf5_sw_get_cycles_per_sec(struct device *dev, u32_t pwm,
					  u64_t *cycles)
{
	struct pwm_config *config;

	config = (struct pwm_config *)dev->config->config_info;
    7414:	6803      	ldr	r3, [r0, #0]

	/* HF timer frequency is derived from 16MHz source with a prescaler */
	*cycles = 16000000UL / BIT(config->prescaler);
    7416:	689b      	ldr	r3, [r3, #8]
    7418:	79d9      	ldrb	r1, [r3, #7]
    741a:	4b03      	ldr	r3, [pc, #12]	; (7428 <pwm_nrf5_sw_get_cycles_per_sec+0x14>)
    741c:	2000      	movs	r0, #0
    741e:	40cb      	lsrs	r3, r1
    7420:	6013      	str	r3, [r2, #0]
    7422:	6050      	str	r0, [r2, #4]

	return 0;
}
    7424:	4770      	bx	lr
    7426:	bf00      	nop
    7428:	00f42400 	.word	0x00f42400

0000742c <pwm_nrf5_sw_init>:
static int pwm_nrf5_sw_init(struct device *dev)
{
	struct pwm_config *config;
	NRF_TIMER_Type *timer;

	config = (struct pwm_config *)dev->config->config_info;
    742c:	6803      	ldr	r3, [r0, #0]
    742e:	689a      	ldr	r2, [r3, #8]
	timer = config->timer;
    7430:	6813      	ldr	r3, [r2, #0]

	/* setup HF timer */
	timer->MODE = TIMER_MODE_MODE_Timer;
    7432:	2000      	movs	r0, #0
    7434:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	timer->PRESCALER = config->prescaler;
    7438:	79d2      	ldrb	r2, [r2, #7]
    743a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	timer->BITMODE = TIMER_BITMODE_BITMODE_16Bit;

	/* TODO: set shorts according to map_size if not 3, i.e. if NRF_TIMER
	 * supports more than 4 compares, then more channels can be supported.
	 */
	timer->SHORTS = TIMER_SHORTS_COMPARE3_CLEAR_Msk;
    743e:	2208      	movs	r2, #8
	timer->BITMODE = TIMER_BITMODE_BITMODE_16Bit;
    7440:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	timer->SHORTS = TIMER_SHORTS_COMPARE3_CLEAR_Msk;
    7444:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	return 0;
}
    7448:	4770      	bx	lr
	...

0000744c <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    744c:	4b03      	ldr	r3, [pc, #12]	; (745c <uart_nrfx_err_check+0x10>)
    744e:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0U;

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
    7450:	b118      	cbz	r0, 745a <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    7452:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
    7456:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(uart0_addr);
	}

	return error;
}
    745a:	4770      	bx	lr
    745c:	40002124 	.word	0x40002124

00007460 <uart_nrfx_config_get>:
	return 0;
}

static int uart_nrfx_config_get(struct device *dev, struct uart_config *cfg)
{
	*cfg = get_dev_data(dev)->uart_config;
    7460:	6882      	ldr	r2, [r0, #8]
{
    7462:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    7464:	e892 0003 	ldmia.w	r2, {r0, r1}
    7468:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
}
    746c:	2000      	movs	r0, #0
    746e:	4770      	bx	lr

00007470 <uart_nrfx_configure>:
{
    7470:	b530      	push	{r4, r5, lr}
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    7472:	794b      	ldrb	r3, [r1, #5]
    7474:	2b01      	cmp	r3, #1
    7476:	d120      	bne.n	74ba <uart_nrfx_configure+0x4a>
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    7478:	798b      	ldrb	r3, [r1, #6]
    747a:	2b03      	cmp	r3, #3
    747c:	d11d      	bne.n	74ba <uart_nrfx_configure+0x4a>
	switch (cfg->flow_ctrl) {
    747e:	79cc      	ldrb	r4, [r1, #7]
    7480:	b12c      	cbz	r4, 748e <uart_nrfx_configure+0x1e>
    7482:	2c01      	cmp	r4, #1
    7484:	d119      	bne.n	74ba <uart_nrfx_configure+0x4a>
	return dev->config->config_info;
    7486:	6803      	ldr	r3, [r0, #0]
		if (get_dev_config(dev)->rts_cts_pins_set) {
    7488:	689b      	ldr	r3, [r3, #8]
    748a:	781b      	ldrb	r3, [r3, #0]
    748c:	b1ab      	cbz	r3, 74ba <uart_nrfx_configure+0x4a>
	switch (cfg->parity) {
    748e:	790a      	ldrb	r2, [r1, #4]
    7490:	b112      	cbz	r2, 7498 <uart_nrfx_configure+0x28>
    7492:	2a02      	cmp	r2, #2
    7494:	d111      	bne.n	74ba <uart_nrfx_configure+0x4a>
		parity = NRF_UART_PARITY_INCLUDED;
    7496:	220e      	movs	r2, #14
	switch (baudrate) {
    7498:	680b      	ldr	r3, [r1, #0]
    749a:	f647 2512 	movw	r5, #31250	; 0x7a12
    749e:	42ab      	cmp	r3, r5
    74a0:	d06c      	beq.n	757c <uart_nrfx_configure+0x10c>
    74a2:	d827      	bhi.n	74f4 <uart_nrfx_configure+0x84>
    74a4:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    74a8:	d061      	beq.n	756e <uart_nrfx_configure+0xfe>
    74aa:	d812      	bhi.n	74d2 <uart_nrfx_configure+0x62>
    74ac:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    74b0:	d04c      	beq.n	754c <uart_nrfx_configure+0xdc>
    74b2:	d805      	bhi.n	74c0 <uart_nrfx_configure+0x50>
    74b4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    74b8:	d070      	beq.n	759c <uart_nrfx_configure+0x12c>
		return -ENOTSUP;
    74ba:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    74be:	bd30      	pop	{r4, r5, pc}
	switch (baudrate) {
    74c0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    74c4:	d050      	beq.n	7568 <uart_nrfx_configure+0xf8>
    74c6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    74ca:	d1f6      	bne.n	74ba <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    74cc:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    74d0:	e03e      	b.n	7550 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    74d2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    74d6:	d04c      	beq.n	7572 <uart_nrfx_configure+0x102>
    74d8:	d804      	bhi.n	74e4 <uart_nrfx_configure+0x74>
    74da:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    74de:	d1ec      	bne.n	74ba <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    74e0:	4b30      	ldr	r3, [pc, #192]	; (75a4 <uart_nrfx_configure+0x134>)
    74e2:	e035      	b.n	7550 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    74e4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    74e8:	d046      	beq.n	7578 <uart_nrfx_configure+0x108>
    74ea:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    74ee:	d1e4      	bne.n	74ba <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    74f0:	4b2d      	ldr	r3, [pc, #180]	; (75a8 <uart_nrfx_configure+0x138>)
    74f2:	e02d      	b.n	7550 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    74f4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    74f8:	d048      	beq.n	758c <uart_nrfx_configure+0x11c>
    74fa:	d811      	bhi.n	7520 <uart_nrfx_configure+0xb0>
    74fc:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    7500:	42ab      	cmp	r3, r5
    7502:	d03e      	beq.n	7582 <uart_nrfx_configure+0x112>
    7504:	d804      	bhi.n	7510 <uart_nrfx_configure+0xa0>
    7506:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    750a:	d1d6      	bne.n	74ba <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    750c:	4b27      	ldr	r3, [pc, #156]	; (75ac <uart_nrfx_configure+0x13c>)
    750e:	e01f      	b.n	7550 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    7510:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    7514:	d038      	beq.n	7588 <uart_nrfx_configure+0x118>
    7516:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    751a:	d1ce      	bne.n	74ba <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    751c:	4b24      	ldr	r3, [pc, #144]	; (75b0 <uart_nrfx_configure+0x140>)
    751e:	e017      	b.n	7550 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    7520:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    7524:	d036      	beq.n	7594 <uart_nrfx_configure+0x124>
    7526:	d808      	bhi.n	753a <uart_nrfx_configure+0xca>
    7528:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    752c:	d030      	beq.n	7590 <uart_nrfx_configure+0x120>
    752e:	4d21      	ldr	r5, [pc, #132]	; (75b4 <uart_nrfx_configure+0x144>)
    7530:	42ab      	cmp	r3, r5
    7532:	d1c2      	bne.n	74ba <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    7534:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    7538:	e00a      	b.n	7550 <uart_nrfx_configure+0xe0>
	switch (baudrate) {
    753a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    753e:	d02b      	beq.n	7598 <uart_nrfx_configure+0x128>
    7540:	4d1d      	ldr	r5, [pc, #116]	; (75b8 <uart_nrfx_configure+0x148>)
    7542:	42ab      	cmp	r3, r5
    7544:	d1b9      	bne.n	74ba <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    7546:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    754a:	e001      	b.n	7550 <uart_nrfx_configure+0xe0>
		nrf_baudrate = 0x00027000;
    754c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    7550:	4d1a      	ldr	r5, [pc, #104]	; (75bc <uart_nrfx_configure+0x14c>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    7552:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
    7554:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    7558:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
	get_dev_data(dev)->uart_config = *cfg;
    755c:	6883      	ldr	r3, [r0, #8]
    755e:	c903      	ldmia	r1, {r0, r1}
    7560:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    7564:	2000      	movs	r0, #0
    7566:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    7568:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    756c:	e7f0      	b.n	7550 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    756e:	4b14      	ldr	r3, [pc, #80]	; (75c0 <uart_nrfx_configure+0x150>)
    7570:	e7ee      	b.n	7550 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    7572:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    7576:	e7eb      	b.n	7550 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    7578:	4b12      	ldr	r3, [pc, #72]	; (75c4 <uart_nrfx_configure+0x154>)
    757a:	e7e9      	b.n	7550 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    757c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    7580:	e7e6      	b.n	7550 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    7582:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    7586:	e7e3      	b.n	7550 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    7588:	4b0f      	ldr	r3, [pc, #60]	; (75c8 <uart_nrfx_configure+0x158>)
    758a:	e7e1      	b.n	7550 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    758c:	4b0f      	ldr	r3, [pc, #60]	; (75cc <uart_nrfx_configure+0x15c>)
    758e:	e7df      	b.n	7550 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    7590:	4b0f      	ldr	r3, [pc, #60]	; (75d0 <uart_nrfx_configure+0x160>)
    7592:	e7dd      	b.n	7550 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    7594:	4b0f      	ldr	r3, [pc, #60]	; (75d4 <uart_nrfx_configure+0x164>)
    7596:	e7db      	b.n	7550 <uart_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    7598:	4b0f      	ldr	r3, [pc, #60]	; (75d8 <uart_nrfx_configure+0x168>)
    759a:	e7d9      	b.n	7550 <uart_nrfx_configure+0xe0>
		nrf_baudrate = 0x00014000;
    759c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    75a0:	e7d6      	b.n	7550 <uart_nrfx_configure+0xe0>
    75a2:	bf00      	nop
    75a4:	00275000 	.word	0x00275000
    75a8:	0075f000 	.word	0x0075f000
    75ac:	009d5000 	.word	0x009d5000
    75b0:	013a9000 	.word	0x013a9000
    75b4:	0003d090 	.word	0x0003d090
    75b8:	000f4240 	.word	0x000f4240
    75bc:	40002000 	.word	0x40002000
    75c0:	0013b000 	.word	0x0013b000
    75c4:	004ea000 	.word	0x004ea000
    75c8:	00ebf000 	.word	0x00ebf000
    75cc:	01d7e000 	.word	0x01d7e000
    75d0:	03afb000 	.word	0x03afb000
    75d4:	075f7000 	.word	0x075f7000
    75d8:	0ebed000 	.word	0x0ebed000

000075dc <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    75dc:	4b08      	ldr	r3, [pc, #32]	; (7600 <uart_nrfx_poll_in+0x24>)
    75de:	681a      	ldr	r2, [r3, #0]
{
    75e0:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    75e2:	b152      	cbz	r2, 75fa <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    75e4:	2000      	movs	r0, #0
    75e6:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    75e8:	681b      	ldr	r3, [r3, #0]
    75ea:	9301      	str	r3, [sp, #4]
    (void)dummy;
    75ec:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
    75ee:	4b05      	ldr	r3, [pc, #20]	; (7604 <uart_nrfx_poll_in+0x28>)
    75f0:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    75f4:	700b      	strb	r3, [r1, #0]
}
    75f6:	b002      	add	sp, #8
    75f8:	4770      	bx	lr
		return -1;
    75fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    75fe:	e7fa      	b.n	75f6 <uart_nrfx_poll_in+0x1a>
    7600:	40002108 	.word	0x40002108
    7604:	40002000 	.word	0x40002000

00007608 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7608:	4b09      	ldr	r3, [pc, #36]	; (7630 <uart_nrfx_poll_out+0x28>)
    760a:	2200      	movs	r2, #0
    760c:	601a      	str	r2, [r3, #0]
{
    760e:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    7610:	681a      	ldr	r2, [r3, #0]
    7612:	9201      	str	r2, [sp, #4]
    (void)dummy;
    7614:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7616:	4a07      	ldr	r2, [pc, #28]	; (7634 <uart_nrfx_poll_out+0x2c>)
    7618:	2001      	movs	r0, #1
    761a:	6010      	str	r0, [r2, #0]
    p_reg->TXD = txd;
    761c:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7620:	681a      	ldr	r2, [r3, #0]
	while (!event_txdrdy_check()) {
    7622:	2a00      	cmp	r2, #0
    7624:	d0fc      	beq.n	7620 <uart_nrfx_poll_out+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7626:	4b04      	ldr	r3, [pc, #16]	; (7638 <uart_nrfx_poll_out+0x30>)
    7628:	2201      	movs	r2, #1
    762a:	601a      	str	r2, [r3, #0]
}
    762c:	b002      	add	sp, #8
    762e:	4770      	bx	lr
    7630:	4000211c 	.word	0x4000211c
    7634:	40002008 	.word	0x40002008
    7638:	4000200c 	.word	0x4000200c

0000763c <uart_nrfx_init>:
    p_reg->OUTSET = set_mask;
    763c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
    7640:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSELRXD = pselrxd;
    7642:	4c16      	ldr	r4, [pc, #88]	; (769c <uart_nrfx_init+0x60>)
    7644:	2240      	movs	r2, #64	; 0x40
    7646:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    764a:	2103      	movs	r1, #3
    764c:	2200      	movs	r2, #0
    764e:	2508      	movs	r5, #8
    7650:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
    7654:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    7658:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
    765c:	2506      	movs	r5, #6
    765e:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    7662:	2520      	movs	r5, #32
    7664:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    7668:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
    766c:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSELRTS = pselrts;
    7670:	2305      	movs	r3, #5
    7672:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSELCTS = pselcts;
    7676:	2307      	movs	r3, #7
    7678:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
			       DT_NORDIC_NRF_UART_UART_0_RTS_PIN,
			       DT_NORDIC_NRF_UART_UART_0_CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    767c:	6881      	ldr	r1, [r0, #8]
    767e:	f7ff fef7 	bl	7470 <uart_nrfx_configure>
	if (err) {
    7682:	b948      	cbnz	r0, 7698 <uart_nrfx_init+0x5c>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    7684:	2304      	movs	r3, #4
    7686:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    768a:	4b05      	ldr	r3, [pc, #20]	; (76a0 <uart_nrfx_init+0x64>)
    768c:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    768e:	681b      	ldr	r3, [r3, #0]
    7690:	9301      	str	r3, [sp, #4]
    (void)dummy;
    7692:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7694:	2301      	movs	r3, #1
    7696:	6023      	str	r3, [r4, #0]
		    0);
	irq_enable(DT_NORDIC_NRF_UART_UART_0_IRQ);
#endif

	return 0;
}
    7698:	b003      	add	sp, #12
    769a:	bd30      	pop	{r4, r5, pc}
    769c:	40002000 	.word	0x40002000
    76a0:	40002108 	.word	0x40002108

000076a4 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static u16_t rng_pool_get(struct rng_pool *rngp, u8_t *buf, u16_t len)
{
    76a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t last  = rngp->last;
    76a6:	7883      	ldrb	r3, [r0, #2]
	u32_t mask  = rngp->mask;
    76a8:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
    76aa:	f04f 0520 	mov.w	r5, #32
    76ae:	f3ef 8411 	mrs	r4, BASEPRI
    76b2:	f385 8811 	msr	BASEPRI, r5
	u32_t first, available;
	u32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
    76b6:	7806      	ldrb	r6, [r0, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
    76b8:	f890 c001 	ldrb.w	ip, [r0, #1]

	available = (last - first) & mask;
    76bc:	1b9b      	subs	r3, r3, r6
    76be:	403b      	ands	r3, r7
	if (available < len) {
    76c0:	4293      	cmp	r3, r2
		len = available;
    76c2:	bf38      	it	cc
    76c4:	b29a      	uxthcc	r2, r3

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
    76c6:	eb06 0e02 	add.w	lr, r6, r2
    76ca:	ea07 0e0e 	and.w	lr, r7, lr
	first = rngp->first_alloc;
    76ce:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
    76d0:	f880 e000 	strb.w	lr, [r0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    76d4:	f384 8811 	msr	BASEPRI, r4
    76d8:	440a      	add	r2, r1
	u8_t *dst   = buf;
    76da:	460c      	mov	r4, r1
	irq_unlock(key);

	while (likely(len--)) {
    76dc:	4294      	cmp	r4, r2
    76de:	d116      	bne.n	770e <rng_pool_get+0x6a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
    76e0:	4566      	cmp	r6, ip
    76e2:	d109      	bne.n	76f8 <rng_pool_get+0x54>
	__asm__ volatile(
    76e4:	f04f 0520 	mov.w	r5, #32
    76e8:	f3ef 8211 	mrs	r2, BASEPRI
    76ec:	f385 8811 	msr	BASEPRI, r5
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
    76f0:	7805      	ldrb	r5, [r0, #0]
    76f2:	7045      	strb	r5, [r0, #1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    76f4:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(key);
	}

	len = dst - buf;
    76f8:	1a64      	subs	r4, r4, r1
    76fa:	b2a2      	uxth	r2, r4
	available = available - len;
    76fc:	1a9c      	subs	r4, r3, r2
	if (available <= rngp->threshold) {
    76fe:	7903      	ldrb	r3, [r0, #4]
    7700:	429c      	cmp	r4, r3
    return (uint32_t *)((uint8_t *)NRF_RNG + rng_task);
}

__STATIC_INLINE void nrf_rng_task_trigger(nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
    7702:	bf9e      	ittt	ls
    7704:	4b06      	ldrls	r3, [pc, #24]	; (7720 <rng_pool_get+0x7c>)
    7706:	2101      	movls	r1, #1
    7708:	6019      	strls	r1, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG_TASK_START);
	}

	return len;
}
    770a:	4610      	mov	r0, r2
    770c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
    770e:	eb00 0e05 	add.w	lr, r0, r5
		first = (first + 1) & mask;
    7712:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
    7714:	f89e e005 	ldrb.w	lr, [lr, #5]
    7718:	f804 eb01 	strb.w	lr, [r4], #1
		first = (first + 1) & mask;
    771c:	403d      	ands	r5, r7
    771e:	e7dd      	b.n	76dc <rng_pool_get+0x38>
    7720:	4000d000 	.word	0x4000d000

00007724 <entropy_nrf5_get_entropy>:
		k_sem_give(&entropy_nrf5_data.sem_sync);
	}
}

static int entropy_nrf5_get_entropy(struct device *device, u8_t *buf, u16_t len)
{
    7724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    7728:	4d11      	ldr	r5, [pc, #68]	; (7770 <entropy_nrf5_get_entropy+0x4c>)
    772a:	460e      	mov	r6, r1
    772c:	4614      	mov	r4, r2

	while (len) {
		u16_t bytes;

		k_sem_take(&entropy_nrf5_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    772e:	f105 0845 	add.w	r8, r5, #69	; 0x45
    7732:	f105 0918 	add.w	r9, r5, #24
	while (len) {
    7736:	b914      	cbnz	r4, 773e <entropy_nrf5_get_entropy+0x1a>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
    7738:	4620      	mov	r0, r4
    773a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    773e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7742:	4628      	mov	r0, r5
    7744:	f000 fe00 	bl	8348 <_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    7748:	4622      	mov	r2, r4
    774a:	4631      	mov	r1, r6
    774c:	4640      	mov	r0, r8
    774e:	f7ff ffa9 	bl	76a4 <rng_pool_get>
    7752:	4607      	mov	r7, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    7754:	4628      	mov	r0, r5
    7756:	f000 fdd0 	bl	82fa <_impl_k_sem_give>
		if (bytes == 0) {
    775a:	b92f      	cbnz	r7, 7768 <entropy_nrf5_get_entropy+0x44>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    775c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7760:	4648      	mov	r0, r9
    7762:	f000 fdf1 	bl	8348 <_impl_k_sem_take>
			continue;
    7766:	e7e6      	b.n	7736 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
    7768:	1be4      	subs	r4, r4, r7
    776a:	b2a4      	uxth	r4, r4
		buf += bytes;
    776c:	443e      	add	r6, r7
    776e:	e7e2      	b.n	7736 <entropy_nrf5_get_entropy+0x12>
    7770:	20000d24 	.word	0x20000d24

00007774 <random_byte_get>:
{
    7774:	b082      	sub	sp, #8
	__asm__ volatile(
    7776:	f04f 0320 	mov.w	r3, #32
    777a:	f3ef 8211 	mrs	r2, BASEPRI
    777e:	f383 8811 	msr	BASEPRI, r3
#endif
}

__STATIC_INLINE bool nrf_rng_event_get(nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
    7782:	4b09      	ldr	r3, [pc, #36]	; (77a8 <random_byte_get+0x34>)
    7784:	6819      	ldr	r1, [r3, #0]
	if (nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
    7786:	b161      	cbz	r1, 77a2 <random_byte_get+0x2e>
     NRF_RNG->SHORTS &= ~rng_short_mask;
}

__STATIC_INLINE uint8_t nrf_rng_random_value_get(void)
{
    return (uint8_t)(NRF_RNG->VALUE & RNG_VALUE_VALUE_Msk);
    7788:	4908      	ldr	r1, [pc, #32]	; (77ac <random_byte_get+0x38>)
    778a:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
    778e:	2100      	movs	r1, #0
    7790:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
    7792:	681b      	ldr	r3, [r3, #0]
    7794:	9301      	str	r3, [sp, #4]
    (void)dummy;
    7796:	9b01      	ldr	r3, [sp, #4]
		retval = nrf_rng_random_value_get();
    7798:	b2c0      	uxtb	r0, r0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    779a:	f382 8811 	msr	BASEPRI, r2
}
    779e:	b002      	add	sp, #8
    77a0:	4770      	bx	lr
	int retval = -EAGAIN;
    77a2:	f06f 000a 	mvn.w	r0, #10
    77a6:	e7f8      	b.n	779a <random_byte_get+0x26>
    77a8:	4000d100 	.word	0x4000d100
    77ac:	4000d000 	.word	0x4000d000

000077b0 <entropy_nrf5_get_entropy_isr>:
	u16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
    77b0:	07db      	lsls	r3, r3, #31
{
    77b2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    77b6:	4688      	mov	r8, r1
    77b8:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
    77ba:	d405      	bmi.n	77c8 <entropy_nrf5_get_entropy_isr+0x18>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
    77bc:	481d      	ldr	r0, [pc, #116]	; (7834 <entropy_nrf5_get_entropy_isr+0x84>)
    77be:	f7ff ff71 	bl	76a4 <rng_pool_get>
			irq_enable(RNG_IRQn);
		}
	}

	return cnt;
}
    77c2:	b002      	add	sp, #8
    77c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
    77c8:	b372      	cbz	r2, 7828 <entropy_nrf5_get_entropy_isr+0x78>
	__asm__ volatile(
    77ca:	f04f 0320 	mov.w	r3, #32
    77ce:	f3ef 8511 	mrs	r5, BASEPRI
    77d2:	f383 8811 	msr	BASEPRI, r3
		irq_enabled = irq_is_enabled(RNG_IRQn);
    77d6:	200d      	movs	r0, #13
    77d8:	f7fa f9ca 	bl	1b70 <_arch_irq_is_enabled>
    77dc:	4607      	mov	r7, r0
		irq_disable(RNG_IRQn);
    77de:	200d      	movs	r0, #13
    77e0:	f7fa f9b2 	bl	1b48 <_arch_irq_disable>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    77e4:	f385 8811 	msr	BASEPRI, r5
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
    77e8:	4e13      	ldr	r6, [pc, #76]	; (7838 <entropy_nrf5_get_entropy_isr+0x88>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    77ea:	f8df 9054 	ldr.w	r9, [pc, #84]	; 7840 <entropy_nrf5_get_entropy_isr+0x90>
    77ee:	2200      	movs	r2, #0
    77f0:	6032      	str	r2, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
    77f2:	6832      	ldr	r2, [r6, #0]
    77f4:	9201      	str	r2, [sp, #4]
    (void)dummy;
    77f6:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
    77f8:	4a10      	ldr	r2, [pc, #64]	; (783c <entropy_nrf5_get_entropy_isr+0x8c>)
    77fa:	2101      	movs	r1, #1
    77fc:	6011      	str	r1, [r2, #0]
    77fe:	4625      	mov	r5, r4
    7800:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
    7804:	6833      	ldr	r3, [r6, #0]
			while (!nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
    7806:	b18b      	cbz	r3, 782c <entropy_nrf5_get_entropy_isr+0x7c>
			byte = random_byte_get();
    7808:	f7ff ffb4 	bl	7774 <random_byte_get>
			if (byte < 0) {
    780c:	2800      	cmp	r0, #0
    780e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    7812:	dbf7      	blt.n	7804 <entropy_nrf5_get_entropy_isr+0x54>
			buf[--len] = byte;
    7814:	3d01      	subs	r5, #1
    7816:	b2ad      	uxth	r5, r5
    7818:	f808 0005 	strb.w	r0, [r8, r5]
		} while (len);
    781c:	2d00      	cmp	r5, #0
    781e:	d1f1      	bne.n	7804 <entropy_nrf5_get_entropy_isr+0x54>
		if (irq_enabled) {
    7820:	b117      	cbz	r7, 7828 <entropy_nrf5_get_entropy_isr+0x78>
			irq_enable(RNG_IRQn);
    7822:	200d      	movs	r0, #13
    7824:	f7fa f980 	bl	1b28 <_arch_irq_enable>
	return cnt;
    7828:	4620      	mov	r0, r4
    782a:	e7ca      	b.n	77c2 <entropy_nrf5_get_entropy_isr+0x12>
				__WFE();
    782c:	bf20      	wfe
				__SEV();
    782e:	bf40      	sev
				__WFE();
    7830:	bf20      	wfe
    7832:	e7e7      	b.n	7804 <entropy_nrf5_get_entropy_isr+0x54>
    7834:	20000d54 	.word	0x20000d54
    7838:	4000d100 	.word	0x4000d100
    783c:	4000d000 	.word	0x4000d000
    7840:	e000e100 	.word	0xe000e100

00007844 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    7844:	b537      	push	{r0, r1, r2, r4, r5, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    7846:	4c20      	ldr	r4, [pc, #128]	; (78c8 <entropy_nrf5_init+0x84>)
    7848:	2201      	movs	r2, #1
    784a:	4611      	mov	r1, r2
    784c:	4620      	mov	r0, r4
    784e:	f000 fd4b 	bl	82e8 <_impl_k_sem_init>
    7852:	f104 0018 	add.w	r0, r4, #24
    7856:	2201      	movs	r2, #1
    7858:	2100      	movs	r1, #0
    785a:	f000 fd45 	bl	82e8 <_impl_k_sem_init>
	rngp->mask	  = size - 1;
    785e:	2307      	movs	r3, #7
    7860:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	rngp->threshold	  = threshold;
    7864:	2304      	movs	r3, #4
    7866:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	rngp->mask	  = size - 1;
    786a:	230f      	movs	r3, #15
    786c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	rngp->threshold	  = threshold;
    7870:	230c      	movs	r3, #12
	rngp->first_alloc = 0U;
    7872:	2500      	movs	r5, #0
	rngp->threshold	  = threshold;
    7874:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}

__STATIC_INLINE void nrf_rng_error_correction_enable(void)
{
    NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    7878:	4b14      	ldr	r3, [pc, #80]	; (78cc <entropy_nrf5_init+0x88>)
	rngp->first_alloc = 0U;
    787a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
    787e:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	rngp->last	  = 0U;
    7882:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
	rngp->first_alloc = 0U;
    7886:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
	rngp->first_read  = 0U;
    788a:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
	rngp->last	  = 0U;
    788e:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
    7892:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    7896:	f042 0201 	orr.w	r2, r2, #1
    789a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
    789e:	4a0c      	ldr	r2, [pc, #48]	; (78d0 <entropy_nrf5_init+0x8c>)
    78a0:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
    78a2:	6812      	ldr	r2, [r2, #0]
    78a4:	9201      	str	r2, [sp, #4]
    (void)dummy;
    78a6:	9a01      	ldr	r2, [sp, #4]
    NRF_RNG->INTENSET = rng_int_mask;
    78a8:	2201      	movs	r2, #1
    78aa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG_TASK_START);

	IRQ_CONNECT(RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr,
    78ae:	2105      	movs	r1, #5
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
    78b0:	601a      	str	r2, [r3, #0]
    78b2:	200d      	movs	r0, #13
    78b4:	462a      	mov	r2, r5
    78b6:	f7fa f969 	bl	1b8c <_irq_priority_set>
		    &entropy_nrf5_data, 0);
	irq_enable(RNG_IRQn);
    78ba:	200d      	movs	r0, #13
    78bc:	f7fa f934 	bl	1b28 <_arch_irq_enable>

	return 0;
}
    78c0:	4628      	mov	r0, r5
    78c2:	b003      	add	sp, #12
    78c4:	bd30      	pop	{r4, r5, pc}
    78c6:	bf00      	nop
    78c8:	20000d24 	.word	0x20000d24
    78cc:	4000d000 	.word	0x4000d000
    78d0:	4000d100 	.word	0x4000d100

000078d4 <isr>:
{
    78d4:	b510      	push	{r4, lr}
	byte = random_byte_get();
    78d6:	f7ff ff4d 	bl	7774 <random_byte_get>
	if (byte < 0) {
    78da:	2800      	cmp	r0, #0
    78dc:	db2d      	blt.n	793a <isr+0x66>
	u8_t last  = rngp->last;
    78de:	4b17      	ldr	r3, [pc, #92]	; (793c <isr+0x68>)
    78e0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
    78e4:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	u8_t mask  = rngp->mask;
    78e8:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
    78ec:	1a51      	subs	r1, r2, r1
    78ee:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
    78f2:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
    78f4:	d013      	beq.n	791e <isr+0x4a>
	rngp->buffer[last] = byte;
    78f6:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
    78f8:	3201      	adds	r2, #1
    78fa:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
    78fc:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
    7900:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    7904:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
    7906:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
    7908:	3201      	adds	r2, #1
    790a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
    790c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
    7910:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    7914:	480a      	ldr	r0, [pc, #40]	; (7940 <isr+0x6c>)
}
    7916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    791a:	f000 bcee 	b.w	82fa <_impl_k_sem_give>
	u8_t last  = rngp->last;
    791e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
    7922:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	u8_t mask  = rngp->mask;
    7926:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
    792a:	1a51      	subs	r1, r2, r1
    792c:	ea34 0101 	bics.w	r1, r4, r1
    7930:	d1e9      	bne.n	7906 <isr+0x32>
    7932:	4b04      	ldr	r3, [pc, #16]	; (7944 <isr+0x70>)
    7934:	2201      	movs	r2, #1
    7936:	601a      	str	r2, [r3, #0]
    7938:	e7ec      	b.n	7914 <isr+0x40>
    793a:	bd10      	pop	{r4, pc}
    793c:	20000d24 	.word	0x20000d24
    7940:	20000d3c 	.word	0x20000d3c
    7944:	4000d004 	.word	0x4000d004

00007948 <_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
    7948:	4b09      	ldr	r3, [pc, #36]	; (7970 <_sys_device_do_config_level+0x28>)
{
    794a:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
    794c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    7950:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    7952:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    7954:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    7958:	42ac      	cmp	r4, r5
    795a:	d300      	bcc.n	795e <_sys_device_do_config_level+0x16>
		} else {
			_k_object_init(info);
		}
	}
}
    795c:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    795e:	6823      	ldr	r3, [r4, #0]
    7960:	4620      	mov	r0, r4
    7962:	685b      	ldr	r3, [r3, #4]
    7964:	4798      	blx	r3
		if (retval != 0) {
    7966:	b100      	cbz	r0, 796a <_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
    7968:	6066      	str	r6, [r4, #4]
								info++) {
    796a:	340c      	adds	r4, #12
    796c:	e7f4      	b.n	7958 <_sys_device_do_config_level+0x10>
    796e:	bf00      	nop
    7970:	00009300 	.word	0x00009300

00007974 <_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    7974:	4b10      	ldr	r3, [pc, #64]	; (79b8 <_impl_device_get_binding+0x44>)
{
    7976:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    7978:	4c10      	ldr	r4, [pc, #64]	; (79bc <_impl_device_get_binding+0x48>)
{
    797a:	4605      	mov	r5, r0
    797c:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    797e:	429c      	cmp	r4, r3
    7980:	d104      	bne.n	798c <_impl_device_get_binding+0x18>
    7982:	4c0e      	ldr	r4, [pc, #56]	; (79bc <_impl_device_get_binding+0x48>)
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    7984:	42b4      	cmp	r4, r6
    7986:	d109      	bne.n	799c <_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    7988:	2400      	movs	r4, #0
    798a:	e012      	b.n	79b2 <_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    798c:	6862      	ldr	r2, [r4, #4]
    798e:	b11a      	cbz	r2, 7998 <_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    7990:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    7992:	6812      	ldr	r2, [r2, #0]
    7994:	42aa      	cmp	r2, r5
    7996:	d00c      	beq.n	79b2 <_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    7998:	340c      	adds	r4, #12
    799a:	e7f0      	b.n	797e <_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    799c:	6863      	ldr	r3, [r4, #4]
    799e:	b90b      	cbnz	r3, 79a4 <_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    79a0:	340c      	adds	r4, #12
    79a2:	e7ef      	b.n	7984 <_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    79a4:	6823      	ldr	r3, [r4, #0]
    79a6:	4628      	mov	r0, r5
    79a8:	6819      	ldr	r1, [r3, #0]
    79aa:	f7fa fa81 	bl	1eb0 <strcmp>
    79ae:	2800      	cmp	r0, #0
    79b0:	d1f6      	bne.n	79a0 <_impl_device_get_binding+0x2c>
}
    79b2:	4620      	mov	r0, r4
    79b4:	bd70      	pop	{r4, r5, r6, pc}
    79b6:	bf00      	nop
    79b8:	20002a8c 	.word	0x20002a8c
    79bc:	200029f0 	.word	0x200029f0

000079c0 <_sys_power_save_idle_exit>:
	if (sys_pm_idle_exit_notify) {
		sys_resume();
	}
#endif

	z_clock_idle_exit();
    79c0:	f7f9 be3c 	b.w	163c <z_clock_idle_exit>

000079c4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    79c4:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    79c6:	4d0a      	ldr	r5, [pc, #40]	; (79f0 <idle+0x2c>)
	__asm__ volatile(
    79c8:	f04f 0220 	mov.w	r2, #32
    79cc:	f3ef 8311 	mrs	r3, BASEPRI
    79d0:	f382 8811 	msr	BASEPRI, r2
	s32_t ticks = _get_next_timeout_expiry();
    79d4:	f000 fe5a 	bl	868c <_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    79d8:	2101      	movs	r1, #1
    79da:	2802      	cmp	r0, #2
	s32_t ticks = _get_next_timeout_expiry();
    79dc:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    79de:	bfd8      	it	le
    79e0:	4608      	movle	r0, r1
    79e2:	f000 febd 	bl	8760 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    79e6:	622c      	str	r4, [r5, #32]
	k_cpu_idle();
    79e8:	f7fa f928 	bl	1c3c <k_cpu_idle>
    79ec:	e7ec      	b.n	79c8 <idle+0x4>
    79ee:	bf00      	nop
    79f0:	20000e50 	.word	0x20000e50

000079f4 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	(void)memset(&__bss_start, 0,
    79f4:	4802      	ldr	r0, [pc, #8]	; (7a00 <_bss_zero+0xc>)
    79f6:	4a03      	ldr	r2, [pc, #12]	; (7a04 <_bss_zero+0x10>)
    79f8:	2100      	movs	r1, #0
    79fa:	1a12      	subs	r2, r2, r0
    79fc:	f7fa baa6 	b.w	1f4c <memset>
    7a00:	20000000 	.word	0x20000000
    7a04:	20000f18 	.word	0x20000f18

00007a08 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    7a08:	4802      	ldr	r0, [pc, #8]	; (7a14 <_data_copy+0xc>)
    7a0a:	4a03      	ldr	r2, [pc, #12]	; (7a18 <_data_copy+0x10>)
    7a0c:	4903      	ldr	r1, [pc, #12]	; (7a1c <_data_copy+0x14>)
    7a0e:	1a12      	subs	r2, r2, r0
    7a10:	f7fa ba70 	b.w	1ef4 <memcpy>
    7a14:	20002810 	.word	0x20002810
    7a18:	20002b08 	.word	0x20002b08
    7a1c:	0000937c 	.word	0x0000937c

00007a20 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    7a20:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7a22:	2002      	movs	r0, #2
    7a24:	f7ff ff90 	bl	7948 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    7a28:	4807      	ldr	r0, [pc, #28]	; (7a48 <bg_thread_main+0x28>)
    7a2a:	f7f9 fab1 	bl	f90 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    7a2e:	2003      	movs	r0, #3
    7a30:	f7ff ff8a 	bl	7948 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    7a34:	f000 fd72 	bl	851c <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    7a38:	f7f8 fe40 	bl	6bc <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    7a3c:	4a03      	ldr	r2, [pc, #12]	; (7a4c <bg_thread_main+0x2c>)
    7a3e:	7b13      	ldrb	r3, [r2, #12]
    7a40:	f023 0301 	bic.w	r3, r3, #1
    7a44:	7313      	strb	r3, [r2, #12]
    7a46:	bd08      	pop	{r3, pc}
    7a48:	00009328 	.word	0x00009328
    7a4c:	20000de4 	.word	0x20000de4

00007a50 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    7a50:	b580      	push	{r7, lr}
    7a52:	b086      	sub	sp, #24
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    7a54:	4b32      	ldr	r3, [pc, #200]	; (7b20 <_Cstart+0xd0>)
    7a56:	af06      	add	r7, sp, #24
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    7a58:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7a5c:	4b31      	ldr	r3, [pc, #196]	; (7b24 <_Cstart+0xd4>)
	_kernel.ready_q.cache = _main_thread;
    7a5e:	4e32      	ldr	r6, [pc, #200]	; (7b28 <_Cstart+0xd8>)
    7a60:	4d32      	ldr	r5, [pc, #200]	; (7b2c <_Cstart+0xdc>)
    7a62:	2400      	movs	r4, #0
    7a64:	22e0      	movs	r2, #224	; 0xe0
    7a66:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    7a6a:	77dc      	strb	r4, [r3, #31]
    7a6c:	761c      	strb	r4, [r3, #24]
    7a6e:	765c      	strb	r4, [r3, #25]
    7a70:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    7a72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7a74:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    7a78:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    7a7a:	f7fa f84d 	bl	1b18 <_FaultInit>
	_CpuIdleInit();
    7a7e:	f7fa f8d7 	bl	1c30 <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    7a82:	4620      	mov	r0, r4
    7a84:	f7ff ff60 	bl	7948 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    7a88:	2001      	movs	r0, #1
    7a8a:	f7ff ff5d 	bl	7948 <_sys_device_do_config_level>
	_sched_init();
    7a8e:	f000 fbef 	bl	8270 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
    7a92:	4b27      	ldr	r3, [pc, #156]	; (7b30 <_Cstart+0xe0>)
	_kernel.ready_q.cache = _main_thread;
    7a94:	6275      	str	r5, [r6, #36]	; 0x24
	_setup_new_thread(_main_thread, _main_stack,
    7a96:	9305      	str	r3, [sp, #20]
    7a98:	2301      	movs	r3, #1
    7a9a:	9304      	str	r3, [sp, #16]
    7a9c:	9403      	str	r4, [sp, #12]
    7a9e:	9402      	str	r4, [sp, #8]
    7aa0:	9401      	str	r4, [sp, #4]
    7aa2:	9400      	str	r4, [sp, #0]
    7aa4:	4b23      	ldr	r3, [pc, #140]	; (7b34 <_Cstart+0xe4>)
    7aa6:	4924      	ldr	r1, [pc, #144]	; (7b38 <_Cstart+0xe8>)
    7aa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7aac:	4628      	mov	r0, r5
    7aae:	f000 fcdb 	bl	8468 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7ab2:	7b6b      	ldrb	r3, [r5, #13]
    7ab4:	f023 0204 	bic.w	r2, r3, #4
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    7ab8:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7abc:	736a      	strb	r2, [r5, #13]
    7abe:	4634      	mov	r4, r6
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    7ac0:	d105      	bne.n	7ace <_Cstart+0x7e>
    7ac2:	6a2b      	ldr	r3, [r5, #32]
	return true;
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
    7ac4:	3301      	adds	r3, #1
    7ac6:	d102      	bne.n	7ace <_Cstart+0x7e>
		_add_thread_to_ready_q(thread);
    7ac8:	4628      	mov	r0, r5
    7aca:	f000 fb0b 	bl	80e4 <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
    7ace:	4b1b      	ldr	r3, [pc, #108]	; (7b3c <_Cstart+0xec>)
    7ad0:	9305      	str	r3, [sp, #20]
    7ad2:	2301      	movs	r3, #1
    7ad4:	4e1a      	ldr	r6, [pc, #104]	; (7b40 <_Cstart+0xf0>)
    7ad6:	9304      	str	r3, [sp, #16]
    7ad8:	230f      	movs	r3, #15
    7ada:	9303      	str	r3, [sp, #12]
    7adc:	2300      	movs	r3, #0
    7ade:	9302      	str	r3, [sp, #8]
    7ae0:	9301      	str	r3, [sp, #4]
    7ae2:	9300      	str	r3, [sp, #0]
    7ae4:	f44f 72a0 	mov.w	r2, #320	; 0x140
    7ae8:	4b16      	ldr	r3, [pc, #88]	; (7b44 <_Cstart+0xf4>)
    7aea:	4917      	ldr	r1, [pc, #92]	; (7b48 <_Cstart+0xf8>)
    7aec:	4630      	mov	r0, r6
    7aee:	f000 fcbb 	bl	8468 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7af2:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
    7af4:	60e6      	str	r6, [r4, #12]
    7af6:	f023 0304 	bic.w	r3, r3, #4
    7afa:	7373      	strb	r3, [r6, #13]
	list->head = (sys_dnode_t *)list;
    7afc:	4b13      	ldr	r3, [pc, #76]	; (7b4c <_Cstart+0xfc>)
    7afe:	61a3      	str	r3, [r4, #24]
	list->tail = (sys_dnode_t *)list;
    7b00:	61e3      	str	r3, [r4, #28]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    7b02:	4b13      	ldr	r3, [pc, #76]	; (7b50 <_Cstart+0x100>)

#ifdef CONFIG_TRACING
	z_sys_trace_thread_switched_out();
#endif
	_current = main_thread;
    7b04:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    7b06:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
    7b0a:	4c12      	ldr	r4, [pc, #72]	; (7b54 <_Cstart+0x104>)
    7b0c:	4a09      	ldr	r2, [pc, #36]	; (7b34 <_Cstart+0xe4>)
    7b0e:	f383 8809 	msr	PSP, r3
    7b12:	b663      	cpsie	if
    7b14:	2100      	movs	r1, #0
    7b16:	f381 8811 	msr	BASEPRI, r1
    7b1a:	4610      	mov	r0, r2
    7b1c:	4720      	bx	r4
    7b1e:	bf00      	nop
    7b20:	20002410 	.word	0x20002410
    7b24:	e000ed00 	.word	0xe000ed00
    7b28:	20000e50 	.word	0x20000e50
    7b2c:	20000de4 	.word	0x20000de4
    7b30:	00009318 	.word	0x00009318
    7b34:	00007a21 	.word	0x00007a21
    7b38:	200016d0 	.word	0x200016d0
    7b3c:	0000931d 	.word	0x0000931d
    7b40:	20000d78 	.word	0x20000d78
    7b44:	000079c5 	.word	0x000079c5
    7b48:	20001ad0 	.word	0x20001ad0
    7b4c:	20000e68 	.word	0x20000e68
    7b50:	20001ad0 	.word	0x20001ad0
    7b54:	000007c5 	.word	0x000007c5

00007b58 <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    7b58:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    7b5a:	4c07      	ldr	r4, [pc, #28]	; (7b78 <init_static_pools+0x20>)
    7b5c:	4d07      	ldr	r5, [pc, #28]	; (7b7c <init_static_pools+0x24>)
    7b5e:	42ac      	cmp	r4, r5
    7b60:	d301      	bcc.n	7b66 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    7b62:	2000      	movs	r0, #0
    7b64:	bd38      	pop	{r3, r4, r5, pc}
    7b66:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
    7b6a:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
    7b6c:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
    7b6e:	4620      	mov	r0, r4
    7b70:	f7f8 fe83 	bl	87a <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    7b74:	341c      	adds	r4, #28
    7b76:	e7f2      	b.n	7b5e <init_static_pools+0x6>
    7b78:	20002a8c 	.word	0x20002a8c
    7b7c:	20002a8c 	.word	0x20002a8c

00007b80 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
    7b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
    7b84:	1e1d      	subs	r5, r3, #0
{
    7b86:	b085      	sub	sp, #20
    7b88:	4606      	mov	r6, r0
    7b8a:	460c      	mov	r4, r1
    7b8c:	4617      	mov	r7, r2
	if (timeout > 0) {
    7b8e:	dd56      	ble.n	7c3e <k_mem_pool_alloc+0xbe>
		end = z_tick_get() + _ms_to_ticks(timeout);
    7b90:	f000 fe46 	bl	8820 <z_tick_get>
    7b94:	4680      	mov	r8, r0
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction(
    7b96:	482b      	ldr	r0, [pc, #172]	; (7c44 <k_mem_pool_alloc+0xc4>)
    7b98:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    7b9c:	2100      	movs	r1, #0
    7b9e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    7ba2:	2300      	movs	r3, #0
    7ba4:	fbce 0105 	smlal	r0, r1, lr, r5
    7ba8:	f7f8 fa9a 	bl	e0 <__aeabi_ldivmod>
    7bac:	eb18 0800 	adds.w	r8, r8, r0
	return pool - &_k_mem_pool_list_start[0];
    7bb0:	4b25      	ldr	r3, [pc, #148]	; (7c48 <k_mem_pool_alloc+0xc8>)
    7bb2:	4a26      	ldr	r2, [pc, #152]	; (7c4c <k_mem_pool_alloc+0xcc>)
    7bb4:	1af3      	subs	r3, r6, r3
    7bb6:	109b      	asrs	r3, r3, #2
    7bb8:	fb02 fa03 	mul.w	sl, r2, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
    7bbc:	fa5f fa8a 	uxtb.w	sl, sl
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		(void)_pend_current_thread(irq_lock(), &p->wait_q, timeout);
    7bc0:	f106 0b14 	add.w	fp, r6, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
    7bc4:	9400      	str	r4, [sp, #0]
    7bc6:	ab03      	add	r3, sp, #12
    7bc8:	aa02      	add	r2, sp, #8
    7bca:	4639      	mov	r1, r7
    7bcc:	4630      	mov	r0, r6
    7bce:	f7f8 fea1 	bl	914 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
    7bd2:	f110 0f0b 	cmn.w	r0, #11
    7bd6:	d10b      	bne.n	7bf0 <k_mem_pool_alloc+0x70>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
    7bd8:	9400      	str	r4, [sp, #0]
    7bda:	ab03      	add	r3, sp, #12
    7bdc:	aa02      	add	r2, sp, #8
    7bde:	4639      	mov	r1, r7
    7be0:	4630      	mov	r0, r6
    7be2:	f7f8 fe97 	bl	914 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
    7be6:	f110 0f0b 	cmn.w	r0, #11
    7bea:	bf08      	it	eq
    7bec:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
    7bf0:	7963      	ldrb	r3, [r4, #5]
    7bf2:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
    7bf4:	f884 a004 	strb.w	sl, [r4, #4]
		block->id.level = level_num;
    7bf8:	f362 0303 	bfi	r3, r2, #0, #4
    7bfc:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
    7bfe:	6863      	ldr	r3, [r4, #4]
    7c00:	9a03      	ldr	r2, [sp, #12]
    7c02:	f362 331f 	bfi	r3, r2, #12, #20
    7c06:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
    7c08:	b1b0      	cbz	r0, 7c38 <k_mem_pool_alloc+0xb8>
    7c0a:	b1ad      	cbz	r5, 7c38 <k_mem_pool_alloc+0xb8>
    7c0c:	f110 0f0c 	cmn.w	r0, #12
    7c10:	d112      	bne.n	7c38 <k_mem_pool_alloc+0xb8>
    7c12:	f04f 0320 	mov.w	r3, #32
    7c16:	f3ef 8011 	mrs	r0, BASEPRI
    7c1a:	f383 8811 	msr	BASEPRI, r3
		(void)_pend_current_thread(irq_lock(), &p->wait_q, timeout);
    7c1e:	462a      	mov	r2, r5
    7c20:	4659      	mov	r1, fp
    7c22:	f000 fb07 	bl	8234 <_pend_current_thread>

		if (timeout != K_FOREVER) {
    7c26:	1c6b      	adds	r3, r5, #1
    7c28:	d0cc      	beq.n	7bc4 <k_mem_pool_alloc+0x44>
			timeout = end - z_tick_get();
    7c2a:	f000 fdf9 	bl	8820 <z_tick_get>

			if (timeout < 0) {
    7c2e:	ebb8 0500 	subs.w	r5, r8, r0
    7c32:	d5c7      	bpl.n	7bc4 <k_mem_pool_alloc+0x44>
				break;
			}
		}
	}

	return -EAGAIN;
    7c34:	f06f 000a 	mvn.w	r0, #10
}
    7c38:	b005      	add	sp, #20
    7c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
    7c3e:	f04f 0800 	mov.w	r8, #0
    7c42:	e7b5      	b.n	7bb0 <k_mem_pool_alloc+0x30>
    7c44:	0004ffff 	.word	0x0004ffff
    7c48:	20002a8c 	.word	0x20002a8c
    7c4c:	b6db6db7 	.word	0xb6db6db7

00007c50 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
    7c50:	b570      	push	{r4, r5, r6, lr}
    7c52:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
    7c54:	6802      	ldr	r2, [r0, #0]
    7c56:	7841      	ldrb	r1, [r0, #1]
    7c58:	4e13      	ldr	r6, [pc, #76]	; (7ca8 <k_mem_pool_free_id+0x58>)
    7c5a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    7c5e:	00a4      	lsls	r4, r4, #2
    7c60:	0b12      	lsrs	r2, r2, #12
    7c62:	f001 010f 	and.w	r1, r1, #15
    7c66:	1930      	adds	r0, r6, r4
    7c68:	f7f8 ff30 	bl	acc <_sys_mem_pool_block_free>
    7c6c:	f04f 0320 	mov.w	r3, #32
    7c70:	f3ef 8511 	mrs	r5, BASEPRI
    7c74:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
    7c78:	f104 0014 	add.w	r0, r4, #20
    7c7c:	4430      	add	r0, r6
    7c7e:	f000 fae7 	bl	8250 <_unpend_all>

	if (need_sched && !_is_in_isr()) {
    7c82:	b140      	cbz	r0, 7c96 <k_mem_pool_free_id+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7c84:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    7c88:	2b0d      	cmp	r3, #13
    7c8a:	d804      	bhi.n	7c96 <k_mem_pool_free_id+0x46>
    7c8c:	b133      	cbz	r3, 7c9c <k_mem_pool_free_id+0x4c>
    7c8e:	4b07      	ldr	r3, [pc, #28]	; (7cac <k_mem_pool_free_id+0x5c>)
    7c90:	685b      	ldr	r3, [r3, #4]
    7c92:	051b      	lsls	r3, r3, #20
    7c94:	d402      	bmi.n	7c9c <k_mem_pool_free_id+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    7c96:	f385 8811 	msr	BASEPRI, r5
		_reschedule(key);
	} else {
		irq_unlock(key);
	}
}
    7c9a:	bd70      	pop	{r4, r5, r6, pc}
		_reschedule(key);
    7c9c:	4628      	mov	r0, r5
}
    7c9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
    7ca2:	f000 b9cd 	b.w	8040 <_reschedule>
    7ca6:	bf00      	nop
    7ca8:	20002a8c 	.word	0x20002a8c
    7cac:	e000ed00 	.word	0xe000ed00

00007cb0 <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
    7cb0:	b507      	push	{r0, r1, r2, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
    7cb2:	1d0a      	adds	r2, r1, #4
    7cb4:	d204      	bcs.n	7cc0 <k_mem_pool_malloc+0x10>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
    7cb6:	2300      	movs	r3, #0
    7cb8:	4669      	mov	r1, sp
    7cba:	f7ff ff61 	bl	7b80 <k_mem_pool_alloc>
    7cbe:	b118      	cbz	r0, 7cc8 <k_mem_pool_malloc+0x18>
		return NULL;
    7cc0:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
    7cc2:	b003      	add	sp, #12
    7cc4:	f85d fb04 	ldr.w	pc, [sp], #4
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
    7cc8:	2204      	movs	r2, #4
    7cca:	eb0d 0102 	add.w	r1, sp, r2
    7cce:	9800      	ldr	r0, [sp, #0]
    7cd0:	f7fa f910 	bl	1ef4 <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
    7cd4:	9800      	ldr	r0, [sp, #0]
    7cd6:	3004      	adds	r0, #4
    7cd8:	e7f3      	b.n	7cc2 <k_mem_pool_malloc+0x12>

00007cda <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
    7cda:	b110      	cbz	r0, 7ce2 <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
    7cdc:	3804      	subs	r0, #4
    7cde:	f7ff bfb7 	b.w	7c50 <k_mem_pool_free_id>
    7ce2:	4770      	bx	lr

00007ce4 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
    7ce4:	4b03      	ldr	r3, [pc, #12]	; (7cf4 <z_thread_malloc+0x10>)
    7ce6:	689b      	ldr	r3, [r3, #8]
{
    7ce8:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
    7cea:	6e18      	ldr	r0, [r3, #96]	; 0x60
    7cec:	b108      	cbz	r0, 7cf2 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
    7cee:	f7ff bfdf 	b.w	7cb0 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
    7cf2:	4770      	bx	lr
    7cf4:	20000e50 	.word	0x20000e50

00007cf8 <queue_insert>:
			       struct k_queue *);
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
    7cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cfa:	4605      	mov	r5, r0
    7cfc:	460f      	mov	r7, r1
    7cfe:	4614      	mov	r4, r2
	__asm__ volatile(
    7d00:	f04f 0220 	mov.w	r2, #32
    7d04:	f3ef 8611 	mrs	r6, BASEPRI
    7d08:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
    7d0c:	b1a3      	cbz	r3, 7d38 <queue_insert+0x40>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
    7d0e:	2008      	movs	r0, #8
    7d10:	f7ff ffe8 	bl	7ce4 <z_thread_malloc>
		if (anode == NULL) {
    7d14:	2800      	cmp	r0, #0
    7d16:	d034      	beq.n	7d82 <queue_insert+0x8a>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0, "flags too large");
	node->next_and_flags = flags;
    7d18:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
    7d1a:	6044      	str	r4, [r0, #4]
    7d1c:	6003      	str	r3, [r0, #0]
    7d1e:	4604      	mov	r4, r0
    7d20:	6823      	ldr	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
    7d22:	b95f      	cbnz	r7, 7d3c <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
    7d24:	682a      	ldr	r2, [r5, #0]
    7d26:	f003 0303 	and.w	r3, r3, #3
    7d2a:	4313      	orrs	r3, r2
    7d2c:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    7d2e:	686b      	ldr	r3, [r5, #4]
	list->head = node;
    7d30:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    7d32:	b973      	cbnz	r3, 7d52 <queue_insert+0x5a>
	list->tail = node;
    7d34:	606c      	str	r4, [r5, #4]
    7d36:	e00c      	b.n	7d52 <queue_insert+0x5a>
	node->next_and_flags = flags;
    7d38:	6023      	str	r3, [r4, #0]
    7d3a:	e7f1      	b.n	7d20 <queue_insert+0x28>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    7d3c:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    7d3e:	f032 0203 	bics.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    7d42:	f003 0303 	and.w	r3, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
    7d46:	d114      	bne.n	7d72 <queue_insert+0x7a>
    7d48:	686a      	ldr	r2, [r5, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
    7d4a:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(sflist, sfnode)
    7d4c:	b95a      	cbnz	r2, 7d66 <queue_insert+0x6e>
	list->tail = node;
    7d4e:	606c      	str	r4, [r5, #4]
	list->head = node;
    7d50:	602c      	str	r4, [r5, #0]
	_handle_obj_poll_events(&queue->poll_events, state);
    7d52:	2104      	movs	r1, #4
    7d54:	f105 0008 	add.w	r0, r5, #8
    7d58:	f000 feb8 	bl	8acc <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
    7d5c:	4630      	mov	r0, r6
    7d5e:	f000 f96f 	bl	8040 <_reschedule>
	return 0;
    7d62:	2000      	movs	r0, #0
    7d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    7d66:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    7d68:	f003 0303 	and.w	r3, r3, #3
    7d6c:	4323      	orrs	r3, r4
    7d6e:	6013      	str	r3, [r2, #0]
    7d70:	e7e0      	b.n	7d34 <queue_insert+0x3c>
    7d72:	4313      	orrs	r3, r2
    7d74:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    7d76:	683a      	ldr	r2, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    7d78:	f002 0203 	and.w	r2, r2, #3
    7d7c:	4314      	orrs	r4, r2
    7d7e:	603c      	str	r4, [r7, #0]
    7d80:	e7e7      	b.n	7d52 <queue_insert+0x5a>
			return -ENOMEM;
    7d82:	f06f 000b 	mvn.w	r0, #11
}
    7d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007d88 <z_queue_node_peek>:
{
    7d88:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
    7d8a:	4604      	mov	r4, r0
    7d8c:	b130      	cbz	r0, 7d9c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    7d8e:	6802      	ldr	r2, [r0, #0]
    7d90:	0793      	lsls	r3, r2, #30
    7d92:	d003      	beq.n	7d9c <z_queue_node_peek+0x14>
		ret = anode->data;
    7d94:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    7d96:	b109      	cbz	r1, 7d9c <z_queue_node_peek+0x14>
			k_free(anode);
    7d98:	f7ff ff9f 	bl	7cda <k_free>
}
    7d9c:	4620      	mov	r0, r4
    7d9e:	bd10      	pop	{r4, pc}

00007da0 <_impl_k_queue_init>:
	list->head = NULL;
    7da0:	2300      	movs	r3, #0
    7da2:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
    7da4:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
    7da6:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
    7daa:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    7dac:	60c3      	str	r3, [r0, #12]
    7dae:	4770      	bx	lr

00007db0 <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
    7db0:	460a      	mov	r2, r1
    7db2:	2300      	movs	r3, #0
    7db4:	6841      	ldr	r1, [r0, #4]
    7db6:	f7ff bf9f 	b.w	7cf8 <queue_insert>

00007dba <k_queue_prepend>:
			   data, false);
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, NULL, data, false);
    7dba:	2300      	movs	r3, #0
    7dbc:	460a      	mov	r2, r1
    7dbe:	4619      	mov	r1, r3
    7dc0:	f7ff bf9a 	b.w	7cf8 <queue_insert>

00007dc4 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    7dc4:	b538      	push	{r3, r4, r5, lr}
    7dc6:	f04f 0320 	mov.w	r3, #32
    7dca:	f3ef 8511 	mrs	r5, BASEPRI
    7dce:	f383 8811 	msr	BASEPRI, r3
    7dd2:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
    7dd4:	b953      	cbnz	r3, 7dec <k_queue_append_list+0x28>
	list->head = node;
    7dd6:	6001      	str	r1, [r0, #0]
	list->tail = node;
    7dd8:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
    7dda:	2104      	movs	r1, #4
    7ddc:	3008      	adds	r0, #8
    7dde:	f000 fe75 	bl	8acc <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
    7de2:	4628      	mov	r0, r5
}
    7de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    7de8:	f000 b92a 	b.w	8040 <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    7dec:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    7dee:	f004 0403 	and.w	r4, r4, #3
    7df2:	4321      	orrs	r1, r4
    7df4:	6019      	str	r1, [r3, #0]
    7df6:	e7ef      	b.n	7dd8 <k_queue_append_list+0x14>

00007df8 <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
    7df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7dfc:	4604      	mov	r4, r0
    7dfe:	b086      	sub	sp, #24
    7e00:	460d      	mov	r5, r1
    7e02:	f04f 0320 	mov.w	r3, #32
    7e06:	f3ef 8711 	mrs	r7, BASEPRI
    7e0a:	f383 8811 	msr	BASEPRI, r3
    7e0e:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    7e10:	b182      	cbz	r2, 7e34 <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    7e12:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    7e14:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    7e16:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    7e1a:	428a      	cmp	r2, r1
	list->head = node;
    7e1c:	6003      	str	r3, [r0, #0]
	list->tail = node;
    7e1e:	bf08      	it	eq
    7e20:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    7e22:	2101      	movs	r1, #1
    7e24:	4610      	mov	r0, r2
    7e26:	f7ff ffaf 	bl	7d88 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    7e2a:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
    7e2e:	b006      	add	sp, #24
    7e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
    7e34:	b919      	cbnz	r1, 7e3e <_impl_k_queue_get+0x46>
    7e36:	f387 8811 	msr	BASEPRI, r7
			return NULL;
    7e3a:	2000      	movs	r0, #0
    7e3c:	e7f7      	b.n	7e2e <_impl_k_queue_get+0x36>
    7e3e:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
    7e42:	2104      	movs	r1, #4
    7e44:	4603      	mov	r3, r0
    7e46:	eb0d 0001 	add.w	r0, sp, r1
    7e4a:	f000 fd9d 	bl	8988 <k_poll_event_init>
	if (timeout != K_FOREVER) {
    7e4e:	1c6a      	adds	r2, r5, #1
    7e50:	d002      	beq.n	7e58 <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
    7e52:	f000 fcff 	bl	8854 <_impl_k_uptime_get_32>
    7e56:	4606      	mov	r6, r0
{
    7e58:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
    7e5a:	9b04      	ldr	r3, [sp, #16]

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
    7e5c:	1bea      	subs	r2, r5, r7
    7e5e:	f36f 3310 	bfc	r3, #12, #5
    7e62:	2101      	movs	r1, #1
    7e64:	a801      	add	r0, sp, #4
    7e66:	9304      	str	r3, [sp, #16]
    7e68:	f000 fda4 	bl	89b4 <_impl_k_poll>
		if (err && err != -EAGAIN) {
    7e6c:	b108      	cbz	r0, 7e72 <_impl_k_queue_get+0x7a>
    7e6e:	300b      	adds	r0, #11
    7e70:	d1e3      	bne.n	7e3a <_impl_k_queue_get+0x42>
	__asm__ volatile(
    7e72:	f04f 0320 	mov.w	r3, #32
    7e76:	f3ef 8811 	mrs	r8, BASEPRI
    7e7a:	f383 8811 	msr	BASEPRI, r3
    7e7e:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
    7e80:	b138      	cbz	r0, 7e92 <_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    7e82:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    7e84:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    7e86:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    7e8a:	4290      	cmp	r0, r2
	list->head = node;
    7e8c:	6023      	str	r3, [r4, #0]
	list->tail = node;
    7e8e:	bf08      	it	eq
    7e90:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
    7e92:	2101      	movs	r1, #1
    7e94:	f7ff ff78 	bl	7d88 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    7e98:	f388 8811 	msr	BASEPRI, r8
		if ((val == NULL) && (timeout != K_FOREVER)) {
    7e9c:	2800      	cmp	r0, #0
    7e9e:	d1c6      	bne.n	7e2e <_impl_k_queue_get+0x36>
    7ea0:	1c6b      	adds	r3, r5, #1
    7ea2:	d0da      	beq.n	7e5a <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
    7ea4:	f000 fcd6 	bl	8854 <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
    7ea8:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
    7eaa:	42bd      	cmp	r5, r7
    7eac:	dad5      	bge.n	7e5a <_impl_k_queue_get+0x62>
    7eae:	e7c4      	b.n	7e3a <_impl_k_queue_get+0x42>

00007eb0 <sys_dlist_remove>:
	node->prev->next = node->next;
    7eb0:	e890 000c 	ldmia.w	r0, {r2, r3}
    7eb4:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    7eb6:	6802      	ldr	r2, [r0, #0]
    7eb8:	6053      	str	r3, [r2, #4]
    7eba:	4770      	bx	lr

00007ebc <reset_time_slice>:

static int slice_time;
static int slice_max_prio;

static void reset_time_slice(void)
{
    7ebc:	b508      	push	{r3, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    7ebe:	f7f9 fc61 	bl	1784 <z_clock_elapsed>
    7ec2:	4b05      	ldr	r3, [pc, #20]	; (7ed8 <reset_time_slice+0x1c>)
    7ec4:	4a05      	ldr	r2, [pc, #20]	; (7edc <reset_time_slice+0x20>)
    7ec6:	681b      	ldr	r3, [r3, #0]
    7ec8:	4418      	add	r0, r3
    7eca:	6110      	str	r0, [r2, #16]

	z_set_timeout_expiry(slice_time, false);
    7ecc:	2100      	movs	r1, #0
    7ece:	4618      	mov	r0, r3
}
    7ed0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_set_timeout_expiry(slice_time, false);
    7ed4:	f000 bc44 	b.w	8760 <z_set_timeout_expiry>
    7ed8:	20000e84 	.word	0x20000e84
    7edc:	20000e50 	.word	0x20000e50

00007ee0 <k_spin_lock.isra.10>:
	__asm__ volatile(
    7ee0:	f04f 0320 	mov.w	r3, #32
    7ee4:	f3ef 8011 	mrs	r0, BASEPRI
    7ee8:	f383 8811 	msr	BASEPRI, r3
    7eec:	4770      	bx	lr
	...

00007ef0 <update_cache>:
#else
static void reset_time_slice(void) { /* !CONFIG_TIMESLICING */ }
#endif

static void update_cache(int preempt_ok)
{
    7ef0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    7ef2:	4c10      	ldr	r4, [pc, #64]	; (7f34 <update_cache+0x44>)
    7ef4:	4623      	mov	r3, r4
    7ef6:	f853 5f28 	ldr.w	r5, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7efa:	429d      	cmp	r5, r3
    7efc:	d000      	beq.n	7f00 <update_cache+0x10>
	return th ? th : _current_cpu->idle_thread;
    7efe:	b905      	cbnz	r5, 7f02 <update_cache+0x12>
    7f00:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    7f02:	b970      	cbnz	r0, 7f22 <update_cache+0x32>
	if (!_current || !_is_thread_ready(_current)) {
    7f04:	68a3      	ldr	r3, [r4, #8]
    7f06:	b163      	cbz	r3, 7f22 <update_cache+0x32>
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    7f08:	7b5a      	ldrb	r2, [r3, #13]
    7f0a:	06d2      	lsls	r2, r2, #27
    7f0c:	d109      	bne.n	7f22 <update_cache+0x32>
    7f0e:	6a1a      	ldr	r2, [r3, #32]
    7f10:	3201      	adds	r2, #1
    7f12:	d106      	bne.n	7f22 <update_cache+0x32>
	if (_is_preempt(_current) || is_metairq(th)) {
    7f14:	89da      	ldrh	r2, [r3, #14]
    7f16:	2a7f      	cmp	r2, #127	; 0x7f
    7f18:	d903      	bls.n	7f22 <update_cache+0x32>
	return thread == _idle_thread;
    7f1a:	4a07      	ldr	r2, [pc, #28]	; (7f38 <update_cache+0x48>)
	if (_is_idle(_current)) {
    7f1c:	6812      	ldr	r2, [r2, #0]
    7f1e:	4293      	cmp	r3, r2
    7f20:	d106      	bne.n	7f30 <update_cache+0x40>
#ifndef CONFIG_SMP
	struct k_thread *th = next_up();

	if (should_preempt(th, preempt_ok)) {
		if (th != _current) {
    7f22:	68a3      	ldr	r3, [r4, #8]
    7f24:	42ab      	cmp	r3, r5
    7f26:	d001      	beq.n	7f2c <update_cache+0x3c>
			reset_time_slice();
    7f28:	f7ff ffc8 	bl	7ebc <reset_time_slice>
		}
		_kernel.ready_q.cache = th;
    7f2c:	6265      	str	r5, [r4, #36]	; 0x24
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    7f2e:	bd38      	pop	{r3, r4, r5, pc}
		_kernel.ready_q.cache = _current;
    7f30:	6263      	str	r3, [r4, #36]	; 0x24
    7f32:	bd38      	pop	{r3, r4, r5, pc}
    7f34:	20000e50 	.word	0x20000e50
    7f38:	00009324 	.word	0x00009324

00007f3c <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
    7f3c:	f990 000e 	ldrsb.w	r0, [r0, #14]
    7f40:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
    7f44:	4298      	cmp	r0, r3
    7f46:	bfac      	ite	ge
    7f48:	2000      	movge	r0, #0
    7f4a:	2001      	movlt	r0, #1
    7f4c:	4770      	bx	lr
	...

00007f50 <k_sched_time_slice_set>:
{
    7f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f52:	460d      	mov	r5, r1
    7f54:	4607      	mov	r7, r0
	LOCKED(&sched_lock) {
    7f56:	f7ff ffc3 	bl	7ee0 <k_spin_lock.isra.10>
		_current_cpu->slice_ticks = 0;
    7f5a:	4b0c      	ldr	r3, [pc, #48]	; (7f8c <k_sched_time_slice_set+0x3c>)
	LOCKED(&sched_lock) {
    7f5c:	4604      	mov	r4, r0
    7f5e:	480c      	ldr	r0, [pc, #48]	; (7f90 <k_sched_time_slice_set+0x40>)
		_current_cpu->slice_ticks = 0;
    7f60:	2200      	movs	r2, #0
    7f62:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    7f66:	2100      	movs	r1, #0
    7f68:	611a      	str	r2, [r3, #16]
    7f6a:	fbc6 0107 	smlal	r0, r1, r6, r7
    7f6e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    7f72:	2300      	movs	r3, #0
    7f74:	f7f8 f8b4 	bl	e0 <__aeabi_ldivmod>
    7f78:	4b06      	ldr	r3, [pc, #24]	; (7f94 <k_sched_time_slice_set+0x44>)
    7f7a:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    7f7c:	4b06      	ldr	r3, [pc, #24]	; (7f98 <k_sched_time_slice_set+0x48>)
    7f7e:	601d      	str	r5, [r3, #0]
		reset_time_slice();
    7f80:	f7ff ff9c 	bl	7ebc <reset_time_slice>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    7f84:	f384 8811 	msr	BASEPRI, r4
    7f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7f8a:	bf00      	nop
    7f8c:	20000e50 	.word	0x20000e50
    7f90:	0004ffff 	.word	0x0004ffff
    7f94:	20000e84 	.word	0x20000e84
    7f98:	20000e80 	.word	0x20000e80

00007f9c <_remove_thread_from_ready_q>:
		update_cache(thread == _current);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    7f9c:	b510      	push	{r4, lr}
    7f9e:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
    7fa0:	f7ff ff9e 	bl	7ee0 <k_spin_lock.isra.10>
		if (_is_thread_queued(thread)) {
    7fa4:	7b4b      	ldrb	r3, [r1, #13]
    7fa6:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
    7fa8:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
    7faa:	d50d      	bpl.n	7fc8 <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    7fac:	4608      	mov	r0, r1
    7fae:	f7ff ff7f 	bl	7eb0 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
    7fb2:	7b4b      	ldrb	r3, [r1, #13]
    7fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    7fb8:	734b      	strb	r3, [r1, #13]
			update_cache(thread == _current);
    7fba:	4b05      	ldr	r3, [pc, #20]	; (7fd0 <_remove_thread_from_ready_q+0x34>)
    7fbc:	6898      	ldr	r0, [r3, #8]
    7fbe:	1a43      	subs	r3, r0, r1
    7fc0:	4258      	negs	r0, r3
    7fc2:	4158      	adcs	r0, r3
    7fc4:	f7ff ff94 	bl	7ef0 <update_cache>
    7fc8:	f384 8811 	msr	BASEPRI, r4
    7fcc:	bd10      	pop	{r4, pc}
    7fce:	bf00      	nop
    7fd0:	20000e50 	.word	0x20000e50

00007fd4 <_find_first_thread_to_unpend>:
{
    7fd4:	b508      	push	{r3, lr}
    7fd6:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
    7fd8:	f7ff ff82 	bl	7ee0 <k_spin_lock.isra.10>
	return list->head == list;
    7fdc:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7fde:	429a      	cmp	r2, r3
    7fe0:	bf08      	it	eq
    7fe2:	2300      	moveq	r3, #0
    7fe4:	f380 8811 	msr	BASEPRI, r0
}
    7fe8:	4618      	mov	r0, r3
    7fea:	bd08      	pop	{r3, pc}

00007fec <_unpend_thread_no_timeout>:
{
    7fec:	b510      	push	{r4, lr}
    7fee:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
    7ff0:	f7ff ff76 	bl	7ee0 <k_spin_lock.isra.10>
    7ff4:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
    7ff6:	4608      	mov	r0, r1
    7ff8:	f7ff ff5a 	bl	7eb0 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    7ffc:	7b4b      	ldrb	r3, [r1, #13]
    7ffe:	f023 0302 	bic.w	r3, r3, #2
    8002:	734b      	strb	r3, [r1, #13]
    8004:	f384 8811 	msr	BASEPRI, r4
	thread->base.pended_on = NULL;
    8008:	2300      	movs	r3, #0
    800a:	608b      	str	r3, [r1, #8]
    800c:	bd10      	pop	{r4, pc}

0000800e <_unpend_first_thread>:
{
    800e:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
    8010:	2100      	movs	r1, #0
    8012:	f7ff ffdf 	bl	7fd4 <_find_first_thread_to_unpend>

	if (thread != NULL) {
    8016:	4604      	mov	r4, r0
    8018:	b128      	cbz	r0, 8026 <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
    801a:	f7ff ffe7 	bl	7fec <_unpend_thread_no_timeout>
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
    801e:	f104 0018 	add.w	r0, r4, #24
    8022:	f000 fb23 	bl	866c <_abort_timeout>
}
    8026:	4620      	mov	r0, r4
    8028:	bd10      	pop	{r4, pc}

0000802a <_unpend_thread>:
{
    802a:	b510      	push	{r4, lr}
    802c:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
    802e:	f7ff ffdd 	bl	7fec <_unpend_thread_no_timeout>
    8032:	f104 0018 	add.w	r0, r4, #24
}
    8036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    803a:	f000 bb17 	b.w	866c <_abort_timeout>
	...

00008040 <_reschedule>:
    8040:	f3ef 8305 	mrs	r3, IPSR
    8044:	2b0d      	cmp	r3, #13
    8046:	d809      	bhi.n	805c <_reschedule+0x1c>
    8048:	b11b      	cbz	r3, 8052 <_reschedule+0x12>
    804a:	4b07      	ldr	r3, [pc, #28]	; (8068 <_reschedule+0x28>)
    804c:	685b      	ldr	r3, [r3, #4]
    804e:	051b      	lsls	r3, r3, #20
    8050:	d504      	bpl.n	805c <_reschedule+0x1c>
	if (_get_next_ready_thread() != _current) {
    8052:	4b06      	ldr	r3, [pc, #24]	; (806c <_reschedule+0x2c>)
    8054:	689a      	ldr	r2, [r3, #8]
    8056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8058:	429a      	cmp	r2, r3
    805a:	d102      	bne.n	8062 <_reschedule+0x22>
    805c:	f380 8811 	msr	BASEPRI, r0
    8060:	4770      	bx	lr
    8062:	f7f9 bbd5 	b.w	1810 <__swap>
    8066:	bf00      	nop
    8068:	e000ed00 	.word	0xe000ed00
    806c:	20000e50 	.word	0x20000e50

00008070 <k_sched_unlock>:
{
    8070:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
    8072:	f7ff ff35 	bl	7ee0 <k_spin_lock.isra.10>
		++_current->base.sched_locked;
    8076:	4b0a      	ldr	r3, [pc, #40]	; (80a0 <k_sched_unlock+0x30>)
    8078:	689a      	ldr	r2, [r3, #8]
    807a:	7bd3      	ldrb	r3, [r2, #15]
    807c:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
    807e:	4604      	mov	r4, r0
		++_current->base.sched_locked;
    8080:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
    8082:	2001      	movs	r0, #1
    8084:	f7ff ff34 	bl	7ef0 <update_cache>
    8088:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
    808c:	f04f 0320 	mov.w	r3, #32
    8090:	f3ef 8011 	mrs	r0, BASEPRI
    8094:	f383 8811 	msr	BASEPRI, r3
}
    8098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
    809c:	f7ff bfd0 	b.w	8040 <_reschedule>
    80a0:	20000e50 	.word	0x20000e50

000080a4 <_priq_dumb_add>:
{
    80a4:	b510      	push	{r4, lr}
	return list->head == list;
    80a6:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    80a8:	4298      	cmp	r0, r3
    80aa:	bf08      	it	eq
    80ac:	2300      	moveq	r3, #0
    80ae:	b193      	cbz	r3, 80d6 <_priq_dumb_add+0x32>
	if (t1->base.prio < t2->base.prio) {
    80b0:	f991 400e 	ldrsb.w	r4, [r1, #14]
    80b4:	f993 200e 	ldrsb.w	r2, [r3, #14]
    80b8:	4294      	cmp	r4, r2
    80ba:	da06      	bge.n	80ca <_priq_dumb_add+0x26>
		node->prev = insert_point->prev;
    80bc:	685a      	ldr	r2, [r3, #4]
    80be:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    80c0:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    80c2:	685a      	ldr	r2, [r3, #4]
    80c4:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    80c6:	6059      	str	r1, [r3, #4]
    80c8:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
    80ca:	6842      	ldr	r2, [r0, #4]
    80cc:	4293      	cmp	r3, r2
    80ce:	d002      	beq.n	80d6 <_priq_dumb_add+0x32>
    80d0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    80d2:	2b00      	cmp	r3, #0
    80d4:	d1eb      	bne.n	80ae <_priq_dumb_add+0xa>
	node->next = list;
    80d6:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    80d8:	6843      	ldr	r3, [r0, #4]
    80da:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    80dc:	6843      	ldr	r3, [r0, #4]
    80de:	6019      	str	r1, [r3, #0]
	list->tail = node;
    80e0:	6041      	str	r1, [r0, #4]
    80e2:	bd10      	pop	{r4, pc}

000080e4 <_add_thread_to_ready_q>:
{
    80e4:	b538      	push	{r3, r4, r5, lr}
    80e6:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
    80e8:	f7ff fefa 	bl	7ee0 <k_spin_lock.isra.10>
		_priq_run_add(&_kernel.ready_q.runq, thread);
    80ec:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
    80ee:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
    80f0:	4806      	ldr	r0, [pc, #24]	; (810c <_add_thread_to_ready_q+0x28>)
    80f2:	f7ff ffd7 	bl	80a4 <_priq_dumb_add>
	thread->base.thread_state |= states;
    80f6:	7b63      	ldrb	r3, [r4, #13]
    80f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    80fc:	7363      	strb	r3, [r4, #13]
		update_cache(0);
    80fe:	2000      	movs	r0, #0
    8100:	f7ff fef6 	bl	7ef0 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    8104:	f385 8811 	msr	BASEPRI, r5
    8108:	bd38      	pop	{r3, r4, r5, pc}
    810a:	bf00      	nop
    810c:	20000e78 	.word	0x20000e78

00008110 <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    8110:	7b42      	ldrb	r2, [r0, #13]
    8112:	06d2      	lsls	r2, r2, #27
    8114:	d104      	bne.n	8120 <_ready_thread+0x10>
    8116:	6a03      	ldr	r3, [r0, #32]
	if (_is_thread_ready(thread)) {
    8118:	3301      	adds	r3, #1
    811a:	d101      	bne.n	8120 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
    811c:	f7ff bfe2 	b.w	80e4 <_add_thread_to_ready_q>
    8120:	4770      	bx	lr

00008122 <z_thread_timeout>:
{
    8122:	b538      	push	{r3, r4, r5, lr}
	if (th->base.pended_on != NULL) {
    8124:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    8128:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    812a:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
    812e:	b113      	cbz	r3, 8136 <z_thread_timeout+0x14>
		_unpend_thread_no_timeout(th);
    8130:	4628      	mov	r0, r5
    8132:	f7ff ff5b 	bl	7fec <_unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8136:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    813a:	f023 0304 	bic.w	r3, r3, #4
    813e:	f804 3c0b 	strb.w	r3, [r4, #-11]
	_ready_thread(th);
    8142:	4628      	mov	r0, r5
}
    8144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_ready_thread(th);
    8148:	f7ff bfe2 	b.w	8110 <_ready_thread>

0000814c <_move_thread_to_end_of_prio_q>:
{
    814c:	b570      	push	{r4, r5, r6, lr}
    814e:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
    8150:	f7ff fec6 	bl	7ee0 <k_spin_lock.isra.10>
		_priq_run_add(&_kernel.ready_q.runq, thread);
    8154:	4d0b      	ldr	r5, [pc, #44]	; (8184 <_move_thread_to_end_of_prio_q+0x38>)
	LOCKED(&sched_lock) {
    8156:	4606      	mov	r6, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
    8158:	4620      	mov	r0, r4
    815a:	f7ff fea9 	bl	7eb0 <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
    815e:	4621      	mov	r1, r4
    8160:	f105 0028 	add.w	r0, r5, #40	; 0x28
    8164:	f7ff ff9e 	bl	80a4 <_priq_dumb_add>
	thread->base.thread_state |= states;
    8168:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    816a:	68a8      	ldr	r0, [r5, #8]
    816c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8170:	7363      	strb	r3, [r4, #13]
    8172:	1b03      	subs	r3, r0, r4
    8174:	4258      	negs	r0, r3
    8176:	4158      	adcs	r0, r3
    8178:	f7ff feba 	bl	7ef0 <update_cache>
    817c:	f386 8811 	msr	BASEPRI, r6
    8180:	bd70      	pop	{r4, r5, r6, pc}
    8182:	bf00      	nop
    8184:	20000e50 	.word	0x20000e50

00008188 <z_time_slice>:
	if (slice_time && sliceable(_current)) {
    8188:	4b11      	ldr	r3, [pc, #68]	; (81d0 <z_time_slice+0x48>)
    818a:	681b      	ldr	r3, [r3, #0]
{
    818c:	b510      	push	{r4, lr}
	if (slice_time && sliceable(_current)) {
    818e:	b1f3      	cbz	r3, 81ce <z_time_slice+0x46>
    8190:	4910      	ldr	r1, [pc, #64]	; (81d4 <z_time_slice+0x4c>)
    8192:	688b      	ldr	r3, [r1, #8]
		&& !_is_thread_timeout_active(t);
    8194:	89da      	ldrh	r2, [r3, #14]
    8196:	2a7f      	cmp	r2, #127	; 0x7f
    8198:	d819      	bhi.n	81ce <z_time_slice+0x46>
		&& !_is_prio_higher(t->base.prio, slice_max_prio)
    819a:	4a0f      	ldr	r2, [pc, #60]	; (81d8 <z_time_slice+0x50>)
    819c:	f993 400e 	ldrsb.w	r4, [r3, #14]
    81a0:	6812      	ldr	r2, [r2, #0]
    81a2:	4294      	cmp	r4, r2
    81a4:	db13      	blt.n	81ce <z_time_slice+0x46>
	return thread == _idle_thread;
    81a6:	4a0d      	ldr	r2, [pc, #52]	; (81dc <z_time_slice+0x54>)
		&& !_is_idle(t)
    81a8:	6812      	ldr	r2, [r2, #0]
    81aa:	4293      	cmp	r3, r2
    81ac:	d00f      	beq.n	81ce <z_time_slice+0x46>
		&& !_is_thread_timeout_active(t);
    81ae:	6a1a      	ldr	r2, [r3, #32]
    81b0:	3201      	adds	r2, #1
    81b2:	d10c      	bne.n	81ce <z_time_slice+0x46>
		if (ticks >= _current_cpu->slice_ticks) {
    81b4:	690a      	ldr	r2, [r1, #16]
    81b6:	4282      	cmp	r2, r0
    81b8:	dc06      	bgt.n	81c8 <z_time_slice+0x40>
			_move_thread_to_end_of_prio_q(_current);
    81ba:	4618      	mov	r0, r3
    81bc:	f7ff ffc6 	bl	814c <_move_thread_to_end_of_prio_q>
}
    81c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			reset_time_slice();
    81c4:	f7ff be7a 	b.w	7ebc <reset_time_slice>
			_current_cpu->slice_ticks -= ticks;
    81c8:	1a12      	subs	r2, r2, r0
    81ca:	610a      	str	r2, [r1, #16]
}
    81cc:	bd10      	pop	{r4, pc}
    81ce:	bd10      	pop	{r4, pc}
    81d0:	20000e84 	.word	0x20000e84
    81d4:	20000e50 	.word	0x20000e50
    81d8:	20000e80 	.word	0x20000e80
    81dc:	00009324 	.word	0x00009324

000081e0 <pend>:
{
    81e0:	b570      	push	{r4, r5, r6, lr}
    81e2:	4604      	mov	r4, r0
    81e4:	460d      	mov	r5, r1
    81e6:	4616      	mov	r6, r2
	_remove_thread_from_ready_q(thread);
    81e8:	f7ff fed8 	bl	7f9c <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    81ec:	7b63      	ldrb	r3, [r4, #13]
    81ee:	f043 0302 	orr.w	r3, r3, #2
    81f2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    81f4:	b125      	cbz	r5, 8200 <pend+0x20>
		thread->base.pended_on = wait_q;
    81f6:	60a5      	str	r5, [r4, #8]
		_priq_wait_add(&wait_q->waitq, thread);
    81f8:	4621      	mov	r1, r4
    81fa:	4628      	mov	r0, r5
    81fc:	f7ff ff52 	bl	80a4 <_priq_dumb_add>
	if (timeout != K_FOREVER) {
    8200:	1c73      	adds	r3, r6, #1
    8202:	d012      	beq.n	822a <pend+0x4a>
    8204:	4809      	ldr	r0, [pc, #36]	; (822c <pend+0x4c>)
    8206:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    820a:	2100      	movs	r1, #0
    820c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    8210:	fbc5 0106 	smlal	r0, r1, r5, r6
    8214:	2300      	movs	r3, #0
    8216:	f7f7 ff63 	bl	e0 <__aeabi_ldivmod>
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    821a:	4905      	ldr	r1, [pc, #20]	; (8230 <pend+0x50>)
    821c:	1c42      	adds	r2, r0, #1
    821e:	f104 0018 	add.w	r0, r4, #24
}
    8222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8226:	f000 ba5f 	b.w	86e8 <_add_timeout>
    822a:	bd70      	pop	{r4, r5, r6, pc}
    822c:	0004ffff 	.word	0x0004ffff
    8230:	00008123 	.word	0x00008123

00008234 <_pend_current_thread>:
{
    8234:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
    8236:	4b05      	ldr	r3, [pc, #20]	; (824c <_pend_current_thread+0x18>)
{
    8238:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
    823a:	6898      	ldr	r0, [r3, #8]
    823c:	f7ff ffd0 	bl	81e0 <pend>
    8240:	4620      	mov	r0, r4
}
    8242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8246:	f7f9 bae3 	b.w	1810 <__swap>
    824a:	bf00      	nop
    824c:	20000e50 	.word	0x20000e50

00008250 <_unpend_all>:

	return CONTAINER_OF(n, struct k_thread, base.qnode_dlist);
}

int _unpend_all(_wait_q_t *wait_q)
{
    8250:	b538      	push	{r3, r4, r5, lr}
    8252:	4605      	mov	r5, r0
	int need_sched = 0;
    8254:	2000      	movs	r0, #0
	return list->head == list;
    8256:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8258:	42a5      	cmp	r5, r4
    825a:	d000      	beq.n	825e <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(wait_q)) != NULL) {
    825c:	b904      	cbnz	r4, 8260 <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
    825e:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
    8260:	4620      	mov	r0, r4
    8262:	f7ff fee2 	bl	802a <_unpend_thread>
		_ready_thread(th);
    8266:	4620      	mov	r0, r4
    8268:	f7ff ff52 	bl	8110 <_ready_thread>
		need_sched = 1;
    826c:	2001      	movs	r0, #1
    826e:	e7f2      	b.n	8256 <_unpend_all+0x6>

00008270 <_sched_init>:
	list->head = (sys_dnode_t *)list;
    8270:	4b04      	ldr	r3, [pc, #16]	; (8284 <_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    8272:	2100      	movs	r1, #0
    8274:	f103 0228 	add.w	r2, r3, #40	; 0x28
    8278:	629a      	str	r2, [r3, #40]	; 0x28
	list->tail = (sys_dnode_t *)list;
    827a:	62da      	str	r2, [r3, #44]	; 0x2c
    827c:	4608      	mov	r0, r1
    827e:	f7ff be67 	b.w	7f50 <k_sched_time_slice_set>
    8282:	bf00      	nop
    8284:	20000e50 	.word	0x20000e50

00008288 <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
    8288:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
    828a:	4c12      	ldr	r4, [pc, #72]	; (82d4 <_impl_k_yield+0x4c>)
    828c:	4b12      	ldr	r3, [pc, #72]	; (82d8 <_impl_k_yield+0x50>)
    828e:	68a2      	ldr	r2, [r4, #8]
    8290:	681b      	ldr	r3, [r3, #0]
    8292:	429a      	cmp	r2, r3
    8294:	d00f      	beq.n	82b6 <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
    8296:	f7ff fe23 	bl	7ee0 <k_spin_lock.isra.10>
    829a:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
    829c:	68a0      	ldr	r0, [r4, #8]
    829e:	f7ff fe07 	bl	7eb0 <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
    82a2:	68a1      	ldr	r1, [r4, #8]
    82a4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    82a8:	f7ff fefc 	bl	80a4 <_priq_dumb_add>
			update_cache(1);
    82ac:	2001      	movs	r0, #1
    82ae:	f7ff fe1f 	bl	7ef0 <update_cache>
    82b2:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	(void)_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
    82b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    82b8:	68a3      	ldr	r3, [r4, #8]
    82ba:	429a      	cmp	r2, r3
    82bc:	d009      	beq.n	82d2 <_impl_k_yield+0x4a>
	__asm__ volatile(
    82be:	f04f 0320 	mov.w	r3, #32
    82c2:	f3ef 8011 	mrs	r0, BASEPRI
    82c6:	f383 8811 	msr	BASEPRI, r3
		(void)_Swap(irq_lock());
	}
#endif
}
    82ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    82ce:	f7f9 ba9f 	b.w	1810 <__swap>
    82d2:	bd38      	pop	{r3, r4, r5, pc}
    82d4:	20000e50 	.word	0x20000e50
    82d8:	00009324 	.word	0x00009324

000082dc <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
    82dc:	4b01      	ldr	r3, [pc, #4]	; (82e4 <_impl_k_current_get+0x8>)
    82de:	6898      	ldr	r0, [r3, #8]
    82e0:	4770      	bx	lr
    82e2:	bf00      	nop
    82e4:	20000e50 	.word	0x20000e50

000082e8 <_impl_k_sem_init>:
	sys_trace_void(SYS_TRACE_ID_SEMA_INIT);
	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
    82e8:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
    82ec:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    82ee:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    82f0:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    82f2:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
    82f4:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
    82f6:	6143      	str	r3, [r0, #20]
    82f8:	4770      	bx	lr

000082fa <_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void _impl_k_sem_give(struct k_sem *sem)
{
    82fa:	b570      	push	{r4, r5, r6, lr}
    82fc:	4604      	mov	r4, r0
    82fe:	f04f 0320 	mov.w	r3, #32
    8302:	f3ef 8611 	mrs	r6, BASEPRI
    8306:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
    830a:	f7ff fe80 	bl	800e <_unpend_first_thread>
	if (thread != NULL) {
    830e:	4605      	mov	r5, r0
    8310:	b170      	cbz	r0, 8330 <_impl_k_sem_give+0x36>
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    8312:	7b43      	ldrb	r3, [r0, #13]
    8314:	06db      	lsls	r3, r3, #27
    8316:	d104      	bne.n	8322 <_impl_k_sem_give+0x28>
    8318:	6a03      	ldr	r3, [r0, #32]
	if (_is_thread_ready(thread)) {
    831a:	3301      	adds	r3, #1
    831c:	d101      	bne.n	8322 <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
    831e:	f7ff fee1 	bl	80e4 <_add_thread_to_ready_q>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    8322:	2300      	movs	r3, #0
    8324:	66ab      	str	r3, [r5, #104]	; 0x68
	u32_t key = irq_lock();

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	_reschedule(key);
    8326:	4630      	mov	r0, r6
}
    8328:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
    832c:	f7ff be88 	b.w	8040 <_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
    8330:	68a3      	ldr	r3, [r4, #8]
    8332:	68e2      	ldr	r2, [r4, #12]
    8334:	429a      	cmp	r2, r3
    8336:	bf18      	it	ne
    8338:	3301      	addne	r3, #1
    833a:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    833c:	2102      	movs	r1, #2
    833e:	f104 0010 	add.w	r0, r4, #16
    8342:	f000 fbc3 	bl	8acc <_handle_obj_poll_events>
    8346:	e7ee      	b.n	8326 <_impl_k_sem_give+0x2c>

00008348 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    8348:	b410      	push	{r4}
    834a:	460a      	mov	r2, r1
    834c:	4604      	mov	r4, r0
    834e:	f04f 0320 	mov.w	r3, #32
    8352:	f3ef 8011 	mrs	r0, BASEPRI
    8356:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(((_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	u32_t key = irq_lock();

	if (likely(sem->count > 0U)) {
    835a:	68a3      	ldr	r3, [r4, #8]
    835c:	b133      	cbz	r3, 836c <_impl_k_sem_take+0x24>
		sem->count--;
    835e:	3b01      	subs	r3, #1
    8360:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    8362:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
    8366:	2000      	movs	r0, #0
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
    8368:	bc10      	pop	{r4}
    836a:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
    836c:	b921      	cbnz	r1, 8378 <_impl_k_sem_take+0x30>
    836e:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
    8372:	f06f 000f 	mvn.w	r0, #15
    8376:	e7f7      	b.n	8368 <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
    8378:	4621      	mov	r1, r4
}
    837a:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
    837c:	f7ff bf5a 	b.w	8234 <_pend_current_thread>

00008380 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    8380:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    8382:	4c08      	ldr	r4, [pc, #32]	; (83a4 <k_sys_work_q_init+0x24>)
    8384:	4908      	ldr	r1, [pc, #32]	; (83a8 <k_sys_work_q_init+0x28>)
    8386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    838a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    838e:	4620      	mov	r0, r4
    8390:	f000 f91a 	bl	85c8 <k_work_q_start>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    8394:	f104 0010 	add.w	r0, r4, #16
    8398:	4904      	ldr	r1, [pc, #16]	; (83ac <k_sys_work_q_init+0x2c>)
    839a:	f000 f84d 	bl	8438 <_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
    839e:	2000      	movs	r0, #0
    83a0:	bd10      	pop	{r4, pc}
    83a2:	bf00      	nop
    83a4:	20000e88 	.word	0x20000e88
    83a8:	20002410 	.word	0x20002410
    83ac:	00009367 	.word	0x00009367

000083b0 <schedule_new_thread.part.8>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    83b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    83b2:	4605      	mov	r5, r0
    83b4:	460f      	mov	r7, r1
	__asm__ volatile(
    83b6:	f04f 0320 	mov.w	r3, #32
    83ba:	f3ef 8411 	mrs	r4, BASEPRI
    83be:	f383 8811 	msr	BASEPRI, r3
    83c2:	480a      	ldr	r0, [pc, #40]	; (83ec <schedule_new_thread.part.8+0x3c>)
    83c4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    83c8:	2100      	movs	r1, #0
    83ca:	2300      	movs	r3, #0
    83cc:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    83d0:	fbc6 0107 	smlal	r0, r1, r6, r7
    83d4:	f7f7 fe84 	bl	e0 <__aeabi_ldivmod>
    83d8:	4905      	ldr	r1, [pc, #20]	; (83f0 <schedule_new_thread.part.8+0x40>)
    83da:	1c42      	adds	r2, r0, #1
    83dc:	f105 0018 	add.w	r0, r5, #24
    83e0:	f000 f982 	bl	86e8 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    83e4:	f384 8811 	msr	BASEPRI, r4
    83e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    83ea:	bf00      	nop
    83ec:	0004ffff 	.word	0x0004ffff
    83f0:	00008123 	.word	0x00008123

000083f4 <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    83f4:	7b42      	ldrb	r2, [r0, #13]
    83f6:	06d2      	lsls	r2, r2, #27
    83f8:	d104      	bne.n	8404 <_ready_thread+0x10>
    83fa:	6a03      	ldr	r3, [r0, #32]
	if (_is_thread_ready(thread)) {
    83fc:	3301      	adds	r3, #1
    83fe:	d101      	bne.n	8404 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
    8400:	f7ff be70 	b.w	80e4 <_add_thread_to_ready_q>
    8404:	4770      	bx	lr
	...

00008408 <k_is_in_isr>:
    8408:	f3ef 8005 	mrs	r0, IPSR
    840c:	280d      	cmp	r0, #13
    840e:	d807      	bhi.n	8420 <k_is_in_isr+0x18>
    8410:	b138      	cbz	r0, 8422 <k_is_in_isr+0x1a>
    8412:	4b04      	ldr	r3, [pc, #16]	; (8424 <k_is_in_isr+0x1c>)
    8414:	6858      	ldr	r0, [r3, #4]
    8416:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    841a:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    841e:	4770      	bx	lr
    8420:	2001      	movs	r0, #1
}
    8422:	4770      	bx	lr
    8424:	e000ed00 	.word	0xe000ed00

00008428 <_is_thread_essential>:
	return (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
    8428:	4b02      	ldr	r3, [pc, #8]	; (8434 <_is_thread_essential+0xc>)
    842a:	689b      	ldr	r3, [r3, #8]
    842c:	7b18      	ldrb	r0, [r3, #12]
}
    842e:	f000 0001 	and.w	r0, r0, #1
    8432:	4770      	bx	lr
    8434:	20000e50 	.word	0x20000e50

00008438 <_impl_k_thread_name_set>:
{
    8438:	4770      	bx	lr

0000843a <_impl_k_thread_start>:
{
    843a:	b510      	push	{r4, lr}
	__asm__ volatile(
    843c:	f04f 0320 	mov.w	r3, #32
    8440:	f3ef 8411 	mrs	r4, BASEPRI
    8444:	f383 8811 	msr	BASEPRI, r3
    8448:	7b43      	ldrb	r3, [r0, #13]
	if (_has_thread_started(thread)) {
    844a:	0759      	lsls	r1, r3, #29
    844c:	d402      	bmi.n	8454 <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    844e:	f384 8811 	msr	BASEPRI, r4
    8452:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8454:	f023 0304 	bic.w	r3, r3, #4
    8458:	7343      	strb	r3, [r0, #13]
	_ready_thread(thread);
    845a:	f7ff ffcb 	bl	83f4 <_ready_thread>
	_reschedule(key);
    845e:	4620      	mov	r0, r4
}
    8460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
    8464:	f7ff bdec 	b.w	8040 <_reschedule>

00008468 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    8468:	b530      	push	{r4, r5, lr}
    846a:	b087      	sub	sp, #28
    846c:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    846e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    8470:	9504      	str	r5, [sp, #16]
    8472:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    8474:	9503      	str	r5, [sp, #12]
    8476:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    8478:	9502      	str	r5, [sp, #8]
    847a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    847c:	9501      	str	r5, [sp, #4]
    847e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    8480:	9500      	str	r5, [sp, #0]
    8482:	f7f9 fbad 	bl	1be0 <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    8486:	4b04      	ldr	r3, [pc, #16]	; (8498 <_setup_new_thread+0x30>)
    8488:	689b      	ldr	r3, [r3, #8]
    848a:	b913      	cbnz	r3, 8492 <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    848c:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    848e:	b007      	add	sp, #28
    8490:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
    8492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8494:	e7fa      	b.n	848c <_setup_new_thread+0x24>
    8496:	bf00      	nop
    8498:	20000e50 	.word	0x20000e50

0000849c <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    849c:	b570      	push	{r4, r5, r6, lr}
    849e:	b086      	sub	sp, #24
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");

	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    84a0:	2600      	movs	r6, #0
    84a2:	9605      	str	r6, [sp, #20]
    84a4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    84a6:	9604      	str	r6, [sp, #16]
    84a8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    84aa:	9603      	str	r6, [sp, #12]
    84ac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    84ae:	9602      	str	r6, [sp, #8]
    84b0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
    84b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    84b4:	9601      	str	r6, [sp, #4]
    84b6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    84b8:	9600      	str	r6, [sp, #0]
{
    84ba:	4604      	mov	r4, r0
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    84bc:	f7ff ffd4 	bl	8468 <_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
    84c0:	1c6b      	adds	r3, r5, #1
    84c2:	d003      	beq.n	84cc <_impl_k_thread_create+0x30>
	if (delay == 0) {
    84c4:	b92d      	cbnz	r5, 84d2 <_impl_k_thread_create+0x36>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
    84c6:	4620      	mov	r0, r4
    84c8:	f7ff ffb7 	bl	843a <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
    84cc:	4620      	mov	r0, r4
    84ce:	b006      	add	sp, #24
    84d0:	bd70      	pop	{r4, r5, r6, pc}
    84d2:	4629      	mov	r1, r5
    84d4:	4620      	mov	r0, r4
    84d6:	f7ff ff6b 	bl	83b0 <schedule_new_thread.part.8>
    84da:	e7f7      	b.n	84cc <_impl_k_thread_create+0x30>

000084dc <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    84dc:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    84de:	b510      	push	{r4, lr}
    84e0:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    84e2:	b103      	cbz	r3, 84e6 <_k_thread_single_abort+0xa>
		thread->fn_abort();
    84e4:	4798      	blx	r3
    84e6:	7b63      	ldrb	r3, [r4, #13]
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    84e8:	06da      	lsls	r2, r3, #27
    84ea:	d10a      	bne.n	8502 <_k_thread_single_abort+0x26>
    84ec:	6a22      	ldr	r2, [r4, #32]
	}

	if (_is_thread_ready(thread)) {
    84ee:	3201      	adds	r2, #1
    84f0:	d107      	bne.n	8502 <_k_thread_single_abort+0x26>
		_remove_thread_from_ready_q(thread);
    84f2:	4620      	mov	r0, r4
    84f4:	f7ff fd52 	bl	7f9c <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			(void)_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    84f8:	7b63      	ldrb	r3, [r4, #13]
    84fa:	f043 0308 	orr.w	r3, r3, #8
    84fe:	7363      	strb	r3, [r4, #13]
    8500:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
    8502:	079b      	lsls	r3, r3, #30
    8504:	d502      	bpl.n	850c <_k_thread_single_abort+0x30>
			_unpend_thread_no_timeout(thread);
    8506:	4620      	mov	r0, r4
    8508:	f7ff fd70 	bl	7fec <_unpend_thread_no_timeout>
		if (_is_thread_timeout_active(thread)) {
    850c:	6a23      	ldr	r3, [r4, #32]
    850e:	3301      	adds	r3, #1
    8510:	d0f2      	beq.n	84f8 <_k_thread_single_abort+0x1c>
	return _abort_timeout(&thread->base.timeout);
    8512:	f104 0018 	add.w	r0, r4, #24
    8516:	f000 f8a9 	bl	866c <_abort_timeout>
    851a:	e7ed      	b.n	84f8 <_k_thread_single_abort+0x1c>

0000851c <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    851c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    851e:	4f22      	ldr	r7, [pc, #136]	; (85a8 <_init_static_threads+0x8c>)
    8520:	4d22      	ldr	r5, [pc, #136]	; (85ac <_init_static_threads+0x90>)
{
    8522:	b087      	sub	sp, #28
    8524:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    8526:	42bd      	cmp	r5, r7
    8528:	f105 0430 	add.w	r4, r5, #48	; 0x30
    852c:	d314      	bcc.n	8558 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
    852e:	4b20      	ldr	r3, [pc, #128]	; (85b0 <_init_static_threads+0x94>)
    8530:	689a      	ldr	r2, [r3, #8]
    8532:	7bd3      	ldrb	r3, [r2, #15]
    8534:	3b01      	subs	r3, #1
    8536:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    8538:	f04f 0320 	mov.w	r3, #32
    853c:	f3ef 8511 	mrs	r5, BASEPRI
    8540:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    8544:	4c19      	ldr	r4, [pc, #100]	; (85ac <_init_static_threads+0x90>)
    8546:	42b4      	cmp	r4, r6
    8548:	d322      	bcc.n	8590 <_init_static_threads+0x74>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    854a:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
    854e:	b007      	add	sp, #28
    8550:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
    8554:	f7ff bd8c 	b.w	8070 <k_sched_unlock>
		_setup_new_thread(
    8558:	f854 3c04 	ldr.w	r3, [r4, #-4]
    855c:	9305      	str	r3, [sp, #20]
    855e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    8562:	9304      	str	r3, [sp, #16]
    8564:	f854 3c14 	ldr.w	r3, [r4, #-20]
    8568:	9303      	str	r3, [sp, #12]
    856a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    856e:	9302      	str	r3, [sp, #8]
    8570:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    8574:	9301      	str	r3, [sp, #4]
    8576:	f854 3c20 	ldr.w	r3, [r4, #-32]
    857a:	9300      	str	r3, [sp, #0]
    857c:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
    8580:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    8582:	f7ff ff71 	bl	8468 <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    8586:	f854 3c30 	ldr.w	r3, [r4, #-48]
    858a:	64dd      	str	r5, [r3, #76]	; 0x4c
    858c:	4625      	mov	r5, r4
    858e:	e7ca      	b.n	8526 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
    8590:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8592:	1c4b      	adds	r3, r1, #1
    8594:	d003      	beq.n	859e <_init_static_threads+0x82>
			schedule_new_thread(thread_data->init_thread,
    8596:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
    8598:	b919      	cbnz	r1, 85a2 <_init_static_threads+0x86>
    859a:	f7ff ff4e 	bl	843a <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    859e:	3430      	adds	r4, #48	; 0x30
    85a0:	e7d1      	b.n	8546 <_init_static_threads+0x2a>
    85a2:	f7ff ff05 	bl	83b0 <schedule_new_thread.part.8>
    85a6:	e7fa      	b.n	859e <_init_static_threads+0x82>
    85a8:	20002a8c 	.word	0x20002a8c
    85ac:	20002a8c 	.word	0x20002a8c
    85b0:	20000e50 	.word	0x20000e50

000085b4 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    85b4:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    85b6:	2300      	movs	r3, #0
    85b8:	73c3      	strb	r3, [r0, #15]
	t->dticks = _INACTIVE;
    85ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	thread_base->thread_state = (u8_t)initial_state;
    85be:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    85c0:	7381      	strb	r1, [r0, #14]
    85c2:	6203      	str	r3, [r0, #32]
    85c4:	4770      	bx	lr
	...

000085c8 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    85c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    85cc:	4605      	mov	r5, r0
    85ce:	b086      	sub	sp, #24
    85d0:	4698      	mov	r8, r3
    85d2:	460e      	mov	r6, r1
    85d4:	4617      	mov	r7, r2
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
    85d6:	f105 0410 	add.w	r4, r5, #16
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
    85da:	f7ff fbe1 	bl	7da0 <_impl_k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    85de:	2000      	movs	r0, #0
    85e0:	9005      	str	r0, [sp, #20]
    85e2:	9004      	str	r0, [sp, #16]
    85e4:	9002      	str	r0, [sp, #8]
    85e6:	9001      	str	r0, [sp, #4]
    85e8:	4631      	mov	r1, r6
    85ea:	f8cd 800c 	str.w	r8, [sp, #12]
    85ee:	9500      	str	r5, [sp, #0]
    85f0:	4b05      	ldr	r3, [pc, #20]	; (8608 <k_work_q_start+0x40>)
    85f2:	463a      	mov	r2, r7
    85f4:	4620      	mov	r0, r4
    85f6:	f7ff ff51 	bl	849c <_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    85fa:	4904      	ldr	r1, [pc, #16]	; (860c <k_work_q_start+0x44>)
    85fc:	4620      	mov	r0, r4
			work_q, NULL, NULL, prio, 0, 0);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
    85fe:	b006      	add	sp, #24
    8600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8604:	f7ff bf18 	b.w	8438 <_impl_k_thread_name_set>
    8608:	000007d9 	.word	0x000007d9
    860c:	00009370 	.word	0x00009370

00008610 <elapsed>:
	t->dticks = _INACTIVE;
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    8610:	4b03      	ldr	r3, [pc, #12]	; (8620 <elapsed+0x10>)
    8612:	681b      	ldr	r3, [r3, #0]
    8614:	b90b      	cbnz	r3, 861a <elapsed+0xa>
    8616:	f7f9 b8b5 	b.w	1784 <z_clock_elapsed>
}
    861a:	2000      	movs	r0, #0
    861c:	4770      	bx	lr
    861e:	bf00      	nop
    8620:	20000f04 	.word	0x20000f04

00008624 <k_spin_lock.isra.1>:
	__asm__ volatile(
    8624:	f04f 0320 	mov.w	r3, #32
    8628:	f3ef 8011 	mrs	r0, BASEPRI
    862c:	f383 8811 	msr	BASEPRI, r3
    8630:	4770      	bx	lr
	...

00008634 <remove_timeout>:
	if (t->node.next != NULL && t->node.prev != NULL) {
    8634:	6803      	ldr	r3, [r0, #0]
    8636:	b153      	cbz	r3, 864e <remove_timeout+0x1a>
    8638:	6842      	ldr	r2, [r0, #4]
    863a:	b142      	cbz	r2, 864e <remove_timeout+0x1a>
	return (node == list->tail) ? NULL : node->next;
    863c:	4a0a      	ldr	r2, [pc, #40]	; (8668 <remove_timeout+0x34>)
    863e:	6852      	ldr	r2, [r2, #4]
    8640:	4290      	cmp	r0, r2
    8642:	d10b      	bne.n	865c <remove_timeout+0x28>
	node->prev->next = node->next;
    8644:	e890 000c 	ldmia.w	r0, {r2, r3}
    8648:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    864a:	6802      	ldr	r2, [r0, #0]
    864c:	6053      	str	r3, [r2, #4]
	t->node.next = t->node.prev = NULL;
    864e:	2300      	movs	r3, #0
    8650:	6043      	str	r3, [r0, #4]
    8652:	6003      	str	r3, [r0, #0]
	t->dticks = _INACTIVE;
    8654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8658:	6083      	str	r3, [r0, #8]
}
    865a:	4770      	bx	lr
			next(t)->dticks += t->dticks;
    865c:	689a      	ldr	r2, [r3, #8]
    865e:	6881      	ldr	r1, [r0, #8]
    8660:	440a      	add	r2, r1
    8662:	609a      	str	r2, [r3, #8]
    8664:	e7ee      	b.n	8644 <remove_timeout+0x10>
    8666:	bf00      	nop
    8668:	200029e8 	.word	0x200029e8

0000866c <_abort_timeout>:
		}
	}
}

int _abort_timeout(struct _timeout *to)
{
    866c:	b510      	push	{r4, lr}
    866e:	4602      	mov	r2, r0
	int ret = _INACTIVE;

	LOCKED(&timeout_lock) {
    8670:	f7ff ffd8 	bl	8624 <k_spin_lock.isra.1>
    8674:	4604      	mov	r4, r0
		if (to->dticks != _INACTIVE) {
    8676:	6890      	ldr	r0, [r2, #8]
    8678:	1c43      	adds	r3, r0, #1
    867a:	d003      	beq.n	8684 <_abort_timeout+0x18>
			remove_timeout(to);
    867c:	4610      	mov	r0, r2
    867e:	f7ff ffd9 	bl	8634 <remove_timeout>
			ret = 0;
    8682:	2000      	movs	r0, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    8684:	f384 8811 	msr	BASEPRI, r4
		}
	}

	return ret;
}
    8688:	bd10      	pop	{r4, pc}
	...

0000868c <_get_next_timeout_expiry>:
}

s32_t _get_next_timeout_expiry(void)
{
	s32_t ret = 0;
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
    868c:	4b13      	ldr	r3, [pc, #76]	; (86dc <_get_next_timeout_expiry+0x50>)
    868e:	781b      	ldrb	r3, [r3, #0]
{
    8690:	b570      	push	{r4, r5, r6, lr}
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
    8692:	2b00      	cmp	r3, #0
    8694:	bf14      	ite	ne
    8696:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    869a:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000

	LOCKED(&timeout_lock) {
    869e:	f7ff ffc1 	bl	8624 <k_spin_lock.isra.1>
	return list->head == list;
    86a2:	4b0f      	ldr	r3, [pc, #60]	; (86e0 <_get_next_timeout_expiry+0x54>)
    86a4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    86a6:	429c      	cmp	r4, r3
    86a8:	4606      	mov	r6, r0
    86aa:	d00a      	beq.n	86c2 <_get_next_timeout_expiry+0x36>
		struct _timeout *to = first();

		ret = to == NULL ? maxw : max(0, to->dticks - elapsed());
    86ac:	b14c      	cbz	r4, 86c2 <_get_next_timeout_expiry+0x36>
    86ae:	68a5      	ldr	r5, [r4, #8]
    86b0:	f7ff ffae 	bl	8610 <elapsed>
    86b4:	1a28      	subs	r0, r5, r0
    86b6:	2800      	cmp	r0, #0
    86b8:	db0d      	blt.n	86d6 <_get_next_timeout_expiry+0x4a>
    86ba:	68a4      	ldr	r4, [r4, #8]
    86bc:	f7ff ffa8 	bl	8610 <elapsed>
    86c0:	1a22      	subs	r2, r4, r0
    86c2:	f386 8811 	msr	BASEPRI, r6
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    86c6:	4b07      	ldr	r3, [pc, #28]	; (86e4 <_get_next_timeout_expiry+0x58>)
    86c8:	691b      	ldr	r3, [r3, #16]
    86ca:	b113      	cbz	r3, 86d2 <_get_next_timeout_expiry+0x46>
    86cc:	429a      	cmp	r2, r3
    86ce:	bfa8      	it	ge
    86d0:	461a      	movge	r2, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    86d2:	4610      	mov	r0, r2
    86d4:	bd70      	pop	{r4, r5, r6, pc}
		ret = to == NULL ? maxw : max(0, to->dticks - elapsed());
    86d6:	2200      	movs	r2, #0
    86d8:	e7f3      	b.n	86c2 <_get_next_timeout_expiry+0x36>
    86da:	bf00      	nop
    86dc:	20000f08 	.word	0x20000f08
    86e0:	200029e8 	.word	0x200029e8
    86e4:	20000e50 	.word	0x20000e50

000086e8 <_add_timeout>:
{
    86e8:	b570      	push	{r4, r5, r6, lr}
	to->fn = fn;
    86ea:	60c1      	str	r1, [r0, #12]
{
    86ec:	4616      	mov	r6, r2
    86ee:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    86f0:	f7ff ff98 	bl	8624 <k_spin_lock.isra.1>
    86f4:	4605      	mov	r5, r0
		to->dticks = ticks + elapsed();
    86f6:	f7ff ff8b 	bl	8610 <elapsed>
	return list->head == list;
    86fa:	4a18      	ldr	r2, [pc, #96]	; (875c <_add_timeout+0x74>)
    86fc:	6813      	ldr	r3, [r2, #0]
    86fe:	2e01      	cmp	r6, #1
    8700:	bfac      	ite	ge
    8702:	1980      	addge	r0, r0, r6
    8704:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8706:	4293      	cmp	r3, r2
    8708:	60a0      	str	r0, [r4, #8]
    870a:	d001      	beq.n	8710 <_add_timeout+0x28>
    870c:	6856      	ldr	r6, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
    870e:	b933      	cbnz	r3, 871e <_add_timeout+0x36>
	node->next = list;
    8710:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
    8712:	6853      	ldr	r3, [r2, #4]
    8714:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    8716:	6853      	ldr	r3, [r2, #4]
    8718:	601c      	str	r4, [r3, #0]
	list->tail = node;
    871a:	6054      	str	r4, [r2, #4]
    871c:	e00b      	b.n	8736 <_add_timeout+0x4e>
			if (t->dticks > to->dticks) {
    871e:	6898      	ldr	r0, [r3, #8]
    8720:	68a1      	ldr	r1, [r4, #8]
    8722:	4288      	cmp	r0, r1
    8724:	dd14      	ble.n	8750 <_add_timeout+0x68>
				t->dticks -= to->dticks;
    8726:	1a41      	subs	r1, r0, r1
    8728:	6099      	str	r1, [r3, #8]
		node->prev = insert_point->prev;
    872a:	6859      	ldr	r1, [r3, #4]
    872c:	6061      	str	r1, [r4, #4]
		node->next = insert_point;
    872e:	6023      	str	r3, [r4, #0]
		insert_point->prev->next = node;
    8730:	6859      	ldr	r1, [r3, #4]
    8732:	600c      	str	r4, [r1, #0]
		insert_point->prev = node;
    8734:	605c      	str	r4, [r3, #4]
	return list->head == list;
    8736:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8738:	4293      	cmp	r3, r2
    873a:	d006      	beq.n	874a <_add_timeout+0x62>
		if (to == first()) {
    873c:	429c      	cmp	r4, r3
    873e:	d104      	bne.n	874a <_add_timeout+0x62>
			z_clock_set_timeout(_get_next_timeout_expiry(), false);
    8740:	f7ff ffa4 	bl	868c <_get_next_timeout_expiry>
    8744:	2100      	movs	r1, #0
    8746:	f7f8 ffe9 	bl	171c <z_clock_set_timeout>
    874a:	f385 8811 	msr	BASEPRI, r5
}
    874e:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    8750:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    8752:	42b3      	cmp	r3, r6
    8754:	60a1      	str	r1, [r4, #8]
    8756:	d0db      	beq.n	8710 <_add_timeout+0x28>
    8758:	681b      	ldr	r3, [r3, #0]
    875a:	e7d8      	b.n	870e <_add_timeout+0x26>
    875c:	200029e8 	.word	0x200029e8

00008760 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
    8760:	b570      	push	{r4, r5, r6, lr}
    8762:	460e      	mov	r6, r1
    8764:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    8766:	f7ff ff5d 	bl	8624 <k_spin_lock.isra.1>
    876a:	4605      	mov	r5, r0
		int next = _get_next_timeout_expiry();
    876c:	f7ff ff8e 	bl	868c <_get_next_timeout_expiry>
		bool sooner = (next == K_FOREVER) || (ticks < next);
    8770:	1c43      	adds	r3, r0, #1
    8772:	d007      	beq.n	8784 <z_set_timeout_expiry+0x24>
		 * what we have.  Also don't try to set a timeout when
		 * one is about to expire: drivers have internal logic
		 * that will bump the timeout to the "next" tick if
		 * it's not considered to be settable as directed.
		 */
		if (sooner && !imminent) {
    8774:	42a0      	cmp	r0, r4
    8776:	dd05      	ble.n	8784 <z_set_timeout_expiry+0x24>
    8778:	2801      	cmp	r0, #1
    877a:	dd03      	ble.n	8784 <z_set_timeout_expiry+0x24>
			z_clock_set_timeout(ticks, idle);
    877c:	4631      	mov	r1, r6
    877e:	4620      	mov	r0, r4
    8780:	f7f8 ffcc 	bl	171c <z_clock_set_timeout>
    8784:	f385 8811 	msr	BASEPRI, r5
    8788:	bd70      	pop	{r4, r5, r6, pc}
	...

0000878c <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    878c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8790:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    8792:	f7ff fcf9 	bl	8188 <z_time_slice>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);
    8796:	f7ff ff45 	bl	8624 <k_spin_lock.isra.1>

	announce_remaining = ticks;
    879a:	4d1e      	ldr	r5, [pc, #120]	; (8814 <z_clock_announce+0x88>)
	return list->head == list;
    879c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 881c <z_clock_announce+0x90>
    87a0:	4e1d      	ldr	r6, [pc, #116]	; (8818 <z_clock_announce+0x8c>)
    87a2:	602c      	str	r4, [r5, #0]
	k_spinlock_key_t key = k_spin_lock(&timeout_lock);
    87a4:	4607      	mov	r7, r0
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
		announce_remaining -= dt;
		t->dticks = 0;
    87a6:	f04f 0900 	mov.w	r9, #0
    87aa:	f8d8 4000 	ldr.w	r4, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    87ae:	4544      	cmp	r4, r8
    87b0:	d006      	beq.n	87c0 <z_clock_announce+0x34>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    87b2:	b12c      	cbz	r4, 87c0 <z_clock_announce+0x34>
    87b4:	68a1      	ldr	r1, [r4, #8]
    87b6:	6828      	ldr	r0, [r5, #0]
    87b8:	4281      	cmp	r1, r0
    87ba:	dd14      	ble.n	87e6 <z_clock_announce+0x5a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    87bc:	1a09      	subs	r1, r1, r0
    87be:	60a1      	str	r1, [r4, #8]
	}

	curr_tick += announce_remaining;
    87c0:	e9d6 2300 	ldrd	r2, r3, [r6]
    87c4:	6829      	ldr	r1, [r5, #0]
    87c6:	1852      	adds	r2, r2, r1
    87c8:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
	announce_remaining = 0;
    87cc:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    87ce:	e9c6 2300 	strd	r2, r3, [r6]
	announce_remaining = 0;
    87d2:	602c      	str	r4, [r5, #0]

	z_clock_set_timeout(_get_next_timeout_expiry(), false);
    87d4:	f7ff ff5a 	bl	868c <_get_next_timeout_expiry>
    87d8:	4621      	mov	r1, r4
    87da:	f7f8 ff9f 	bl	171c <z_clock_set_timeout>
    87de:	f387 8811 	msr	BASEPRI, r7

	k_spin_unlock(&timeout_lock, key);
}
    87e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    87e6:	e9d6 2300 	ldrd	r2, r3, [r6]
    87ea:	1852      	adds	r2, r2, r1
    87ec:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
		t->dticks = 0;
    87f0:	f8c4 9008 	str.w	r9, [r4, #8]
		announce_remaining -= dt;
    87f4:	1a41      	subs	r1, r0, r1
		remove_timeout(t);
    87f6:	4620      	mov	r0, r4
		curr_tick += dt;
    87f8:	e9c6 2300 	strd	r2, r3, [r6]
		announce_remaining -= dt;
    87fc:	6029      	str	r1, [r5, #0]
		remove_timeout(t);
    87fe:	f7ff ff19 	bl	8634 <remove_timeout>
    8802:	f387 8811 	msr	BASEPRI, r7
		t->fn(t);
    8806:	68e3      	ldr	r3, [r4, #12]
    8808:	4620      	mov	r0, r4
    880a:	4798      	blx	r3
		key = k_spin_lock(&timeout_lock);
    880c:	f7ff ff0a 	bl	8624 <k_spin_lock.isra.1>
    8810:	4607      	mov	r7, r0
    8812:	e7ca      	b.n	87aa <z_clock_announce+0x1e>
    8814:	20000f04 	.word	0x20000f04
    8818:	20000f10 	.word	0x20000f10
    881c:	200029e8 	.word	0x200029e8

00008820 <z_tick_get>:
{
	can_wait_forever = 1;
}

s64_t z_tick_get(void)
{
    8820:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
    8824:	f7ff fefe 	bl	8624 <k_spin_lock.isra.1>
    8828:	4604      	mov	r4, r0
		t = curr_tick + z_clock_elapsed();
    882a:	f7f8 ffab 	bl	1784 <z_clock_elapsed>
    882e:	4b06      	ldr	r3, [pc, #24]	; (8848 <z_tick_get+0x28>)
    8830:	e9d3 2300 	ldrd	r2, r3, [r3]
    8834:	eb12 0b00 	adds.w	fp, r2, r0
    8838:	f143 0c00 	adc.w	ip, r3, #0
    883c:	4658      	mov	r0, fp
    883e:	4661      	mov	r1, ip
    8840:	f384 8811 	msr	BASEPRI, r4
	}
	return t;
}
    8844:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
    8848:	20000f10 	.word	0x20000f10

0000884c <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    884c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    884e:	f7ff ffe7 	bl	8820 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    8852:	bd08      	pop	{r3, pc}

00008854 <_impl_k_uptime_get_32>:

u32_t _impl_k_uptime_get_32(void)
{
    8854:	b508      	push	{r3, lr}
	return __ticks_to_ms(z_tick_get_32());
    8856:	f7ff fff9 	bl	884c <z_tick_get_32>
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    885a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    885e:	2264      	movs	r2, #100	; 0x64
    8860:	2300      	movs	r3, #0
    8862:	fba0 0101 	umull	r0, r1, r0, r1
    8866:	f7f7 fc8b 	bl	180 <__aeabi_uldivmod>
}
    886a:	bd08      	pop	{r3, pc}

0000886c <_impl_k_uptime_get>:
	return _impl_k_uptime_get_32();
}
#endif

s64_t _impl_k_uptime_get(void)
{
    886c:	b538      	push	{r3, r4, r5, lr}
	return __ticks_to_ms(z_tick_get());
    886e:	f7ff ffd7 	bl	8820 <z_tick_get>
    8872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8876:	fba0 4503 	umull	r4, r5, r0, r3
    887a:	fb03 5501 	mla	r5, r3, r1, r5
    887e:	2264      	movs	r2, #100	; 0x64
    8880:	2300      	movs	r3, #0
    8882:	4620      	mov	r0, r4
    8884:	4629      	mov	r1, r5
    8886:	f7f7 fc7b 	bl	180 <__aeabi_uldivmod>
}
    888a:	bd38      	pop	{r3, r4, r5, pc}

0000888c <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
    888c:	2314      	movs	r3, #20
    888e:	b530      	push	{r4, r5, lr}
    8890:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
    8894:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
    8896:	2900      	cmp	r1, #0
    8898:	da00      	bge.n	889c <clear_event_registrations+0x10>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
    889a:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
    889c:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
    889e:	6084      	str	r4, [r0, #8]
	switch (event->type) {
    88a0:	f003 030f 	and.w	r3, r3, #15
    88a4:	2b02      	cmp	r3, #2
    88a6:	d003      	beq.n	88b0 <clear_event_registrations+0x24>
    88a8:	2b04      	cmp	r3, #4
    88aa:	d001      	beq.n	88b0 <clear_event_registrations+0x24>
    88ac:	2b01      	cmp	r3, #1
    88ae:	d104      	bne.n	88ba <clear_event_registrations+0x2e>
	node->prev->next = node->next;
    88b0:	6843      	ldr	r3, [r0, #4]
    88b2:	6805      	ldr	r5, [r0, #0]
    88b4:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
    88b6:	6805      	ldr	r5, [r0, #0]
    88b8:	606b      	str	r3, [r5, #4]
    88ba:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
    88be:	f04f 0320 	mov.w	r3, #32
    88c2:	f3ef 8211 	mrs	r2, BASEPRI
    88c6:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
    88ca:	3901      	subs	r1, #1
    88cc:	3814      	subs	r0, #20
    88ce:	e7e2      	b.n	8896 <clear_event_registrations+0xa>

000088d0 <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
    88d0:	6883      	ldr	r3, [r0, #8]
{
    88d2:	b570      	push	{r4, r5, r6, lr}
    88d4:	4605      	mov	r5, r0
    88d6:	460e      	mov	r6, r1
	if (!event->poller) {
    88d8:	b1d3      	cbz	r3, 8910 <signal_poll_event+0x40>
	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread != NULL,
		 "poller should have a thread\n");

	event->poller->is_polling = false;
    88da:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
    88dc:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = false;
    88de:	711a      	strb	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
    88e0:	7b63      	ldrb	r3, [r4, #13]
    88e2:	079a      	lsls	r2, r3, #30
    88e4:	d514      	bpl.n	8910 <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
    88e6:	6a23      	ldr	r3, [r4, #32]
    88e8:	3302      	adds	r3, #2
    88ea:	d01b      	beq.n	8924 <signal_poll_event+0x54>
		return -EAGAIN;
	}

	_unpend_thread(thread);
    88ec:	4620      	mov	r0, r4
    88ee:	f7ff fb9c 	bl	802a <_unpend_thread>
	_set_thread_return_value(thread,
    88f2:	2e08      	cmp	r6, #8
    88f4:	bf14      	ite	ne
    88f6:	2300      	movne	r3, #0
    88f8:	f06f 0303 	mvneq.w	r3, #3
    88fc:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
    88fe:	7b63      	ldrb	r3, [r4, #13]
    8900:	06db      	lsls	r3, r3, #27
    8902:	d105      	bne.n	8910 <signal_poll_event+0x40>
    8904:	6a23      	ldr	r3, [r4, #32]
				 state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!_is_thread_ready(thread)) {
    8906:	3301      	adds	r3, #1
    8908:	d102      	bne.n	8910 <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
    890a:	4620      	mov	r0, r4
    890c:	f7ff fbea 	bl	80e4 <_add_thread_to_ready_q>
	event->state |= state;
    8910:	68eb      	ldr	r3, [r5, #12]
    8912:	f3c3 3204 	ubfx	r2, r3, #12, #5
    8916:	4316      	orrs	r6, r2
    8918:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
    891c:	2000      	movs	r0, #0
	event->state |= state;
    891e:	60eb      	str	r3, [r5, #12]
	event->poller = NULL;
    8920:	60a8      	str	r0, [r5, #8]

	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
    8922:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    8924:	f06f 000a 	mvn.w	r0, #10
}
    8928:	bd70      	pop	{r4, r5, r6, pc}

0000892a <add_event>:
{
    892a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    892c:	6803      	ldr	r3, [r0, #0]
    892e:	4298      	cmp	r0, r3
    8930:	4604      	mov	r4, r0
    8932:	460e      	mov	r6, r1
    8934:	4617      	mov	r7, r2
    8936:	d106      	bne.n	8946 <add_event+0x1c>
	node->next = list;
    8938:	6034      	str	r4, [r6, #0]
	node->prev = list->tail;
    893a:	6863      	ldr	r3, [r4, #4]
    893c:	6073      	str	r3, [r6, #4]
	list->tail->next = node;
    893e:	6863      	ldr	r3, [r4, #4]
    8940:	601e      	str	r6, [r3, #0]
	list->tail = node;
    8942:	6066      	str	r6, [r4, #4]
    8944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    8946:	6843      	ldr	r3, [r0, #4]
	if ((pending == NULL) ||
    8948:	2b00      	cmp	r3, #0
    894a:	d0f5      	beq.n	8938 <add_event+0xe>
		_is_t1_higher_prio_than_t2(pending->poller->thread,
    894c:	689b      	ldr	r3, [r3, #8]
    894e:	6811      	ldr	r1, [r2, #0]
    8950:	6818      	ldr	r0, [r3, #0]
    8952:	f7ff faf3 	bl	7f3c <_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
    8956:	2800      	cmp	r0, #0
    8958:	d1ee      	bne.n	8938 <add_event+0xe>
	return list->head == list;
    895a:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    895c:	42ac      	cmp	r4, r5
    895e:	d0eb      	beq.n	8938 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    8960:	2d00      	cmp	r5, #0
    8962:	d0e9      	beq.n	8938 <add_event+0xe>
		if (_is_t1_higher_prio_than_t2(poller->thread,
    8964:	68ab      	ldr	r3, [r5, #8]
    8966:	6838      	ldr	r0, [r7, #0]
    8968:	6819      	ldr	r1, [r3, #0]
    896a:	f7ff fae7 	bl	7f3c <_is_t1_higher_prio_than_t2>
    896e:	b130      	cbz	r0, 897e <add_event+0x54>
		node->prev = insert_point->prev;
    8970:	686b      	ldr	r3, [r5, #4]
    8972:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
    8974:	6035      	str	r5, [r6, #0]
		insert_point->prev->next = node;
    8976:	686b      	ldr	r3, [r5, #4]
    8978:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
    897a:	606e      	str	r6, [r5, #4]
    897c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    897e:	6863      	ldr	r3, [r4, #4]
    8980:	429d      	cmp	r5, r3
    8982:	d0d9      	beq.n	8938 <add_event+0xe>
    8984:	682d      	ldr	r5, [r5, #0]
    8986:	e7eb      	b.n	8960 <add_event+0x36>

00008988 <k_poll_event_init>:
{
    8988:	b530      	push	{r4, r5, lr}
	event->type = type;
    898a:	7b45      	ldrb	r5, [r0, #13]
	event->obj = obj;
    898c:	6103      	str	r3, [r0, #16]
	event->type = type;
    898e:	f361 0503 	bfi	r5, r1, #0, #4
    8992:	7345      	strb	r5, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
    8994:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
    8996:	2400      	movs	r4, #0
	event->state = K_POLL_STATE_NOT_READY;
    8998:	f364 3110 	bfi	r1, r4, #12, #5
    899c:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
    899e:	0c09      	lsrs	r1, r1, #16
    89a0:	f362 0141 	bfi	r1, r2, #1, #1
    89a4:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
    89a6:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
    89a8:	6084      	str	r4, [r0, #8]
	event->unused = 0;
    89aa:	f364 028f 	bfi	r2, r4, #2, #14
    89ae:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
    89b0:	bd30      	pop	{r4, r5, pc}
	...

000089b4 <_impl_k_poll>:
{
    89b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = true, };
    89b8:	4b43      	ldr	r3, [pc, #268]	; (8ac8 <_impl_k_poll+0x114>)
{
    89ba:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = true, };
    89bc:	689b      	ldr	r3, [r3, #8]
    89be:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
    89c0:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = true, };
    89c2:	2301      	movs	r3, #1
{
    89c4:	4607      	mov	r7, r0
    89c6:	468a      	mov	sl, r1
    89c8:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = true, };
    89ca:	f88d 3004 	strb.w	r3, [sp, #4]
    89ce:	4604      	mov	r4, r0
	int last_registered = -1, rc;
    89d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
    89d4:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
    89d6:	4556      	cmp	r6, sl
    89d8:	db13      	blt.n	8a02 <_impl_k_poll+0x4e>
    89da:	f04f 0320 	mov.w	r3, #32
    89de:	f3ef 8611 	mrs	r6, BASEPRI
    89e2:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
    89e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    89ea:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    89ee:	2b00      	cmp	r3, #0
    89f0:	d140      	bne.n	8a74 <_impl_k_poll+0xc0>
	clear_event_registrations(events, last_registered, key);
    89f2:	4632      	mov	r2, r6
    89f4:	4629      	mov	r1, r5
    89f6:	4638      	mov	r0, r7
    89f8:	f7ff ff48 	bl	888c <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    89fc:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
    8a00:	e042      	b.n	8a88 <_impl_k_poll+0xd4>
	__asm__ volatile(
    8a02:	f04f 0320 	mov.w	r3, #32
    8a06:	f3ef 8b11 	mrs	fp, BASEPRI
    8a0a:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
    8a0e:	7b63      	ldrb	r3, [r4, #13]
    8a10:	f003 030f 	and.w	r3, r3, #15
    8a14:	2b02      	cmp	r3, #2
    8a16:	d003      	beq.n	8a20 <_impl_k_poll+0x6c>
    8a18:	2b04      	cmp	r3, #4
    8a1a:	d004      	beq.n	8a26 <_impl_k_poll+0x72>
    8a1c:	2b01      	cmp	r3, #1
    8a1e:	d106      	bne.n	8a2e <_impl_k_poll+0x7a>
		if (event->signal->signaled != 0) {
    8a20:	6922      	ldr	r2, [r4, #16]
    8a22:	6892      	ldr	r2, [r2, #8]
    8a24:	e001      	b.n	8a2a <_impl_k_poll+0x76>
		if (!k_queue_is_empty(event->queue)) {
    8a26:	6922      	ldr	r2, [r4, #16]
    8a28:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0) {
    8a2a:	2a00      	cmp	r2, #0
    8a2c:	d13f      	bne.n	8aae <_impl_k_poll+0xfa>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
    8a2e:	f1b8 0f00 	cmp.w	r8, #0
    8a32:	d015      	beq.n	8a60 <_impl_k_poll+0xac>
    8a34:	f89d 2004 	ldrb.w	r2, [sp, #4]
    8a38:	b192      	cbz	r2, 8a60 <_impl_k_poll+0xac>
	switch (event->type) {
    8a3a:	2b02      	cmp	r3, #2
    8a3c:	d007      	beq.n	8a4e <_impl_k_poll+0x9a>
    8a3e:	2b04      	cmp	r3, #4
    8a40:	d013      	beq.n	8a6a <_impl_k_poll+0xb6>
    8a42:	2b01      	cmp	r3, #1
    8a44:	d109      	bne.n	8a5a <_impl_k_poll+0xa6>
		add_event(&event->signal->poll_events, event, poller);
    8a46:	466a      	mov	r2, sp
    8a48:	4621      	mov	r1, r4
    8a4a:	6920      	ldr	r0, [r4, #16]
    8a4c:	e003      	b.n	8a56 <_impl_k_poll+0xa2>
		add_event(&event->sem->poll_events, event, poller);
    8a4e:	6920      	ldr	r0, [r4, #16]
    8a50:	466a      	mov	r2, sp
    8a52:	4621      	mov	r1, r4
    8a54:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
    8a56:	f7ff ff68 	bl	892a <add_event>
	event->poller = poller;
    8a5a:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
    8a5e:	3501      	adds	r5, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    8a60:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
    8a64:	3601      	adds	r6, #1
    8a66:	3414      	adds	r4, #20
    8a68:	e7b5      	b.n	89d6 <_impl_k_poll+0x22>
		add_event(&event->queue->poll_events, event, poller);
    8a6a:	6920      	ldr	r0, [r4, #16]
    8a6c:	466a      	mov	r2, sp
    8a6e:	4621      	mov	r1, r4
    8a70:	3008      	adds	r0, #8
    8a72:	e7f0      	b.n	8a56 <_impl_k_poll+0xa2>
	poller.is_polling = false;
    8a74:	2300      	movs	r3, #0
    8a76:	f88d 3004 	strb.w	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
    8a7a:	f1b8 0f00 	cmp.w	r8, #0
    8a7e:	d107      	bne.n	8a90 <_impl_k_poll+0xdc>
    8a80:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
    8a84:	f06f 040a 	mvn.w	r4, #10
}
    8a88:	4620      	mov	r0, r4
    8a8a:	b005      	add	sp, #20
    8a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    8a90:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
    8a92:	4642      	mov	r2, r8
    8a94:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    8a96:	9102      	str	r1, [sp, #8]
    8a98:	9103      	str	r1, [sp, #12]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
    8a9a:	f7ff fbcb 	bl	8234 <_pend_current_thread>
    8a9e:	4604      	mov	r4, r0
	__asm__ volatile(
    8aa0:	f04f 0320 	mov.w	r3, #32
    8aa4:	f3ef 8611 	mrs	r6, BASEPRI
    8aa8:	f383 8811 	msr	BASEPRI, r3
    8aac:	e7a1      	b.n	89f2 <_impl_k_poll+0x3e>
	event->state |= state;
    8aae:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
    8ab0:	f8c4 9008 	str.w	r9, [r4, #8]
	event->state |= state;
    8ab4:	f3c2 3104 	ubfx	r1, r2, #12, #5
    8ab8:	430b      	orrs	r3, r1
    8aba:	f363 3210 	bfi	r2, r3, #12, #5
    8abe:	60e2      	str	r2, [r4, #12]
			poller.is_polling = false;
    8ac0:	f88d 9004 	strb.w	r9, [sp, #4]
    8ac4:	e7cc      	b.n	8a60 <_impl_k_poll+0xac>
    8ac6:	bf00      	nop
    8ac8:	20000e50 	.word	0x20000e50

00008acc <_handle_obj_poll_events>:
	return list->head == list;
    8acc:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    8ace:	4298      	cmp	r0, r3
    8ad0:	d007      	beq.n	8ae2 <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
    8ad2:	e893 0005 	ldmia.w	r3, {r0, r2}
    8ad6:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
    8ad8:	6818      	ldr	r0, [r3, #0]
    8ada:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
    8adc:	4618      	mov	r0, r3
    8ade:	f7ff bef7 	b.w	88d0 <signal_poll_event>
    8ae2:	4770      	bx	lr

00008ae4 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
    8ae4:	4770      	bx	lr
